/*=============================
 * HSP麻雀クライアントMiHaJong
 *  [コンフィグ画面ルーチン]
 *=============================
 */

/* ルール設定 */
#module
#include "const.hsp"
#include "mjcore.hsp"

#uselib "mjcore.dll"
#func _storeRule "?storeRule@RuleData@@SAXPAPBD@Z" var
#func _exportRule "?exportRule@RuleData@@SAXPAPAD@Z" var

#func _RuleName "?getRuleName@RuleData@@SAXQADHH@Z" var, int, int
#func _RuleDescription "?getRuleDescription@RuleData@@SAXQADHH@Z" var, int, int
#func _RuleTxt "?getRuleTxt@RuleData@@SAXQADHHH@Z" var, int, int, int

#defcfunc RuleName int RuleNum
	sdim tmptxt, 128: _RuleName tmptxt, 128, RuleNum
	return tmptxt
#defcfunc RuleDescription int RuleNum
	sdim tmptxt, 128: _RuleDescription tmptxt, 128, RuleNum
	return tmptxt
#defcfunc RuleTxt int index, int RuleNum
	sdim tmptxt, 128: _RuleTxt tmptxt, 128, RuleNum, index
	return tmptxt


#deffunc storeRule array RuleText
/*
		storeRule p1
		ルール設定文字列を代入する

		p1 : 設定が格納された文字列型配列

		モジュール内に保持されているルール設定の項目を置き換えます。
*/
	sdim RuleConf, RULE_IN_LINE+4, length(RuleText)
	dim RulePtr, length(RuleConf)
	repeat length(RuleConf): RuleConf(cnt) = RuleText(cnt): RulePtr(cnt) = varptr(RuleConf(cnt)): loop
	_storeRule RulePtr
	return

#deffunc exportRule array RuleText
/*
		exportRule p1
		ルール設定文字列を取得する

		p1 : 結果を格納する配列

		モジュール内に保持されているルール設定の項目を取得します。
*/
	sdim RuleText, RULE_IN_LINE+4, RULESIZE/RULE_IN_LINE
	dim RulePtr, length(RuleText)
	repeat length(RuleText): RulePtr(cnt) = varptr(RuleText(cnt)): loop
	_exportRule RulePtr
	return
#global

/* 設定画面 */
*selcat
	selcat_
return

#module config
#include "const.hsp"
#include "mjcore.hsp"

#uselib "mjcore.dll"
#cfunc getRuleSize "?getRuleSize@RuleData@@SAHH@Z" int
#cfunc getRule "?getRule@@YAHH@Z" int
#cfunc reqFailed "?reqFailed@RuleData@@SAHHQBH@Z" int, var
#func getPageCaption "?getPageCaption@RuleData@@SAXQADHH@Z" var, int, int

#deffunc setconffile str argFileName
	configFile = argFileName
	info "設定ファイルは "+configFile+" です。"
	return

#deffunc chatshowrule var RuleList
	repeat NUM_OF_RULES
		if ((RuleName(cnt) != "")&&(RuleTxt(0, cnt) != "Ｎ／Ａ")) {
			RuleList += strf("%s: %s%s", RuleName(cnt), RuleTxt(getRule(cnt), cnt), "\n")
		}
	loop
return

#deffunc saveRule
	tmpDigit = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	sdim tmpRuleTxt, RULE_IN_LINE+4, RULE_STRING_LINES
	repeat length(Rule)-1
		if ((RuleTxt(0, cnt) == "")||(RuleTxt(0, cnt) == "Ｎ／Ａ")) {
			tmpRuleTxt(cnt/RULE_IN_LINE) += "-"
		} else {
			tmpRuleTxt(cnt/RULE_IN_LINE) += (strmid(tmpDigit, Rule(cnt), 1))
		}
	loop
	storeRule tmpRuleTxt
	saveConfigFile configFile
	return

#deffunc selcat_
#define NUM_OF_RULE_SETTINGS RULES_IN_PAGE*RULE_PAGES
#define NUM_OF_RULE_STATS 17

	dim Rule, NUM_OF_RULE_SETTINGS
	repeat NUM_OF_RULE_SETTINGS: Rule(cnt) = getRule(cnt): loop

	dsplay@ SND_BUTTON
	configPage = 1
	gosub *confbuttons
	repeat
		switch configPage
			case 0: break: swbreak
			case RULE_PAGES+1: configPage = RULE_PAGES /* FALLTHRU */
			default: gosub *selcatpage
		swend
	loop
	RebootFlag = 0
	saveRule
	return

*rulereset
	dsplay@ SND_BUTTON
	repeat length(Rule): rule(cnt) = 0: loop
	gsel 0
	gosub *config_redraw
	return
*rulewrite
	dsplay@ SND_BUTTON
	gosub *titlemenu@
	confselFinished = 1
	configPage = 0
	bgmplay MUS_TITLE
	return
*rulenext
	dsplay@ SND_BUTTON
	confselFinished = 1
	configPage++
	return
*ruleback
	dsplay@ SND_BUTTON
	confselFinished = 1
	if(configPage > 1) {configPage--}
	return

*confbuttons
	gsel 0
	vanish@: font fontname, 16, 0
	objsize 40, 20
	repeat RULES_IN_PAGE
		pos 50+400*(cnt/(RULES_IN_PAGE/2)), (cnt\(RULES_IN_PAGE/2))*25+75: colorbutton gosub ">>", *ruleselbtn, -1, 0xffffff
		if (cnt == 0) {ConfBtnBegin = stat}
	loop
	objsize 70, 20
	pos 650, 575: colorbutton gosub "Back", *ruleback, -1, 0xffffff: tooltip@ RULES_IN_PAGE, "前のページに移動します"
	pos 730, 575: colorbutton gosub "Next", *rulenext, -1, 0xffffff: tooltip@ RULES_IN_PAGE+1, "次のページに移動します"
	pos 650, 600: colorbutton gosub "Reset", *rulereset, -1, 0xffffff: tooltip@ RULES_IN_PAGE+2, "出荷時設定に戻します"
	pos 730, 600: colorbutton gosub "Finish", *rulewrite, -1, 0xffffff: tooltip@ RULES_IN_PAGE+3, "設定を保存し、タイトルに戻ります"
	return

*selcatpage
	gsel 0
	font fontname, 16, 0
	repeat RULES_IN_PAGE
		if (RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE) == "Ｎ／Ａ") {
			tooltip@ (cnt+ConfBtnBegin-STATBOX), RuleDescription(cnt+(configPage-1)*RULES_IN_PAGE)
		} else: if (RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE) != "") {
			tooltip@ (cnt+ConfBtnBegin-STATBOX), strf("%s（初期設定：%s）", RuleDescription(cnt+(configPage-1)*RULES_IN_PAGE), RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE))
		} else {
			tooltip@ (cnt+ConfBtnBegin-STATBOX), ""
		}
	loop
	confselFinished = 0
	gosub *config_redraw
	repeat
		redraw 1: await 0
		if (confselFinished) {break}
	loop
	await 0
return

*config_redraw
	redraw 0
	showbackground
	font fontname, 48, 0
	borderedtxt2 "環 境 設 定", 152, 12, 255, 255, 255, 1, 48, 192, 192, 192
	font fontname, 24, 0
	borderedtxt2 "Rule configuration.", 500, 18, 255, 255, 255, 1, 24, 192, 192, 192
	sdim PageCaption, 64: getPageCaption PageCaption, 64, configPage-1
	borderedtxt2 strf("%2d/%2d頁 %s", configPage, RULE_PAGES, PageCaption), 500, 48, 255, 255, 255, 1, 18, 192, 192, 192
	font fontname, 20, 0
	repeat
		gosub *loadcache
		repeat RULES_IN_PAGE
			tmpcol = 255, 255, 255, 192, 192, 192
			gosub *config_showruletext
			if (RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE) == "Ｎ／Ａ") {gosub *config_strikeout}
			else: if (reqFailed(cnt+(configPage-1)*RULES_IN_PAGE, Rule)) {gosub *config_strikeout}
			if (cnt == 19) {borderedtxt2 "通信対戦時のルール設定はホスト側の設定が適用されます", 100, 590, 255, 255, 255, 1, 20, 192, 192, 192}
		loop
		if ((TxtCached & (1<<(configPage - 1))) == 0) {
			gosub *savecache
		} else {
			break
		}
	loop
	redraw 1
	return

*loadcache
#ifdef SCR_CONF_ITEM_CACHE@
	if (TxtCached == 0) {buffer SCR_CONF_ITEM_CACHE, 82*2*(RULE_PAGES+1), 25 * (RULES_IN_PAGE/2): gsel 0}
	if ((TxtCached & (1<<(configPage - 1))) != 0) {
		gmode gmode_mem
		pos 99, 72
		gcopy SCR_CONF_ITEM_CACHE, 164*configPage, 0, 82, 25 * (RULES_IN_PAGE/2)
		pos 499, 72
		gcopy SCR_CONF_ITEM_CACHE, 164*configPage+82, 0, 82, 25 * (RULES_IN_PAGE/2)
	}
#endif
	return

*savecache
#ifdef SCR_CONF_ITEM_CACHE@
	if ((TxtCached & (1<<(configPage - 1))) == 0) {
		gsel SCR_CONF_ITEM_CACHE: gmode gmode_mem
		pos 164*configPage, 0
		gcopy 0,  99, 72, 82, 25 * (RULES_IN_PAGE/2)
		pos 164*configPage+82, 0
		gcopy 0, 499, 72, 82, 25 * (RULES_IN_PAGE/2)
		gsel 0
		TxtCached |= 1<<(configPage - 1)
	}
#endif
	return

*config_showruletext
#ifdef SCR_CONF_ITEM_CACHE@
	if (((TxtCached & (1<<(configPage - 1))) == 0)||(ForceDraw == 1)) {
#endif
		BorderTextX = 100+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
		tmptxt = RuleName(cnt+(configPage-1)*RULES_IN_PAGE)
		if (strlen(tmptxt) > 8) {
			borderedtxt3 tmptxt, BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5), , 8.0/double(strlen(tmptxt))
		} else {
			repeat strlen(tmptxt)/2
				borderedtxt2 strmid(tmptxt, cnt*2, 2), BorderTextX+(60/(strlen(tmptxt)/2-1))*cnt, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5)
			loop
		}
#ifdef SCR_CONF_ITEM_CACHE@
	}
#endif
	BorderTextX = 180+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
	borderedtxt2 ":", BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5)
	BorderTextX = 190+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
	tmptxt = RuleTxt(Rule(cnt+(configPage-1)*RULES_IN_PAGE), cnt+(configPage-1)*RULES_IN_PAGE)
	if (strlen(tmptxt) > 20) {
		borderedtxt3 tmptxt, BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5), , 20.0/double(strlen(tmptxt))
	} else {
		borderedtxt2 tmptxt, BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5)
	}
	return

*config_strikeout
#ifdef SCR_CONF_ITEM_CACHE@
	if ((TxtCached & (1<<(configPage - 1))) != 0) {
#endif
		tmpcol = 192, 192, 192, 128, 128, 128
#ifdef SCR_CONF_ITEM_CACHE@
		ForceDraw = 1
#endif
		gosub *config_showruletext
#ifdef SCR_CONF_ITEM_CACHE@
		ForceDraw = 0
#endif
		BorderTextX = 100+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
		borderedtxt2 "―――――――――――――――", BorderTextX, BorderTextY, 255, 255, 255, 1, 20, 192, 192, 192
#ifdef SCR_CONF_ITEM_CACHE@
	}
#endif
	return

*ruleselbtn
	tmpBtnCode=stat
	dsplay@ SND_CLICK
	getkey KeyFlag, 16
	if (KeyFlag) {
		repeat 1
			tmpRuleNum = (configPage-1)*RULES_IN_PAGE+tmpBtnCode-1
			Rule(tmpRuleNum)--
			if (RuleTxt(0, tmpRuleNum) == "") {Rule(tmpRuleNum) = 0: break}
			if (Rule(tmpRuleNum) < 0) {Rule(tmpRuleNum) = getRuleSize(tmpRuleNum)-1}
			if (RuleTxt(Rule(tmpRuleNum), tmpRuleNum) == ">>>") {continue 0}
			if (RuleTxt(Rule(tmpRuleNum), tmpRuleNum) == "") {continue 0}
		loop
	} else {
		repeat 1
			tmpRuleNum = (configPage-1)*RULES_IN_PAGE+tmpBtnCode-1
			Rule(tmpRuleNum)++
			if (Rule(tmpRuleNum) >= getRuleSize(tmpRuleNum)) {Rule(tmpRuleNum) == 0}
			if (RuleTxt(Rule(tmpRuleNum), tmpRuleNum) == ">>>") {continue 0}
		loop
	}
	gosub *config_redraw
	return
#global
