#!/usr/bin/env ruby
# -*- coding: UTF-8 -*-

require "lzma"; require "digest/sha2"; require "pathname"

if ARGV.size < 1 then
	$stderr.print("Usage: #{$0} src-file\n")
	exit(1)
end

srcfile = Pathname.new(ARGV[0])
targetfile = Pathname.new((srcfile.to_s) + ".lzma")
symbolname = srcfile.basename.to_s.upcase.gsub(/\W/, '_')
headerfile = Pathname.new((srcfile.to_s) + ".h")
cppfile = Pathname.new((srcfile.to_s) + ".cpp")

compressed = nil
digest = nil
File.open(srcfile, "rb") {|source|
	digest = Digest::SHA256.hexdigest(source.read())
	compressed = LZMA.compress(source.read())
}
File.open(targetfile, "wb") {|target|
	target.print(compressed)
}
File.open(headerfile, "wt") {|target|
	target.print(<<"FINIS")
// This file was automatically generated by #{(Pathname.new($0)).basename.to_s}. Do not edit.

#ifndef DATA_#{symbolname}_H
#define DATA_#{symbolname}_H

#include "../decomp.h"

namespace Compressed {

class file_#{symbolname.downcase} : public Data {
private:
	static LPCTSTR Description;
	static const int FileID = FILEID_#{symbolname};
	static const uint8_t expectedDigest[32];
};

}

#endif
FINIS
}
File.open(cppfile, "wt") {|target|
	hexarray = ""
	digest.to_s.unpack("a2"* (digest.to_s.length / 2)).each do |i|
		hexarray += "0x%2s, " % [i]
	end
	hexarray_arranged = []
	hexarray.to_s.unpack("a47x"* (hexarray.to_s.length / 48)).each do |i|
		hexarray_arranged += ["\t%s" % [i]]
	end
	target.print(<<"FINIS")
// This file was automatically generated by #{(Pathname.new($0)).basename.to_s}. Do not edit.

#include "#{headerfile.basename.to_s}"

namespace Compressed {

LPCTSTR file_#{symbolname.downcase}::Description = FILEDESC_#{symbolname};
const uint8_t file_#{symbolname.downcase}::expectedDigest[32] = {
#{hexarray_arranged.join("\n")}
};

}
FINIS
}
