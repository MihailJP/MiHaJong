/*=============================
 * HSP麻雀クライアントMiHaJong
 *  [コンフィグ画面ルーチン]
 *=============================
 */

/* ルール設定 */
#module
#include "const.as"

#deffunc storeRule array RuleTxt
/*
		storeRule p1
		ルール設定文字列を代入する

		p1 : 設定が格納された文字列型配列

		モジュール内に保持されているルール設定の項目を置き換えます。
*/
	sdim RuleConf, RULE_IN_LINE+4, length(RuleTxt)
	repeat length(RuleConf)
		RuleConf(cnt) = RuleTxt(cnt)
	loop
	info "設定がロードされました。"
	return

#deffunc exportRule array RuleTxt
/*
		exportRule p1
		ルール設定文字列を取得する

		p1 : 結果を格納する配列

		モジュール内に保持されているルール設定の項目を取得します。
*/
	sdim RuleTxt, RULE_IN_LINE+4, length(RuleConf)
	repeat length(RuleTxt)
		RuleTxt(cnt) = RuleConf(cnt)
	loop
	return

#defcfunc getRule int RuleID
/*
		val = getRule(p1)
		ルール設定を取得する

		p1 : 項目番号

		ルール設定の指定した番号の項目を取得します。
		整数型で返されます。
*/
	RuleDigit = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	ans = instr(RuleDigit, , strmid(RuleConf(RuleID/RULE_IN_LINE), RuleID\RULE_IN_LINE, 1))
	if (ans < 0) {ans = 0}
	return ans
#global

/* 設定画面 */
*selcat
	selcat_
return

#module config
#include "const.as"

#deffunc setconffile str argFileName
	configFile = argFileName
	info "設定ファイルは "+configFile+" です。"
	return

/* 設定のテキスト */
#include "conftxt.hsp"

#include "ruletxt.hsp"

#deffunc saveRule
	tmpDigit = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	sdim tmpRuleTxt, RULE_IN_LINE+4, RULE_STRING_LINES
	repeat length(Rule)-1
		if ((RuleTxt(0, cnt+1) == "")||(RuleTxt(0, cnt+1) == "Ｎ／Ａ")) {
			tmpRuleTxt(cnt/RULE_IN_LINE) += "-"
		} else {
			tmpRuleTxt(cnt/RULE_IN_LINE) += (strmid(tmpDigit, Rule(cnt+1), 1))
		}
	loop
	storeRule tmpRuleTxt
	RawConfDat = ""
	notesel RawConfDat
	repeat RULE_STRING_LINES
		noteadd tmpRuleTxt(cnt)
	loop
	notesave configFile
	noteunsel
	return

#deffunc selcat_
	sdim PageCaption, 32, RULE_PAGES
	PageCaption = "基本のルール設定", "ドラとインフレルール設定", "基本の役設定", "順子役の設定①", "順子役の設定②", "刻子役の設定①", "刻子役の設定②", "槓子役・七対子系の役設定", "全体手役の設定", "状況役の設定", "その他の役設定"
	dsplay@ SND_BUTTON
	configtxt
	configPage = 1
	repeat
		switch configPage
			case 0: break: swbreak
			case RULE_PAGES+1: configPage = RULE_PAGES /* FALLTHRU */
			default: gosub *selcatpage
		swend
	loop
	RebootFlag = 0
	saveRule
	return

*rulereset
	dsplay@ SND_BUTTON
	repeat length(Rule): rule(cnt) = 0: loop
	gsel 0
	gosub *config_redraw
	return
*rulewrite
	dsplay@ SND_BUTTON
	gosub *titlemenu@
	confselFinished = 1
	configPage = 0
	bgmcode = MUS_TITLE: gosub *bgmplay@
	return
*rulenext
	dsplay@ SND_BUTTON
	confselFinished = 1
	configPage++
	return
*ruleback
	dsplay@ SND_BUTTON
	confselFinished = 1
	if(configPage > 1) {configPage--}
	return

*selcatpage
	gsel 0
	vanish@: font fontname, 16, 0
	objsize 40, 20
	repeat RULES_IN_PAGE
		pos 50+400*(cnt/(RULES_IN_PAGE/2)), (cnt\(RULES_IN_PAGE/2))*25+75: button gosub ">>", *ruleselbtn
		if (RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE+1) == "Ｎ／Ａ") {
			tooltip@ cnt, RuleDescription(cnt+(configPage-1)*RULES_IN_PAGE+1)
		} else {
			tooltip@ cnt, strf("%s（初期設定：%s）", RuleDescription(cnt+(configPage-1)*RULES_IN_PAGE+1), RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE+1))
		}
	loop
	objsize 70, 20
	pos 650, 575: button gosub "Back", *ruleback: tooltip@ RULES_IN_PAGE, "前のページに移動します"
	pos 730, 575: button gosub "Next", *rulenext: tooltip@ RULES_IN_PAGE+1, "次のページに移動します"
	pos 650, 600: button gosub "Reset", *rulereset: tooltip@ RULES_IN_PAGE+2, "出荷時設定に戻します"
	pos 730, 600: button gosub "Finish", *rulewrite: tooltip@ RULES_IN_PAGE+3, "設定を保存し、タイトルに戻ります"
	confselFinished = 0
	gosub *config_redraw
	repeat
		redraw 1: await 0
		if (confselFinished) {break}
	loop
	await 0
return

*config_redraw
	redraw 0
	showbackground
	font fontname, 48, 0
	borderedtxt2 "環 境 設 定", 152, 12, 255, 255, 255, 1, 48, 192, 192, 192
	font fontname, 24, 0
	borderedtxt2 "Rule configuration.", 500, 18, 255, 255, 255, 1, 24, 192, 192, 192
	borderedtxt2 strf("%2d/%2d頁 %s", configPage, RULE_PAGES, PageCaption(configPage-1)), 500, 48, 255, 255, 255, 1, 18, 192, 192, 192
	font fontname, 20, 0
	repeat RULES_IN_PAGE
		tmpcol = 255, 255, 255, 192, 192, 192
		gosub *config_showruletext
		if (RuleTxt(0, cnt+(configPage-1)*RULES_IN_PAGE+1) == "Ｎ／Ａ") {gosub *config_strikeout}
		switch (cnt+(configPage-1)*RULES_IN_PAGE)
			case RULE_LIMITHAND_BONUS:
				if (Rule(RULE_CHIP+1) == 0) {gosub *config_strikeout}
				swbreak
#ifdef ALLSANMA
			case RULE_SIMULTANEOUS_MAHJONG:
				if (Rule(RULE_MULTIPLE_MAHJONG+1) != 2) {gosub *config_strikeout}
				swbreak
			case RULE_TRIPLE_MAHJONG:
				if (Rule(RULE_MULTIPLE_MAHJONG+1) != 5) {gosub *config_strikeout}
				swbreak
#else
			case RULE_SIMULTANEOUS_MAHJONG:
				if (Rule(RULE_MULTIPLE_MAHJONG+1) < 2) {gosub *config_strikeout}
				swbreak
			case RULE_TRIPLE_MAHJONG:
				if ((Rule(RULE_MULTIPLE_MAHJONG+1) != 0)&&(Rule(RULE_MULTIPLE_MAHJONG+1) != 2)) {gosub *config_strikeout}
				swbreak
#endif
			case RULE_ROUND_TO_MANGAN:
			case RULE_SANBAIMAN_BORDER:
			case RULE_KAZOE_BORDER:
				if (Rule(RULE_LIMITLESS+1) > 0) {gosub *config_strikeout}
				swbreak
#ifndef SANMAX
			case RULE_TANRON:
				if (Rule(RULE_HUALONG+1) == 0) {gosub *config_strikeout}
				swbreak
#endif
			case RULE_ANKAN_CHANKAN:
				if (Rule(RULE_ANKAN_CONCEAL+1) == 1) {gosub *config_strikeout}
				swbreak
#ifndef ALLSANMA
			case RULE_OWN_FLOWER:
				if (Rule(RULE_FLOWER_TILES+1) == 0) {gosub *config_strikeout}
				swbreak
			case RULE_GINKEI_HOUSHUN:
			case RULE_FOUR_SEASONS:
				if ((Rule(RULE_FLOWER_TILES+1) == 0)||(Rule(RULE_FLOWER_TILES+1) == 2)) {gosub *config_strikeout}
				swbreak
			case RULE_FOUR_FLOWERS:
				if ((Rule(RULE_FLOWER_TILES+1) == 0)||(Rule(RULE_FLOWER_TILES+1) == 1)) {gosub *config_strikeout}
				swbreak
			case RULE_BAXIAN_JUSHOU:
			case RULE_EIGHT_FLOWERS:
				if (Rule(RULE_FLOWER_TILES+1) != 3) {gosub *config_strikeout}
				swbreak
#endif
			case RULE_REDTILE_CHIP:
				if (Rule(RULE_CHIP+1) == 0) {gosub *config_strikeout}
				else: if ((Rule(RULE_RED_ONE+1) == 0)&&(Rule(RULE_RED_TWO+1) == 0)&&(Rule(RULE_RED_THREE+1) == 0)&&(Rule(RULE_RED_FOUR+1) == 0)&&(Rule(RULE_RED_FIVE+1) == 2)&&(Rule(RULE_RED_SIX+1) == 0)&&(Rule(RULE_RED_SEVEN+1) == 0)&&(Rule(RULE_RED_EIGHT+1) == 0)&&(Rule(RULE_RED_NINE+1) == 0)&&(Rule(RULE_RED_WEST+1) == 0)&&(Rule(RULE_RED_NORTH+1) == 0)) {
					gosub *config_strikeout
				}
				swbreak
			case RULE_BLUE_CHIP:
				if (Rule(RULE_CHIP+1) == 0) {gosub *config_strikeout}
				/* FALLTHRU */
			case RULE_BLUE_TILES:
				if ((Rule(RULE_BLUE_ONE+1) == 0)&&(Rule(RULE_BLUE_FIVE+1) == 0)&&(Rule(RULE_BLUE_NINE+1) == 0)&&(Rule(RULE_BLUE_LVFA+1) == 0)) {
					gosub *config_strikeout
				}
				swbreak
			case RULE_BUTTOBI_BORDER:
			case RULE_RIICHI_REQUISITE:
				if (Rule(RULE_PENALTY_NEGATIVE+1) == 6) {gosub *config_strikeout}
				swbreak
			case RULE_TAOYISE:
				if (Rule(RULE_RED_FIVE+1) == 2) {gosub *config_strikeout}
				swbreak
		swend
		if (cnt == 19) {borderedtxt2 "通信対戦時のルール設定はホスト側の設定が適用されます", 100, 590, 255, 255, 255, 1, 20, 192, 192, 192}
	loop
	redraw 1
	return

*config_showruletext
	BorderTextX = 100+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
	tmptxt = RuleName(cnt+(configPage-1)*RULES_IN_PAGE+1)
	if (strlen(tmptxt) > 8) {
		borderedtxt3 tmptxt, BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5), , 8.0/double(strlen(tmptxt))
	} else {
		repeat strlen(tmptxt)/2
			borderedtxt2 strmid(tmptxt, cnt*2, 2), BorderTextX+(60/(strlen(tmptxt)/2-1))*cnt, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5)
		loop
	}
	BorderTextX = 180+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
	borderedtxt2 ":", BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5)
	BorderTextX = 190+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
	tmptxt = RuleTxt(Rule(cnt+(configPage-1)*RULES_IN_PAGE+1), cnt+(configPage-1)*RULES_IN_PAGE+1)
	if (strlen(tmptxt) > 20) {
		borderedtxt3 tmptxt, BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5), , 20.0/double(strlen(tmptxt))
	} else {
		borderedtxt2 tmptxt, BorderTextX, BorderTextY, tmpcol(0), tmpcol(1), tmpcol(2), 1, 20, tmpcol(3), tmpcol(4), tmpcol(5)
	}
	return

*config_strikeout
	tmpcol = 192, 192, 192, 128, 128, 128
	gosub *config_showruletext
	BorderTextX = 100+400*(cnt/(RULES_IN_PAGE/2)): BorderTextY = 75+25*(cnt\(RULES_IN_PAGE/2))
	borderedtxt2 "―――――――――――――――", BorderTextX, BorderTextY, 255, 255, 255, 1, 20, 192, 192, 192
	return

*ruleselbtn
	tmpBtnCode=stat
	repeat 1
		tmpRuleNum = (configPage-1)*RULES_IN_PAGE+tmpBtnCode
		dsplay@ SND_CLICK
		Rule(tmpRuleNum)++
		if (RuleTxt(Rule(tmpRuleNum), tmpRuleNum) == ">>>") {continue 0}
		if (RuleTxt(Rule(tmpRuleNum), tmpRuleNum) == "") {Rule(tmpRuleNum) == 0}
	loop
	gosub *config_redraw
	return
#global
