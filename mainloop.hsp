/*=============================
 * HSP麻雀クライアントMiHaJong
 *      [メインルーチン]
 *=============================
 */

/* ゲーム開始処理 */
*startgame
	/* 変数類の初期化 */
	TableEnvInit GameEnv
	if (vartype(GameStat) == vartype("struct")) {
		if (varuse(GameStat)) {
			delmod GameStat
		}
	}
	newmod GameStat, gameStruct
	vanish
	info "ゲーム情報を初期化しました。"
	serverreceive_init
	bgmplay MUS_TITLE	// タイトル曲を流す
	gosub *selmode	// タイトル画面
	gosub *chrshuffle	// 親決めの処理
	gosub *gameinit	// 半荘の初期化処理
	font fontname, 18, 1

	/* 半荘の進行 */
	repeat
		info strf("局番号 [%d] を開始しました。", getRound(GameStat))
		if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
			sockput "8\n", SOCK_CHAT+0 // チャットを同期
		}
		/* ウォッチモードの時は視点を親に移す */
		setCurrentPlayer GameStat, CURRENTPLAYER_ACTIVE, -1
		if (GetWatchModeFlag(GameEnv) == 1) {
			setPlayer GameStat, getRound(GameStat)\NUM_OF_PLAYERS
		}
		/* 破回八連荘の後始末 */
		if (getAgariChain(GameStat) == -1) {setAgariChain GameStat, 1}
		/* 半荘の初期化と配牌を行なう */
		gosub *tableinit
		/* デバッグ用のコード(バグ検証のときを除いてコメントアウトしておくこと！) */
//		tmpTiles = 04,05,06,08,08,12,13,14,14,15,16,26,28
//		tmpTiles = 03,04,05,06,07,08,15,16,24,24,25,26,27
//		repeat 13: setHand GameStat, 0, cnt, (getPlayer(GameStat)+3)\4, tmpTiles(cnt): loop
//		tmpTiles = 04,04,06,07,08,16,17,18,26,26,27,28,28
//		repeat 13: setHand GameStat, 0, cnt, (getPlayer(GameStat)+1)\4, tmpTiles(cnt): loop
//		setHand GameStat, 0, 0, (getPlayer(GameStat))\4, 27
//		tmpTiles = 12,12,12,13,14,15,16,17,17,17,36,36,36
//		tmpTiles = 31,31,31,32,32,32,33,33,33,34,34,34,35
//		repeat 13: setHand GameStat, 0, cnt, (getPlayer(GameStat))\4, tmpTiles(cnt): loop
//		tmpTiles =  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
//		repeat 13: setHand GameStat, 1, cnt, (getPlayer(GameStat))\4, tmpTiles(cnt): loop
//		tmpTiles = 11,12,13,24,25,26,27,35,35,35,36,36,36
//		repeat 13: setHand GameStat, 0, cnt, (getPlayer(GameStat)+1)\4, tmpTiles(cnt): loop
//		tmpTiles = 01,02,03,04,05,06,07,00,00,00,00,00,00
//		repeat 13: setHand GameStat, 0, cnt, (getPlayer(GameStat))\4, tmpTiles(cnt): loop
//		tmpFuuro = 2,05024,07027,00000,00000
//		repeat 5: setMeld GameStat, 0, cnt, (getPlayer(GameStat))\4, tmpFuuro(cnt): loop
//		tmpTiles = 01,09,11,19,21,29,31,32,33,34,35,36,37
//		repeat 13: setHand GameStat, 0, cnt, (getPlayer(GameStat))\4, tmpTiles(cnt): loop
		/* 配牌終了時の処理 */
		repeat NUM_OF_PLAYERS: setHandStat GameStat, cnt, 0:lipai GameStat, cnt: loop
		setCurrentPlayer GameStat, CURRENTPLAYER_ACTIVE, getRound(GameStat)\NUM_OF_PLAYERS // 最初に親から捨牌を行なう
		info "配牌を完了しました。"
		setTurn GameStat, 1 // 配牌が終わったら1巡目
		/* 摸打ループ */
		repeat
			info strf("プレイヤー [%d] のツモ番です。", getCurrentPlayer(GameStat, CURRENTPLAYER_ACTIVE))
			/* 変数の初期化 */
			calcdoukasen GameStat // 導火線の位置を更新
			if (getKangFlag(GameStat, KANG_FLAG) == 0) { setKangFlag GameStat, KANG_CHAINFLAG, 0: setKangFlag GameStat, KANG_TOPFLAG, 0 /* 連続槓の回数と頭槓和フラグをリセット */ }
			setCurrentDiscard GameStat, CURRENTDISCARD_TILECODE, 0
			/* ウォッチモードの時は視点をツモ番の人に移す */
			if (GetWatchModeFlag(GameEnv) == 1) {
				setPlayer GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_ACTIVE)
			}
			/* 再描画 */
			redrscreen
			/* 摸打の処理 */
			getdahai GameStat, GameEnv
			DiscardTileIndex = stat
			if (DiscardTileIndex == DAHAI_TYPE_DISCONNECT) {break}
			/* ウェイトを入れる */
			await 0
			procdahai GameStat, GameEnv, DiscardTileIndex
			if (stat >= 0) {RoundEndType = stat: break}
			if (stat == -2) {continue getCurrentPlayer(GameStat, CURRENTPLAYER_ACTIVE)}
			await 80
			/* 栄和の処理 */
			ronhuproc GameStat, GameEnv // 栄和の処理
			if (stat >= 0) {RoundEndType = stat: break}
			await 0
			if ((RoundEndType = ENDKYOKU_TRIPLERON)||(RoundEndType = ENDKYOKU_DISCONNECT)) {break}
			if (RonPlayers(GameStat) > 0) {break}
			/* 途中流局の判定 */
			checkroundabort GameStat, GameEnv
			if (stat >= 0) {RoundEndType = stat: break}
			/* 捨牌をポン、または大明槓する場合の処理 */
			executeFuuro GameStat, DiscardTileIndex
			/* 鳴きがあった場合、鳴いたプレーヤーに順番を移して戻る */
			if (stat) {continue}
			/* ウェイトを入れる */
			await 100
			/* 次のプレイヤーが牌を自摸る */
			tsumoproc GameStat
			// 打牌へ戻る
		loop
		OrigHonba = getHonba(GameStat): OrigTurn = getRound(GameStat)
		endround GameStat, GameEnv, RoundEndType, OrigTurn, OrigHonba
		await 5000
		// 半荘終了判定
		nextRound GameStat
		if (stat) {break}
	loop
	// 半荘終了時
	endgame GameStat, GameEnv, origTurn, origHonba
	buttonPressed = 0
	repeat
		redrscreen
		await 1000
		if (buttonPressed) {break}
	loop
	goto *startgame
