/*=============================
 * HSP麻雀クライアントMiHaJong
 *      [初期化ルーチン]
 *=============================
 */

/* タイトルバーに表示する文字列 */
	title "MiHaJong Ver. "+VERSION_MAJ+"."+VERSION_MED+"."+VERSION_MIN+VERSION_MIC

/* コンフィグファイルのパスを設定する(Vista/7用) */
	/* Vista以降、Program Files以下にファイルを作れないので自分で調整する */
#ifdef SANMAS
	configFile = confPath()+"mihassnm.ini"
#else
	#ifdef SANMA4
		configFile = confPath()+"mihaysnm.ini"
	#else
		#ifdef SANMA
		configFile = confPath()+"mihasanm.ini"
		#else
		configFile = confPath()+"mihajong.ini"
		#endif
	#endif
#endif

/* ログ初期化 */
	loginit
	info "MiHaJong Ver. "+VERSION_MAJ+"."+VERSION_MED+"."+VERSION_MIN+VERSION_MIC
	info "ビルド日時は "+__date__+" "+__time__+" です。"

/* 解像度をチェックする */
	info "画面の解像度は "+ginfo_dispx+" x "+ginfo_dispy+" です。"
	if ((ginfo_dispx < 1024)||(ginfo_dispy < 768)) {
		errordlg "画面解像度が足りません\nXGA(1024x768)以上で起動してください", "画面が小さすぎます"
		error "解像度要件を満たしていません。終了します。"
		end 1
	}

/* 画面を初期化 */
	screen SCR_CHAT, 160, 630, 14, ((ginfo_dispx-840)/2)+840-76, (ginfo_dispy-630)/2-20
	info "チャット用のウィンドウを仮初期化しました。"
	gsel 0, -1: await 0

/* スプラッシュスクリーン */
	buffer SCR_SPLASH_BUF: pngload "img\\splash.png"
	bgscr SCR_SPLASH_WINDOW, 320, 240, , (ginfo_dispx-320)/2, (ginfo_dispy-240)/2
	gsel SCR_SPLASH_WINDOW, 2
	menubgcolor
	boxf 0, 0, 319, 239
	gmode 7: pos 0, 0: gcopy SCR_SPLASH_BUF, 0, 0, 320, 240
	color 0, 0, 0: line 319, 0, 0, 0: line 319, 239: line 0, 239: line 0, 0
	tmptxt = "Version "+VERSION_MAJ+"."+VERSION_MED+"."+VERSION_MIN+VERSION_MIC
	borderedtxt2 tmptxt, 160-(strlen(tmptxt)*4), 130, 255, 255, 255, 0, 16, 192, 192, 192
	tmptxt = "Copyright (c) 2008-2013 MihailJP"
	borderedtxt2 tmptxt, 160-(strlen(tmptxt)*4), 160, 255, 255, 255, 0, 16, 192, 192, 192
	tmptxt = "Part of rights reserved"
	borderedtxt2 tmptxt, 160-(strlen(tmptxt)*4), 180, 255, 255, 255, 0, 16, 192, 192, 192
	gsel 0, 0: await 0

/* 卓の環境を初期化 */
	TableEnvInitAll: GameEnv = 0
	setGameType GAMETYPE

/* 設定ファイル読み込み */
	setconffile configFile
	exist configFile // 設定ファイルがあるかどうか調べる
	EnvConf =  "00000000"
	configinit
	if (strsize == -1) {
		info "設定ファイルが見つかりません。デフォルトの設定を使用します。"
		saveConfigFile configFile // デフォルトのコンフィグデータを作成
	} else {
		info "設定ファイルが見つかりました。読み込みを開始します。"
		loadConfigFile configFile // 設定ファイル読み込み
	}

/* 音源を初期化 */
	snd_init: if (stat == 0) {info "サウンドDLLを初期化しました。"} else {error "サウンドDLLの初期化に失敗しました。"}

/* 終了時に音源をクリンナップするための処理 */
	onexit *cleanup
#ifndef _debug
	onerror goto *errorproc
#endif

/* 面子構成データベースの読み込み */
/* 向聴数の計算に使用：構築には１ヶ月必要 */
	shantenInit

/* 擬似乱数を初期化 */
	randomize
	info "疑似乱数を初期化しました。"

/* grotate命令で使う円周率の値 */
	#define PI M_PI

/* 牌やサイコロの画像を読み込む */
	gmode gmode_mem
	buffer SCR_TILE_PIC: picload "img\\tileset.gif": info "牌の画像を読み込みました。"
	buffer SCR_TILE_BLOCK, TILE_BLOCK_SCREEN_WIDTH, TILE_BLOCK_SCREEN_HEIGHT
	gcopy SCR_TILE_PIC, TILE_BLOCK_SCREEN_X, TILE_BLOCK_SCREEN_Y, TILE_BLOCK_SCREEN_WIDTH, TILE_BLOCK_SCREEN_HEIGHT
	buffer SCR_TILE_SHADE, TILE_BLOCK_SCREEN_WIDTH, TILE_BLOCK_SCREEN_HEIGHT
	gcopy SCR_TILE_PIC, TILE_BLOCK_SCREEN_X+TILE_BLOCK_SCREEN_WIDTH, TILE_BLOCK_SCREEN_Y, TILE_BLOCK_SCREEN_WIDTH, TILE_BLOCK_SCREEN_HEIGHT
	buffer SCR_DICE_PIC, TILE_DICE_SCREEN_WIDTH, TILE_DICE_SCREEN_HEIGHT
	gcopy SCR_TILE_PIC, TILE_BLOCK_SCREEN_X+TILE_BLOCK_SCREEN_WIDTH*2+TILE_DICE_SCREEN_WIDTH, TILE_BLOCK_SCREEN_Y, TILE_DICE_SCREEN_WIDTH, TILE_DICE_SCREEN_HEIGHT
	buffer SCR_DICE_SHADE, TILE_DICE_SCREEN_WIDTH, TILE_DICE_SCREEN_HEIGHT
	gcopy SCR_TILE_PIC, TILE_BLOCK_SCREEN_X+TILE_BLOCK_SCREEN_WIDTH*2, TILE_BLOCK_SCREEN_Y, TILE_DICE_SCREEN_WIDTH, TILE_DICE_SCREEN_HEIGHT
	info "牌の画像の処理が完了しました。"

/* タイトルロゴや画像の読み込み */
	buffer SCR_MAIN_LOGO: pngload "img\\logo.png": info "闘牌時の右上ロゴを読み込みました。"
	buffer SCR_MAIN_BACKGROUND: pngload "img\\mainbg.png": info "闘牌時の背景画像を読み込みました。"
	buffer SCR_TITLE_BACKGROUND: pngload "img\\background.png": info "タイトルロゴを読み込みました。"
	buffer SCR_TITLE_LOGO: pngload "img\\title.png": info "タイトル画面の背景画像を読み込みました。"

/* ＢＧＭを読み込み */
/* (再生には DirectMusicを使用) */
	repeat BGM_ROUNDS
		bgmload cnt, strf("bgm%d", cnt+1), 1
	loop

/* ＢＧＭを読み込み（続き） */
	bgmload MUS_RICHI1, "richi1", 1 // 他家リーチ
	bgmload MUS_RICHI2, "richi2", 1 // 自家リーチ
	bgmload MUS_RICHI3, "richi3", 1 // 追っかけリーチ
	bgmload MUS_OPENRICHI, "opnrichi", 1 // オープン立直
	bgmload MUS_AGARI_SELF_1, "agari1", 0 // 満貫未満、自分の和了
	bgmload MUS_AGARI_SELF_2, "agari2", 0 // 満貫以上、自分の和了
	bgmload MUS_AGARI_SELF_3, "agari3", 0 // 役満、自分の和了
	bgmload MUS_AGARI_FURIKOMI_1, "agari4", 0 // 満貫未満、放銃または被自摸
	bgmload MUS_AGARI_FURIKOMI_2, "agari5", 0 // 満貫以上、放銃または被自摸
	bgmload MUS_AGARI_FURIKOMI_3, "agari6", 0 // 役満、放銃または被自摸
	bgmload MUS_AGARI_OTHER_1, "agari7", 0 // 満貫未満、他家の栄和
	bgmload MUS_AGARI_OTHER_2, "agari8", 0 // 満貫以上、他家の栄和
	bgmload MUS_AGARI_OTHER_3, "agari9", 0 // 役満、他家の栄和
	bgmload MUS_RYUUKYOKU, "pingju", 0 // 流局・錯和
	bgmload MUS_FINAL, "final", 1 // オーラス曲
	bgmload MUS_SHIBARI, "shibari", 1 // リャンシバ時の曲
	bgmload MUS_TITLE, "title", 1
	bgmload MUS_ENDING, "ending", 1
	bgmload MUS_ENDING2, "ending2", 1
	bgmload MUS_ENDING3, "ending3", 1

/* 効果音読み込み(DirectSound使用) */
	soundload SND_DAHAI1, "sound\\dahai1.wav", 0
	soundload SND_DAHAI2, "sound\\dahai2.wav", 0
	soundload SND_TSUMO, "sound\\tsumo.wav", 0
	soundload SND_SAIKORO, "sound\\saikoro.wav", 0
	soundload SND_BELL, "sound\\bell.wav", 0
	soundload SND_COUNTDOWN, "sound\\countdn.wav", 0
	soundload SND_CUOHU, "sound\\chonbo.wav", 0
	soundload SND_YAKULST1, "sound\\yakulst1.wav", 0
	soundload SND_YAKULST2, "sound\\yakulst2.wav", 0
	soundload SND_MEKURI, "sound\\mekuri.wav", 0
	soundload SND_BUTTON, "sound\\button.wav", 0
	soundload SND_CLICK, "sound\\click.wav", 0
	soundload SND_PAGE, "sound\\page.wav", 0
	soundload SND_TYPE, "sound\\type.wav", 0
	soundload SND_PINGJU, "sound\\pingju.wav", 0
	soundload SND_FLASH, "sound\\flash.wav", 0
	soundload SND_SIGNAL, "sound\\signal.wav", 0
	soundload SND_CLOCK, "sound\\clock.wav", 0

/* 鳴き仕掛け関係の効果音を読み込む */
	soundload VOX_CHI, "sound\\chi.wav", 0
	soundload VOX_PON, "sound\\pon.wav", 0
	soundload VOX_KAN, "sound\\kan.wav", 0
	soundload VOX_RICHI, "sound\\richi.wav", 0
	soundload VOX_TSUMO, "sound\\agari1.wav", 0
	soundload VOX_RON, "sound\\agari2.wav", 0
	soundload VOX_KYUUSHU, "sound\\kyuushu.wav", 0
	soundload VOX_FLOWER, "sound\\flower.wav", 0
	soundload VOX_SIKANG, "sound\\kyuushu.wav", 0
	soundload VOX_SIFENG, "sound\\kyuushu.wav", 0
	soundload VOX_SANJIAHU, "sound\\kyuushu.wav", 0
	soundload VOX_SIJIARICHI, "sound\\kyuushu.wav", 0
	soundload VOX_RON_FURIKOMI, "sound\\agari2.wav", 0

/* スプラッシュスクリーンをしまう */
	gsel SCR_SPLASH_WINDOW, -1
	screen 0, 840, 630, , (ginfo_dispx-840)/2, (ginfo_dispy-630)/2-20
	info "ウィンドウを初期化しました。"
	gsel 0, 1
