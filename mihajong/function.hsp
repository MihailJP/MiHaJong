/*=============================
 * HSP麻雀クライアントMiHaJong
 *    [雑多なサブルーチン]
 *=============================
 */

/* デバッグログ */
#module debuglog

#uselib "mjlib.dll"
#func _initlog_ "?initLogger@logger@@YAHXZ"
#func _trace_msg_ "?trace_msg@logger@@YAXPBD@Z" str
#func _debug_msg_ "?debug_msg@logger@@YAXPBD@Z" str
#func _info_msg_ "?info_msg@logger@@YAXPBD@Z" str
#func _warn_msg_ "?warn_msg@logger@@YAXPBD@Z" str
#func _error_msg_ "?error_msg@logger@@YAXPBD@Z" str
#func _fatal_msg_ "?fatal_msg@logger@@YAXPBD@Z" str

#include "const.hsp"
#deffunc loginit
#ifdef LOGGING
	_initlog_
#endif
return

#deffunc debug_logging str debugmsg, str debugfile, int debugline, int verbosity
#ifdef LOGGING
	switch (verbosity)
		case 5: _trace_msg_ strf("(%s:%d) %s", debugfile, debugline, debugmsg): swbreak
		case 4: _debug_msg_ strf("(%s:%d) %s", debugfile, debugline, debugmsg): swbreak
		case 3: _info_msg_ strf("(%s:%d) %s", debugfile, debugline, debugmsg): swbreak
		case 2: _warn_msg_ strf("(%s:%d) %s", debugfile, debugline, debugmsg): swbreak
		case 1: _error_msg_ strf("(%s:%d) %s", debugfile, debugline, debugmsg): swbreak
		case 0: _fatal_msg_ strf("(%s:%d) %s", debugfile, debugline, debugmsg): swbreak
	swend
#endif
return
#global

#module
#defcfunc notesearch array tmpnote, str txt
/*
		val=notesearch(p1, p2)
		文字列バッファから特定の文字列を検索する

		p1 : 検索されるバッファ
		p2 : 検索する文字列

		指定したバッファから特定の文字列になっている行を検索し、見つかった行を返します。
		見つからなかった場合は-1を返します。
*/
	ans=-1
	notesel tmpnote
	repeat notemax
		noteget a, cnt
		if (a == txt) {ans = cnt: break}
	loop
	noteunsel
	return ans
#global

/* 「東家」「南家」「西家」「北家」の文字列を返す */
#module
#include "const.hsp"
#defcfunc windName int wind
	switch wind
		case PLAYER_EAST: return "東家": swbreak
		case PLAYER_SOUTH: return "南家": swbreak
		case PLAYER_WEST: return "西家": swbreak
		case PLAYER_NORTH: return "北家": swbreak
		default: return "????": swbreak
	swend
#global

/* 「東○局」などの文字列を返す */
#module
#include "const.hsp"
#include "struct.hsp"
#defcfunc roundName int roundNum
	roundNameTxt = ""
	switch roundNum/NUM_OF_PLAYERS
		case 0: roundNameTxt += "東": swbreak
		case 1: roundNameTxt += "南": swbreak
		case 2: roundNameTxt += "西": swbreak
		case 3: roundNameTxt += "北": swbreak
		case 4: roundNameTxt += "白": swbreak
		case 5: roundNameTxt += "発": swbreak
		case 6: roundNameTxt += "中": swbreak
		default: roundNameTxt += "??"
	swend
	if ((getRule(RULE_GAME_LENGTH) == 5)||(getRule(RULE_GAME_LENGTH) == 7)) {
		switch getRoundLoop(GameStat@)*NUM_OF_ACTUAL_PLAYERS+roundNum\NUM_OF_PLAYERS
			case 0: roundNameTxt += "一局": swbreak
			case 1: roundNameTxt += "二局": swbreak
			case 2: roundNameTxt += "三局": swbreak
			case 3: roundNameTxt += "四局": swbreak
			case 4: roundNameTxt += "五局": swbreak
			case 5: roundNameTxt += "六局": swbreak
			case 6: roundNameTxt += "七局": swbreak
			case 7: roundNameTxt += "八局": swbreak
			case 8: roundNameTxt += "九局": swbreak
			case 9: roundNameTxt += "十局": swbreak
			default: roundNameTxt += strf("%d局", getRoundLoop(GameStat@)*NUM_OF_ACTUAL_PLAYERS+roundNum\NUM_OF_PLAYERS+1)
		swend
	} else {
		switch roundNum\NUM_OF_PLAYERS
			case 0: roundNameTxt += "一局": swbreak
			case 1: roundNameTxt += "二局": swbreak
			case 2: roundNameTxt += "三局": swbreak
			case 3: roundNameTxt += "四局": swbreak
			default: roundNameTxt += "??局"
		swend
	}
	return roundNameTxt
#global

/* 牌の名前の文字列を返す */
#module
#include "const.hsp"
#defcfunc TileName int tile
	switch tile
		case TILE_CHARACTER_ONE: return "一萬": swbreak
		case TILE_CHARACTER_TWO: return "二萬": swbreak
		case TILE_CHARACTER_THREE: return "三萬": swbreak
		case TILE_CHARACTER_FOUR: return "四萬": swbreak
		case TILE_CHARACTER_FIVE: return "五萬": swbreak
		case TILE_CHARACTER_SIX: return "六萬": swbreak
		case TILE_CHARACTER_SEVEN: return "七萬": swbreak
		case TILE_CHARACTER_EIGHT: return "八萬": swbreak
		case TILE_CHARACTER_NINE: return "九萬": swbreak
		case TILE_CIRCLE_ONE: return "一筒": swbreak
		case TILE_CIRCLE_TWO: return "二筒": swbreak
		case TILE_CIRCLE_THREE: return "三筒": swbreak
		case TILE_CIRCLE_FOUR: return "四筒": swbreak
		case TILE_CIRCLE_FIVE: return "五筒": swbreak
		case TILE_CIRCLE_SIX: return "六筒": swbreak
		case TILE_CIRCLE_SEVEN: return "七筒": swbreak
		case TILE_CIRCLE_EIGHT: return "八筒": swbreak
		case TILE_CIRCLE_NINE: return "九筒": swbreak
		case TILE_BAMBOO_ONE: return "一索": swbreak
		case TILE_BAMBOO_TWO: return "二索": swbreak
		case TILE_BAMBOO_THREE: return "三索": swbreak
		case TILE_BAMBOO_FOUR: return "四索": swbreak
		case TILE_BAMBOO_FIVE: return "五索": swbreak
		case TILE_BAMBOO_SIX: return "六索": swbreak
		case TILE_BAMBOO_SEVEN: return "七索": swbreak
		case TILE_BAMBOO_EIGHT: return "八索": swbreak
		case TILE_BAMBOO_NINE: return "九索": swbreak
		case TILE_EAST_WIND   : return "東": swbreak
		case TILE_SOUTH_WIND  : return "南": swbreak
		case TILE_WEST_WIND   : return "西": swbreak
		case TILE_NORTH_WIND  : return "北": swbreak
		case TILE_WHITE_DRAGON: return "白": swbreak
		case TILE_GREEN_DRAGON: return "發": swbreak
		case TILE_RED_DRAGON  : return "中": swbreak
		default: return "????": swbreak
	swend
#global

/* 場風牌のリスト */
#module
#include "const.hsp"
#defcfunc WindMax
	return 7

#defcfunc Wind2Tile int wind
	switch wind
		case 0: return TILE_EAST_WIND: swbreak
		case 1: return TILE_SOUTH_WIND: swbreak
		case 2: return TILE_WEST_WIND: swbreak
		case 3: return TILE_NORTH_WIND: swbreak
		case 4: return TILE_WHITE_DRAGON: swbreak
		case 5: return TILE_GREEN_DRAGON: swbreak
		case 6: return TILE_RED_DRAGON: swbreak
	swend
#global

/* エラーダイアログ */
#module
#uselib "user32.dll"
#func MessageBoxA "MessageBoxA" int,sptr,sptr,int
#deffunc errordlg str message, str titletxt
	MessageBoxA hwnd,message,titletxt,0x10
	return
#global

/* Vista/7を使っているかどうか */
#module
#defcfunc isVista
	wver = sysinfo(0)
	/* sysinfo(0)で帰ってくる情報
		XP    … ver5.2
		Vista … ver6.0
		7     … ver6.1
	*/
	if (instr(wver, 0, "WindowsNT ver6") >= 0) {
		return 1
	}
	return 0
#global

/* コンフィグのパスを自動設定 */
/* Vista以降でRoamingに準備できていなければ作る */
#module
#defcfunc confPath
	configpath = ""
	if (isVista()) {
		currentPath = dir_cur
		if (instr(currentPath, 0, dirinfo(0x10026)) >= 0) {
			appdataPath = dirinfo(0x1001a)
			chdir appdataPath
			dirlist dir_roaming,"*",5
			if (notesearch(dir_roaming, "MiHaJong") == -1) {
				mkdir "MiHaJong"
				chdir "MiHaJong"
				mkdir "haifu"
				bcopy currentPath+"\\haifu\\haifu.css", appdataPath+"\\MiHaJong\\haifu\\haifu.css"
			}
			configpath = appdataPath+"\\MiHaJong\\"
			chdir currentPath
		}
	}
	return configpath
#global

/* エラーがあったときに安全に終了させるための処理 */
*errorproc
	error strf("内部エラー [%d] が発生しました。", wparam)
	errordlg "内部エラー "+wparam+" が発生しました。"
	/* FALLTHRU */

/* 終了処理 */
*cleanup
	gsel SCR_CHAT, -1
	gsel 0, -1
	dmstop: dmend
	info "DirectMusic を解放しました。"
	repeat SND_END-SND_START+1
		dsstop cnt+SND_START
	loop
	repeat VOX_END-VOX_START+1
		dsstop cnt+VOX_START
	loop
	dsend
	info "DirectSound を解放しました。"
	repeat NUM_OF_PLAYERS
		sockclose SOCK_GAME+cnt
		sockclose SOCK_CHAT+cnt
	loop
	sockclose SOCK_LOGGER
	end
