/*=============================
 * HSP麻雀クライアントMiHaJong
 *     [半荘終了ルーチン]
 *=============================
 */

/* 半荘終了時の処理 */
#module FINIS
#include "const.hsp"
#include "mjcore.hsp"
#include "sounddll.hsp"
#deffunc endgame var GameStat, var GameEnv, int origTurn, int origHonba
	calcRank Rank, GameStat
	chatappend "-------------\n*** 終了\n"
	if (GetWatchModeFlag(GameEnv) == 0) {
		if (Rank(getPlayer(GameStat)) == 1) {
			bgmplay MUS_ENDING
			statmes "終了 あなたがトップです"
#ifdef SANMAT
		} else: if (Rank(getPlayer(GameStat)) == 3) {
#else
		} else: if (Rank(getPlayer(GameStat)) == 4) {
#endif
			bgmplay MUS_ENDING3
			statmes "終了 あなたはラスです"
		} else {
			bgmplay MUS_ENDING2
			statmes "終了 あなたは"+Rank(getPlayer(GameStat))+"位です"
		}
	} else {
		bgmplay MUS_ENDING2
		statmes "終了 Watch Mode"
	}
	vanish@: commonswitch GameStat, GameEnv
	setHonba GameStat, OrigHonba
	setRound GameStat, OrigTurn
	repeat NUM_OF_PLAYERS
		setCall cnt, ""
	loop
	setCenterTitle "終了"
	snd_play SND_PAGE: redrscreen: await 500
	repeat NUM_OF_ACTUAL_PLAYERS
		if (Rank(cnt) == 1) {setCall cnt, "１位"}
	loop: snd_play SND_TYPE: redrscreen: await 500
	repeat NUM_OF_ACTUAL_PLAYERS
		if (Rank(cnt) == 2) {setCall cnt, "２位"}
	loop: snd_play SND_TYPE: redrscreen: await 500
	repeat NUM_OF_ACTUAL_PLAYERS
		if (Rank(cnt) == 3) {setCall cnt, "３位"}
#ifndef SANMAT
	loop: snd_play SND_TYPE: redrscreen: await 500
	repeat NUM_OF_ACTUAL_PLAYERS
		if (Rank(cnt) == 4) {setCall cnt, "４位"}
#endif
	loop: snd_play SND_TYPE: redrscreen: await 3000
	if (getDeposit(GameStat)) {
		dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
		repeat NUM_OF_PLAYERS
			if (Rank(cnt) == 1) {PointDelta(cnt) += getDeposit(GameStat)*10}
		loop
		setCenterTitle "供託清算"
		putdelta PointDelta
		redraw 1: await 3000
		pointcalc GameStat, PointDelta
	}
	setDeposit GameStat, 0

	yakitoriPoint = 0: yakitoriChip = 0
	if (chkRule("yakitori", "5000pts")) {yakitoriPoint = 50}
	else: if (chkRule("yakitori", "10000pts")) {yakitoriPoint = 100}
	else: if (chkRule("yakitori", "chip1")) {yakitoriChip = 1}
	else: if (chkRule("yakitori", "chip2")) {yakitoriChip = 2}
	else: if (chkRule("yakitori", "chip3")) {yakitoriChip = 3}

	if (yakitoriPoint) {
#ifdef SANMAT
		if ((getYakitori(GameStat, 0)+getYakitori(GameStat, 1)+getYakitori(GameStat, 2)) > 0) {
#else
		if ((getYakitori(GameStat, 0)+getYakitori(GameStat, 1)+getYakitori(GameStat, 2)+getYakitori(GameStat, 3)) > 0) {
#endif
			dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
			repeat NUM_OF_ACTUAL_PLAYERS
				if (getYakitori(GameStat, cnt) == 1) {
					PointDelta(cnt, 0) -= yakitoriPoint
					repeat NUM_OF_ACTUAL_PLAYERS
						if (Rank(cnt) == 1) {
							PointDelta(cnt, 0) += yakitoriPoint
						}
					loop
				}
			loop
			setCenterTitle "焼鳥罰符"
			putdelta PointDelta
			redraw 1: await 3000
			pointcalc GameStat, PointDelta
		}
	}
	if (yakitoriChip) {
		if (chkRule("chip", "no") == 0) {
#ifdef SANMAT
			if ((getYakitori(GameStat, 0)+getYakitori(GameStat, 1)+getYakitori(GameStat, 2)) > 0) {
#else
			if ((getYakitori(GameStat, 0)+getYakitori(GameStat, 1)+getYakitori(GameStat, 2)+getYakitori(GameStat, 3)) > 0) {
#endif
				dim PointDelta, NUM_OF_PLAYERS
				repeat NUM_OF_ACTUAL_PLAYERS
					if (getYakitori(GameStat, cnt) == 1) {
						PointDelta(cnt) -= yakitoriChip
						repeat NUM_OF_ACTUAL_PLAYERS
							if (Rank(cnt) == 1) {
								PointDelta(cnt) += yakitoriChip
							}
						loop
					}
				loop
				setCenterTitle "焼鳥罰符"
				putchipdelta PointDelta
				redraw 1: await 3000
				repeat NUM_OF_PLAYERS
					addChip GameStat, cnt, PointDelta(cnt)
				loop
			}
		}
	}

	dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
	if (chkRule("point_basis", "no") == 0) {
		PlusCount = 0
		repeat NUM_OF_ACTUAL_PLAYERS // 沈みウマの計算用に浮いてる人数を数える
			if (isAboveBase(GameStat,cnt)) {PlusCount++}
		loop
#ifdef SANMAT
		repeat NUM_OF_ACTUAL_PLAYERS
			if (chkRule("point_basis", "3")) { /* 順位ウマ */
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 30: swbreak
					case 3: PointDelta(cnt,0) -= 30: swbreak
				swend
			} else: if (chkRule("point_basis", "5")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 50: swbreak
					case 3: PointDelta(cnt,0) -= 50: swbreak
				swend
			} else: if (chkRule("point_basis", "8")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 80: swbreak
					case 3: PointDelta(cnt,0) -= 80: swbreak
				swend
			} else: if (chkRule("point_basis", "10")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 100: swbreak
					case 3: PointDelta(cnt,0) -= 100: swbreak
				swend
			} else: if (chkRule("point_basis", "20")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 200: swbreak
					case 3: PointDelta(cnt,0) -= 200: swbreak
				swend
			} else: if (chkRule("point_basis", "30")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 300: swbreak
					case 3: PointDelta(cnt,0) -= 300: swbreak
				swend
			} else: if (chkRule("point_basis", "40")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 400: swbreak
					case 3: PointDelta(cnt,0) -= 400: swbreak
				swend
			} else: if (chkRule("point_basis", "50")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 500: swbreak
					case 3: PointDelta(cnt,0) -= 500: swbreak
				swend
			} else: if (chkRule("point_basis", "60")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 600: swbreak
					case 3: PointDelta(cnt,0) -= 600: swbreak
				swend
			} else: if (chkRule("point_basis", "4-8")) { /* 複合ウマ */
				switch Rank(cnt)
					case 1:
						if (PlusCount < 2) {PointDelta(cnt,0) += 120}
						else {PointDelta(cnt) += 80}
						swbreak
					case 2:
						if (PlusCount < 2) {PointDelta(cnt,0) -= 40}
						swbreak
					case 3:
						PointDelta(cnt) -= 80
						swbreak
				swend
			} else: if (chkRule("point_basis", "5-10")) {
				switch Rank(cnt)
					case 1:
						if (PlusCount < 2) {PointDelta(cnt,0) += 150}
						else {PointDelta(cnt) += 100}
						swbreak
					case 2:
						if (PlusCount < 2) {PointDelta(cnt,0) -= 50}
						swbreak
					case 3:
						PointDelta(cnt) -= 100
						swbreak
				swend
			} else: if (chkRule("point_basis", "10-20")) {
				switch Rank(cnt)
					case 1:
						if (PlusCount < 2) {PointDelta(cnt,0) += 300}
						else {PointDelta(cnt) += 200}
						swbreak
					case 2:
						if (PlusCount < 2) {PointDelta(cnt,0) -= 100}
						swbreak
					case 3:
						PointDelta(cnt) -= 200
						swbreak
				swend
			} else: if (chkRule("point_basis", "shizumiuma_5")) { /* 沈みウマ */
				if (Rank(cnt) == 1) {PointDelta(cnt,0) += 50*(3-PlusCount)}
				if (Rank(cnt) > PlusCount) {PointDelta(cnt,0) -= 50}
			} else: if (chkRule("point_basis", "shizumiuma_10")) {
				if (Rank(cnt) == 1) {PointDelta(cnt,0) += 100*(3-PlusCount)}
				if (Rank(cnt) > PlusCount) {PointDelta(cnt,0) -= 100}
			} else: if (chkRule("point_basis", "shizumiuma_20")) {
				if (Rank(cnt) == 1) {PointDelta(cnt,0) += 200*(3-PlusCount)}
				if (Rank(cnt) > PlusCount) {PointDelta(cnt,0) -= 200}
			}
		loop
#else
		repeat NUM_OF_ACTUAL_PLAYERS
			if (chkRule("point_basis", "0-3")) { /* 順位ウマ */
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 30: swbreak
					case 4: PointDelta(cnt,0) -= 30: swbreak
				swend
			} else: if (chkRule("point_basis", "0-5")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 50: swbreak
					case 4: PointDelta(cnt,0) -= 50: swbreak
				swend
			} else: if (chkRule("point_basis", "3-5")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 50: swbreak
					case 2: PointDelta(cnt,0) += 30: swbreak
					case 3: PointDelta(cnt,0) -= 30: swbreak
					case 4: PointDelta(cnt,0) -= 50: swbreak
				swend
			} else: if (chkRule("point_basis", "5-10")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 100: swbreak
					case 2: PointDelta(cnt,0) += 50: swbreak
					case 3: PointDelta(cnt,0) -= 50: swbreak
					case 4: PointDelta(cnt,0) -= 100: swbreak
				swend
			} else: if (chkRule("point_basis", "10-20")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 200: swbreak
					case 2: PointDelta(cnt,0) += 100: swbreak
					case 3: PointDelta(cnt,0) -= 100: swbreak
					case 4: PointDelta(cnt,0) -= 200: swbreak
				swend
			} else: if (chkRule("point_basis", "10-30")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 300: swbreak
					case 2: PointDelta(cnt,0) += 100: swbreak
					case 3: PointDelta(cnt,0) -= 100: swbreak
					case 4: PointDelta(cnt,0) -= 300: swbreak
				swend
			} else: if (chkRule("point_basis", "20-40")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 400: swbreak
					case 2: PointDelta(cnt,0) += 200: swbreak
					case 3: PointDelta(cnt,0) -= 200: swbreak
					case 4: PointDelta(cnt,0) -= 400: swbreak
				swend
			} else: if (chkRule("point_basis", "20-50")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 500: swbreak
					case 2: PointDelta(cnt,0) += 200: swbreak
					case 3: PointDelta(cnt,0) -= 200: swbreak
					case 4: PointDelta(cnt,0) -= 500: swbreak
				swend
			} else: if (chkRule("point_basis", "20-60")) {
				switch Rank(cnt)
					case 1: PointDelta(cnt,0) += 600: swbreak
					case 2: PointDelta(cnt,0) += 200: swbreak
					case 3: PointDelta(cnt,0) -= 200: swbreak
					case 4: PointDelta(cnt,0) -= 600: swbreak
				swend
			} else: if (chkRule("point_basis", "7-5-3")) { /* 複合ウマ */
				switch Rank(cnt)
					case 1: 
						switch PlusCount
							case 1: PointDelta(cnt,0) += 150: swbreak
							case 3: PointDelta(cnt,0) += 70: swbreak
							default: PointDelta(cnt,0) += 100: swbreak
						swend
						swbreak
					case 2: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 30: swbreak
							default: PointDelta(cnt,0) += 50: swbreak
						swend
						swbreak
					case 3: 
						switch PlusCount
							case 3: PointDelta(cnt,0) += 30: swbreak
							default: PointDelta(cnt,0) -= 50: swbreak
						swend
						swbreak
					case 4: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 70: swbreak
							case 3: PointDelta(cnt,0) -= 150: swbreak
							default: PointDelta(cnt,0) -= 100: swbreak
						swend
						swbreak
				swend
			} else: if (chkRule("point_basis", "8-3-1")) {
				switch Rank(cnt)
					case 1: 
						switch PlusCount
							case 1: PointDelta(cnt,0) += 120: swbreak
							default: PointDelta(cnt,0) += 80: swbreak
						swend
						swbreak
					case 2: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 10: swbreak
							case 3: PointDelta(cnt,0) += 30: swbreak
							default: PointDelta(cnt,0) += 40: swbreak
						swend
						swbreak
					case 3: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 30: swbreak
							case 3: PointDelta(cnt,0) += 10: swbreak
							default: PointDelta(cnt,0) -= 40: swbreak
						swend
						swbreak
					case 4: 
						switch PlusCount
							case 3: PointDelta(cnt,0) -= 120: swbreak
							default: PointDelta(cnt,0) -= 80: swbreak
						swend
						swbreak
				swend
			} else: if (chkRule("point_basis", "10-20-30")) {
				switch Rank(cnt)
					case 1: 
						switch PlusCount
							case 1: PointDelta(cnt,0) += 600: swbreak
							case 2: PointDelta(cnt,0) += 400: swbreak
							case 3: PointDelta(cnt,0) += 300: swbreak
						swend
						swbreak
					case 2: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 100: swbreak
						swend
						swbreak
					case 3: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 200: swbreak
							case 2: PointDelta(cnt,0) -= 100: swbreak
						swend
						swbreak
					case 4: 
						switch PlusCount
							case 1: PointDelta(cnt,0) -= 300: swbreak
							case 2: PointDelta(cnt,0) -= 300: swbreak
							case 3: PointDelta(cnt,0) -= 300: swbreak
						swend
						swbreak
				swend
			} else: if (chkRule("point_basis", "shizumiuma_5")) { /* 沈みウマ */
				if (Rank(cnt) == 1) {PointDelta(cnt,0) += 50*(NUM_OF_PLAYERS-PlusCount)}
				if (Rank(cnt) > PlusCount) {PointDelta(cnt,0) -= 50}
			} else: if (chkRule("point_basis", "shizumiuma_10")) {
				if (Rank(cnt) == 1) {PointDelta(cnt,0) += 100*(NUM_OF_PLAYERS-PlusCount)}
				if (Rank(cnt) > PlusCount) {PointDelta(cnt,0) -= 100}
			} else: if (chkRule("point_basis", "shizumiuma_20")) {
				if (Rank(cnt) == 1) {PointDelta(cnt,0) += 200*(NUM_OF_PLAYERS-PlusCount)}
				if (Rank(cnt) > PlusCount) {PointDelta(cnt,0) -= 200}
			}
		loop
#endif
		setCenterTitle "順位点"
		putdelta PointDelta
		redraw 1: await 3000
		pointcalc GameStat, PointDelta
	}
	
	dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
#ifdef SANMAT
	if ((chkRule("starting_point", "40000pts_oka0") == 0) && (chkRule("starting_point", "30000pts_oka0") == 0)) {
		repeat NUM_OF_ACTUAL_PLAYERS
			if (Rank(cnt) == 1) {
				if (chkRule("starting_point", "35000pts_oka15") || chkRule("starting_point", "25000pts_oka15")) {
					PointDelta(cnt) += 150
				} else: if (chkRule("starting_point", "27000pts_oka9")) {
					PointDelta(cnt) += 90
				} else: if (chkRule("starting_point", "25000pts_oka45")) {
					PointDelta(cnt) += 450
				} else: if (chkRule("starting_point", "30000pts_oka30")) {
					PointDelta(cnt) += 300
				}
			} else: if (Rank(cnt) == 3) {
				if (chkRule("starting_point", "45000pts_oka-15")) {
					PointDelta(cnt) -= 150
				} else: if (chkRule("starting_point", "50000pts_oka-30")) {
					PointDelta(cnt) -= 300
				}
			}
		loop
		if (chkRule("starting_point", "45000pts_oka-15") || chkRule("starting_point", "50000pts_oka-30")) {
			setCenterTitle "ラスペナ"
		} else {setCenterTitle "トップ賞"}
#else
	if (chkRule("starting_point", "30000pts_oka0") == 0) {
		repeat NUM_OF_ACTUAL_PLAYERS
			if (Rank(cnt) == 1) {
				if (chkRule("starting_point", "25000pts_oka20")) {
					PointDelta(cnt) += 200
				} else: if (chkRule("starting_point", "27000pts_oka12")) {
					PointDelta(cnt) += 120
				} else: if (chkRule("starting_point", "20000pts_oka40")) {
					PointDelta(cnt) += 400
				}
			} else: if (Rank(cnt) == 4) {
				if (chkRule("starting_point", "35000pts_oka-20")) {
					PointDelta(cnt) -= 200
				} else: if (chkRule("starting_point", "40000pts_oka-40")) {
					PointDelta(cnt) -= 400
				}
			}
		loop
		if (chkRule("starting_point", "35000pts_oka-20") || chkRule("starting_point", "40000pts_oka-40")) {
			setCenterTitle "ラスペナ"
		} else {setCenterTitle "トップ賞"}
#endif
		putdelta PointDelta
		redraw 1: await 3000
		pointcalc GameStat, PointDelta
	}
	
	/* 最終的なスコアを計算する */
	dim FinalScore, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
	repeat NUM_OF_ACTUAL_PLAYERS
		if (Rank(cnt) > 1) {
			if (isAboveBase(GameStat, cnt)) {
				FinalScore(cnt, 0) = ((getScore(GameStat,cnt, 0)-BasePoint())+5)/10
			} else {
				FinalScore(cnt, 0) = ((getScore(GameStat,cnt, 0)-BasePoint())-5)/10
			}
			if (chkRule("starting_point", "chip_rate_500")) {
				FinalScore(cnt, 0) += getChip(GameStat, cnt)/2
			} else: if (chkRule("starting_point", "chip_rate_1000")) {
				FinalScore(cnt, 0) += getChip(GameStat, cnt)
			} else: if (chkRule("starting_point", "chip_rate_2000")) {
				FinalScore(cnt, 0) += getChip(GameStat, cnt)*2
			} else: if (chkRule("starting_point", "chip_rate_3000")) {
				FinalScore(cnt, 0) += getChip(GameStat, cnt)*3
			} else: if (chkRule("starting_point", "chip_rate_5000")) {
				FinalScore(cnt, 0) += getChip(GameStat, cnt)*5
			} else: if (chkRule("starting_point", "chip_rate_10000")) {
				FinalScore(cnt, 0) += getChip(GameStat, cnt)*10
			}
			tmpcnt = cnt
			repeat NUM_OF_DIGIT_GROUPS-1, 1: FinalScore(tmpcnt, cnt) = getScore(GameStat,tmpcnt, cnt): loop
		}
	loop
	scoreflagfix FinalScore
	dim FinalScoreTmp, NUM_OF_DIGIT_GROUPS
	repeat NUM_OF_DIGIT_GROUPS
#ifdef SANMAT
		FinalScoreTmp(cnt) = FinalScore(0, cnt)+FinalScore(1, cnt)+FinalScore(2, cnt)
#else
		FinalScoreTmp(cnt) = FinalScore(0, cnt)+FinalScore(1, cnt)+FinalScore(2, cnt)+FinalScore(3, cnt)
#endif
	loop
	repeat NUM_OF_ACTUAL_PLAYERS
		if (Rank(cnt) == 1) {
			tmpcnt = cnt
			repeat NUM_OF_DIGIT_GROUPS: FinalScore(tmpcnt, cnt) = 0-FinalScoreTmp(cnt): loop
		}
	loop
	scoreflagfix FinalScore
	repeat NUM_OF_PLAYERS
		tmpcnt=cnt
		repeat NUM_OF_DIGIT_GROUPS-1
			FinalScore(tmpcnt, cnt) += (FinalScore(tmpcnt, cnt+1) \ 1000)*100000
			FinalScore(tmpcnt, cnt+1) /= 1000
		loop
	loop
	deltatxt FinalScore, 1
	repeat NUM_OF_ACTUAL_PLAYERS
		if (getCall(cnt) == "") {setCall cnt, "０"}
	loop
	setCenterTitle "最終成績"
	repeat NUM_OF_PLAYERS
		tmptmprnk = cnt+1
		repeat NUM_OF_PLAYERS
			if (Rank(cnt) == tmptmprnk) {
				tmpscoretxt = bignumtotext(FinalScore, cnt, 1, "+", "-")
				tmptxt += " "+tmpscoretxt+"点"
				chatappend "*** "+tmptmprnk+"位 "+tmpscoretxt+" "+getPlayerName(GameEnv, cnt)+"\n"
			}
		loop
	loop
	snd_play SND_YAKULST2: redrscreen
	redraw 1
	if (getGameMode(GameEnv) != GAMEMODE_STANDALONE) {s_hangup@ SOCK_GAME+0: s_hangup@ SOCK_CHAT+0: s_hangup@ SOCK_CHAT+1: s_hangup@ SOCK_CHAT+2: s_hangup@ SOCK_CHAT+3}
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {s_hangup@ SOCK_GAME+1: s_hangup@ SOCK_GAME+2: s_hangup@ SOCK_GAME+3}
	if (getGameMode(GameEnv) != GAMEMODE_STANDALONE) {chatappend "*** 切断しました\n"}
	gsel SCR_CHAT: objgray 1, 0: objgray 2, 0: gsel 0
	closescript // スクリプトを閉じる
	font fontname, 48, 0: objsize 200, 60
	pos 620, 560: colorbutton gosub "確認", *finishbtn@, -1, 0xffffff: tooltip@ stat-STATBOX, "タイトル画面に戻ります"
	haifusave
	return
#global

*finishbtn
	snd_play SND_BUTTON
	closingchat : chatwnd 0
	await 10
	buttonPressed = 1
	return
