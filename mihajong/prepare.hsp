/*=============================
 * HSP麻雀クライアントMiHaJong
 *     [卓の準備ルーチン]
 *=============================
 */

/* 半荘の初期化 */
*gameinit
	closingchat
	GameStat = initializeGameTable(GAMETYPE)
	setPlayer GameStat, TmpPosition(ClientNumber)
	dim MachihaiCount, TILE_NONFLOWER_STRICT_MAX+1 // 起家でのバグ防止用に仮初期化
	haifubufinit
	statmes "" // 情報窓への表示
	initializechat GameEnv, ServerAddress, ClientNumber
	initYakuCatalog // 役カタログの初期化
	initscript // AIの初期化
return

/* 卓の初期化 */
*tableinit
	initephemeral // AIのephemeralテーブルを初期化
	ifaceinit // 押しボタン類のステータス初期化
	inittable GameStat
	// 局の開始で同期する。このとき落ち戻りが可能
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {serversend 0xb6, GameEnv}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if ((ClientReceived == 1)&&(ReceivedMsg == 0xb6)) {
				break
			}
			if ((ClientReceived == 1)&&(ReceivedMsg == 1023)) {
				setDisconnectFlag GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_ACTIVE), 1
				setCenterTitle "回線切断": redrscreen
				gosub *reconnection
				dialog "再接続しました", 0, "回線切断"
				RoundEndType = ENDKYOKU_DISCONNECT
				break
			}
			await 0
		loop
	}
	// 牌譜バッファの初期化
	haifuinit
	// 場風のデータを送信。とりあえず１６周目の北四局まで対応
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		serversend getRoundLoop(GameStat)*roundLoopRate()+getRound(GameStat), GameEnv
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived == 1) {
				setRoundLoop GameStat, ReceivedMsg / 16
				setRound GameStat, ReceivedMsg \ 16
				break
			}
			await 0
		loop
	}
	// 積み棒のデータを送信。とりあえず２５５本場まで対応
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		serversend getHonba(GameStat), GameEnv
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived == 1) {
				setHonba GameStat, ReceivedMsg
				break
			}
			await 0
		loop
	}
	// 供託本数のデータを送信。とりあえず２５５０００点まで対応
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		serversend getDeposit(GameStat), GameEnv
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived == 1) {
				setDeposit GameStat, ReceivedMsg
				break
			}
			await 0
		loop
	}
	// 八連荘の判定に使うデータを送信
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		serversend (getLastAgariPlayer(GameStat)+1)*16+getAgariChain(GameStat), GameEnv
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived == 1) {
				setLastAgariPlayer GameStat, (ReceivedMsg/16) -1
				setAgariChain GameStat, ReceivedMsg \ 16
				break
			}
			await 0
		loop
	}
	// 持ち点のデータを送信。符号込みで33バイトずつ・スモールエンディアン
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		repeat NUM_OF_PLAYERS
			tmp = cnt
			repeat NUM_OF_DIGIT_GROUPS
				serversend abs(getScore(GameStat,tmp, cnt)) \ 256, GameEnv
				serversend abs(getScore(GameStat,tmp, cnt)) \ 65536 / 256, GameEnv
				serversend abs(getScore(GameStat,tmp, cnt)) \ 16777216 / 65536, GameEnv
				serversend abs(getScore(GameStat,tmp, cnt)) / 16777216, GameEnv
			loop
			if (getScore(GameStat,cnt, 0) < 0) {
				serversend 0x01, GameEnv
			} else {
				serversend 0x00, GameEnv
			}
		loop
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat NUM_OF_PLAYERS: tmp = cnt
			repeat NUM_OF_DIGIT_GROUPS: tmp2 = cnt
				repeat
					clientreceive ClientReceived, ReceivedMsg
					if (ClientReceived == 1) {setScore GameStat, tmp, tmp2, ReceivedMsg: break}
					await 0
				loop
				repeat
					clientreceive ClientReceived, ReceivedMsg
					if (ClientReceived == 1) {addScore GameStat, tmp, tmp2, ReceivedMsg*256: break}
					await 0
				loop
				repeat
					clientreceive ClientReceived, ReceivedMsg
					if (ClientReceived == 1) {addScore GameStat, tmp, tmp2, ReceivedMsg*65536: break}
					await 0
				loop
				repeat
					clientreceive ClientReceived, ReceivedMsg
					if (ClientReceived == 1) {addScore GameStat, tmp, tmp2, ReceivedMsg*16777216: break}
					await 0
				loop
			loop
			repeat
				clientreceive ClientReceived, ReceivedMsg
				if (ClientReceived == 1) {
					if (ReceivedMsg == 1) {
						repeat NUM_OF_DIGIT_GROUPS: setScore GameStat, tmp, cnt, -getScore(GameStat, tmp, cnt): loop
					}
					break
				}
				await 0
			loop
		loop
	}
	// 焼鳥のデータを送信
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		serversend getYakitori(GameStat, 0)*8+getYakitori(GameStat, 1)*4+getYakitori(GameStat, 2)*2+getYakitori(GameStat, 3), GameEnv
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived == 1) {
				setYakitori GameStat, 0, ReceivedMsg\16/8
				setYakitori GameStat, 1, ReceivedMsg\8/4
				setYakitori GameStat, 2, ReceivedMsg\4/2
				setYakitori GameStat, 3,ReceivedMsg\2/1
				break
			}
			await 0
		loop
	}
	// チップのデータを送信。一応±１２７まで対応
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		repeat NUM_OF_PLAYERS: serversend getChip(GameStat, cnt)+128, GameEnv: loop
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat NUM_OF_PLAYERS: tmp = cnt
			repeat
				clientreceive ClientReceived, ReceivedMsg
				if (ClientReceived == 1) {
					setChip GameStat, tmp, ReceivedMsg-128
					break
				}
				await 0
			loop
		loop
	}
	// 四馬路解禁フラグを送信
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		serversend getSumaroFlag(GameStat, 0)*8+getSumaroFlag(GameStat, 1)*4+getSumaroFlag(GameStat, 2)*2+getSumaroFlag(GameStat, 3), GameEnv
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived == 1) {
				setSumaroFlag GameStat, 0, ReceivedMsg \ 16 / 8
				setSumaroFlag GameStat, 1, ReceivedMsg \ 8 / 4
				setSumaroFlag GameStat, 2, ReceivedMsg \ 4 / 2
				setSumaroFlag GameStat, 3, ReceivedMsg \ 2
				break
			}
			await 0
		loop
	}
	// BGMを鳴らす
	if (((getRoundLoop(GameStat)*roundLoopRate()+getRound(GameStat)) == getGameLength(GameStat))&&(getGameLength(GameStat) > 0)) {
		// オーラスだけ特別
		bgmplay MUS_FINAL
	} else {
		if ((getHonba(GameStat) >= 5)&&(getRule(RULE_RYANSHIBA) == 1)) {
			// リャンシバ時専用BGM
			bgmplay MUS_SHIBARI
		} else {
			bgmplay getRound(GameStat)
		}
	}
	if (getHonba(GameStat)) {
		tmpStatus = ""+roundName(getRound(GameStat))+getHonba(GameStat)+"本場"
	} else {
		tmpStatus = ""+roundName(getRound(GameStat))
	}
	chatappend "-------------\n*** "+tmpStatus+"\n"
	if (GetWatchModeFlag(GameEnv) == 1) {
		tmpStatus += " Watch Mode"
	} else {
		switch playerWind(getPlayer(GameStat), getRound(GameStat))
			case PLAYER_EAST: tmpStatus += " あなたが親です": swbreak
			case PLAYER_SOUTH: tmpStatus += " あなたは南家です": swbreak
			case PLAYER_WEST: tmpStatus += " あなたは西家です": swbreak
#ifdef SANMA4
			case PLAYER_NORTH: tmpStatus += " あなたは抜け番です": swbreak
#else
			case PLAYER_NORTH: tmpStatus += " あなたは北家です": swbreak
#endif
		swend
	}
	statmes tmpStatus
	await 100
	setCenterTitle "" // 画面中央に大書する文字列
	initCall // 鳴きなど
	if ((getRoundLoop(GameStat))\2 == 0) {
		switch getRound(GameStat)/NUM_OF_PLAYERS
			case 0:
				if (getRoundLoop(GameStat) == 0) {
					SetTableColor GameEnv,   0, 160,   0
				} else {
					SetTableColor GameEnv,  80, 160,   0
				}
				swbreak
			case 1:
				if (getRoundLoop(GameStat) == 0) {
					SetTableColor GameEnv,   0, 160, 160
				} else {
					SetTableColor GameEnv, 160,  80,   0
				}
				swbreak
			case 2: SetTableColor GameEnv,   0,  80, 160: swbreak
			case 3: SetTableColor GameEnv, 120,   0, 160: swbreak
		swend
	} else {
		switch getRound(GameStat)/NUM_OF_PLAYERS
			case 0: SetTableColor GameEnv, 160, 160, 160: swbreak
			case 1: SetTableColor GameEnv, 160, 160,   0: swbreak
			case 2: SetTableColor GameEnv, 160,   0,   0: swbreak
			case 3: SetTableColor GameEnv,  80,  80,  80: swbreak
		swend
	}
	switch getRound(GameStat)/NUM_OF_PLAYERS
			case 4: SetTableColor GameEnv, 120, 120, 160: swbreak
			case 5: SetTableColor GameEnv, 120, 160, 120: swbreak
			case 6: SetTableColor GameEnv, 160, 120, 120: swbreak
	swend
	if ((getRoundLoop(GameStat)*roundLoopRate()+getRound(GameStat)) >= (getGameLength(GameStat)+1)) {
		setCenterTitle "延長戦"
	} else: if ((getRoundLoop(GameStat)*roundLoopRate()+getRound(GameStat)) == getGameLength(GameStat)) {
		setCenterTitle "オーラス"
	} else {
		setCenterTitle roundName(getRound(GameStat))
	}
	shuffle GameStat
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) { // クライアントの場合、データを受信
#ifdef ALLSANMA
			tmpNumberOfTiles = 108
#else
		if (getRule(RULE_FLOWER_TILES) != 0) {
			if (getRule(RULE_FLOWER_TILES) == 3) {
				tmpNumberOfTiles = 144
			} else {
				tmpNumberOfTiles = 140
			}
		} else {
			tmpNumberOfTiles = 136
		}
#endif
		repeat tmpNumberOfTiles
			tmp = cnt
			repeat
				clientreceive ClientReceived, ReceivedMsg
				if (ClientReceived) {
					if ( ((ReceivedMsg-0x10) > TILE_NONFLOWER_MAX)&& ((ReceivedMsg-0x10) < TILE_SUIT_FLOWERS) ) {
						setWall GameStat, WALL_TILECODE, tmp, (ReceivedMsg-0x10)\TILE_NONFLOWER_MAX
						setWall GameStat, WALL_REDTILE, tmp, (ReceivedMsg-0x10)/TILE_NONFLOWER_MAX
					} else {
						setWall GameStat, WALL_TILECODE, tmp, (ReceivedMsg-0x10)
						setWall GameStat, WALL_REDTILE, tmp, 0
					}
					if ((ReceivedMsg-0x10) == TILE_WHITE_DRAGON+40) {
						// 白ポッチの場合
						setWall GameStat, WALL_TILECODE, tmp, TILE_WHITE_DRAGON
						setWall GameStat, WALL_REDTILE, tmp, 1
					}
					break
				}
				await 0
			loop
		loop
	}
	vanish
	setDice GameStat, 0, 0, rnd(6)+1: setDice GameStat, 1, 0, rnd(6)+1
	setDice GameStat, 0, 1, rnd(2): setDice GameStat, 1, 1, rnd(2)
	redrscreen: commonswitch GameStat, GameEnv
	repeat 10 // 賽を振る
		setDice GameStat, 0, 0, rnd(6)+1: setDice GameStat, 1, 0, rnd(6)+1
		setDice GameStat, 0, 1, rnd(2): setDice GameStat, 1, 1, rnd(2)
		dsplay SND_SAIKORO
		redrdice GameStat, GameEnv: await 80
	loop
	dsplay SND_SAIKORO
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived) {
				setDice GameStat, 0, 0, ReceivedMsg-0xa8
				setDice GameStat, 0, 1, rnd(2)
				break
			}
			await 0
		loop
		repeat
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived) {
				setDice GameStat, 1, 0, ReceivedMsg-0xa8
				setDice GameStat, 1, 1, rnd(2)
				break
			}
			await 0
		loop
	}
	if ((getRule(RULE_DORA_TWICE) == 1)||((getRule(RULE_DORA_TWICE) == 2)&&(getDice(GameStat, 0, 0) == getDice(GameStat, 1, 0)))) {
		addDeadWallLength GameStat, 2 /* ドラドラ卓なら王牌の数を増やす */
	}
	calcWareme GameStat // 割れ目
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) { // サーバーの場合、牌山のデータを送信
#ifdef ALLSANMA
		tmpNumberOfTiles = 108
#else
		switch getRule(RULE_FLOWER_TILES)
			case 1: case 2:
				tmpNumberOfTiles = 140
				swbreak
			case 3:
				tmpNumberOfTiles = 144
				swbreak
			default:
				tmpNumberOfTiles = 136
		swend
#endif
		repeat tmpNumberOfTiles
			serversend getWall(GameStat, WALL_TILECODE, cnt)+(getWall(GameStat, WALL_REDTILE, cnt)*TILE_NONFLOWER_MAX)+0x10, GameEnv
		loop
		serversend getDice(GameStat, 0, 0)+0xa8, GameEnv
		serversend getDice(GameStat, 1, 0)+0xa8, GameEnv
	}
	// 通常機能の表示
	vanish2@
	// 配牌
	setCenterTitle roundName(getRound(GameStat))
#ifdef ALLSANMA
	repeat 36 // ２幢ずつを３回
#ifdef SANMA4
		setHand GameStat, HAND_TILECODE, (cnt\4)+((cnt/12)*4), ((cnt\12/4)+getRound(GameStat))\4, getWall(GameStat, WALL_TILECODE, getDrawPointer(GameStat))
		setHand GameStat, HAND_REDTILE, (cnt\4)+((cnt/12)*4), ((cnt\12/4)+getRound(GameStat))\4, getWall(GameStat, WALL_REDTILE, getDrawPointer(GameStat))
#else
		setHand GameStat, HAND_TILECODE, (cnt\4)+((cnt/12)*4), ((cnt\12/4)+(getRound(GameStat)-(getRound(GameStat)/4)))\3, getWall(GameStat, WALL_TILECODE, getDrawPointer(GameStat))
		setHand GameStat, HAND_REDTILE, (cnt\4)+((cnt/12)*4), ((cnt\12/4)+(getRound(GameStat)-(getRound(GameStat)/4)))\3, getWall(GameStat, WALL_REDTILE, getDrawPointer(GameStat))
#endif
#else
	repeat 48 // ２幢ずつを３回
		setHand GameStat, HAND_TILECODE, (cnt\4)+((cnt/16)*4), ((cnt\16/4)+getRound(GameStat))\4, getWall(GameStat, WALL_TILECODE, getDrawPointer(GameStat))
		setHand GameStat, HAND_REDTILE, (cnt\4)+((cnt/16)*4), ((cnt\16/4)+getRound(GameStat))\4, getWall(GameStat, WALL_REDTILE, getDrawPointer(GameStat))
#endif
		incDrawPointer GameStat
#ifdef ALLSANMA
		if (cnt == 18) {
#else
		if (cnt == 24) {
#endif
			switch getHonba(GameStat)
				case 0: /* do nothing */ swbreak
				case 1: setCenterTitle "１本場": swbreak
				case 2: setCenterTitle "２本場": swbreak
				case 3: setCenterTitle "３本場": swbreak
				case 4: setCenterTitle "４本場": swbreak
				case 5: setCenterTitle "５本場": swbreak
				case 6: setCenterTitle "６本場": swbreak
				case 7: setCenterTitle "７本場": swbreak
				case 8: setCenterTitle "８本場": swbreak
				case 9: setCenterTitle "９本場": swbreak
				default: setCenterTitle ""+getHonba(GameStat)+"本場"
			swend
		}
		if (cnt\4 == 3) {
			calcdoukasen GameStat
			dsplay SND_TSUMO
			redrscreen: await 250
		}
	loop
	setCenterTitle ""
#ifdef ALLSANMA
	repeat 4 // １枚ずつを１回、親のチョンチョン
#ifdef SANMA4
		setHand GameStat, HAND_TILECODE, (cnt/3)+12, ((cnt\3)+getRound(GameStat))\4, getWall(GameStat, WALL_TILECODE, getDrawPointer(GameStat))
		setHand GameStat, HAND_REDTILE, (cnt/3)+12, ((cnt\3)+getRound(GameStat))\4, getWall(GameStat, WALL_REDTILE, getDrawPointer(GameStat))
#else
		setHand GameStat, HAND_TILECODE, (cnt/3)+12, (cnt+(getRound(GameStat)-(getRound(GameStat)/4)))\3, getWall(GameStat, WALL_TILECODE, getDrawPointer(GameStat))
		setHand GameStat, HAND_REDTILE, (cnt/3)+12, (cnt+(getRound(GameStat)-(getRound(GameStat)/4)))\3, getWall(GameStat, WALL_REDTILE, getDrawPointer(GameStat))
#endif
#else
	repeat 5 // １枚ずつを１回、親のチョンチョン
		setHand GameStat, HAND_TILECODE, (cnt/4)+12, (cnt+getRound(GameStat))\4, getWall(GameStat, WALL_TILECODE, getDrawPointer(GameStat))
		setHand GameStat, HAND_REDTILE, (cnt/4)+12, (cnt+getRound(GameStat))\4, getWall(GameStat, WALL_REDTILE, getDrawPointer(GameStat))
#endif
		incDrawPointer GameStat
		calcdoukasen GameStat
		dsplay SND_TSUMO
		redrscreen: await 250
	loop

	initdora GameStat // ドラをめくる

	dsplay SND_MEKURI
	//setCurrentPlayer GameStat, CURRENTPLAYER_ACTIVE, 0
	haifurechaipai GameStat
	statmes ""
	repeat NUM_OF_PLAYERS: lipai GameStat, cnt: loop
	dsplay SND_BELL
return
