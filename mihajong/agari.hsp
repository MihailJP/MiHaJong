/*=============================
 * HSP麻雀クライアントMiHaJong
 *     [和了処理ルーチン]
 *=============================
 */

#module
#include "const.hsp"
#include "mjcore.hsp"
#deffunc agariproc int _RoundEndType, var GameStat, var GameEnv, var tmpUraFlag, var tmpAliceFlag, var ResultDesc
	RoundEndType = _RoundEndType
	tmpagariflag = 0
	FirstAgariPlayer = getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)
	OyaAgari = -1
	ResultDesc = ""
	tmpUraFlag = 0
	tmpAliceFlag = 0
	AgariPlayerPriority = -1
	origDoraPointer = getDoraPointer(GameStat)

	repeat NUM_OF_PLAYERS-1
		switch getRule(RULE_MULTIPLE_MAHJONG)
			case 0: case 1:
				if (cnt > 0) {break}
				swbreak
			case 2: case 3:
				if (cnt > 1) {break}
				swbreak
		swend
		if (cnt > 0) {
			if (getTsumoAgariFlag(GameStat) == 0) {
				RoundEndType = ENDKYOKU_AGARI
				setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, (getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)+1) \ NUM_OF_PLAYERS
				if (getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI) == getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) {break}
				if (getDeclarationFlag(GameStat, DECLARATIONFLAG_RON, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS) == 1) {
					setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
					setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getCurrentDiscard(GameStat, CURRENTDISCARD_REDTILE)
					countyaku GameStat, yakuInfo, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
					chkfuriten FuritenFlag, MachihaiFlag, MachihaiCount, MachihaiTotal, MachiMen, GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
					// 縛りを満たさないか、振聴のとき
					if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) <= getShibari(GameStat))||(FuritenFlag == 1)||(getDoujunFuriten(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)||((getRule(RULE_RIICHI_SHIBARI) != 0)&&(getRichiFlag(GameStat, RICHI_FLAG, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == RIICHI_NO))) {
						RoundEndType = ENDKYOKU_CHONBO // チョンボにする
					}
				} else {
					continue cnt
				}
			}
		}
		if (getTsumoAgariFlag(GameStat) == 1) {break}
	loop

	repeat NUM_OF_PLAYERS-1
		setDoraPointer GameStat, origDoraPointer
		switch getRule(RULE_MULTIPLE_MAHJONG)
			case 0: case 1:
				if (cnt > 0) {break}
				swbreak
			case 2: case 3:
				if (cnt > 1) {break}
				swbreak
		swend
		if (cnt == 0) {
			setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, FirstAgariPlayer
			if (getTsumoAgariFlag(GameStat) == 0) {
				RoundEndType = ENDKYOKU_AGARI
				setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
				setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getCurrentDiscard(GameStat, CURRENTDISCARD_REDTILE)
				countyaku GameStat, yakuInfo, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
				chkfuriten FuritenFlag, MachihaiFlag, MachihaiCount, MachihaiTotal, MachiMen, GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
				// 縛りを満たさないか、振聴のとき
				if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) <= getShibari(GameStat))||(FuritenFlag == 1)||(getDoujunFuriten(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)||((getRule(RULE_RIICHI_SHIBARI) != 0)&&(getRichiFlag(GameStat, RICHI_FLAG, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == RIICHI_NO))) {
					RoundEndType = ENDKYOKU_CHONBO // チョンボにする
				}
			} else {
				RoundEndType = ENDKYOKU_AGARI
				countyaku GameStat, yakuInfo, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
				chkfuriten FuritenFlag, MachihaiFlag, MachihaiCount, MachihaiTotal, MachiMen, GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
				if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) <= getShibari(GameStat))||((getRule(RULE_RIICHI_SHIBARI) != 0)&&(getRichiFlag(GameStat, RICHI_FLAG, getCurrentPlayer(GameStat, CURRENTPLAYER_ACTIVE)) == RIICHI_NO))) {
					RoundEndType = ENDKYOKU_CHONBO // チョンボにする
				}
			}
		}
		if (cnt > 0) {
			if (getTsumoAgariFlag(GameStat) == 0) {
				RoundEndType = ENDKYOKU_AGARI: setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, (getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)+1) \ NUM_OF_PLAYERS
				if (getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI) == getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) {break}
				if (getDeclarationFlag(GameStat, DECLARATIONFLAG_RON, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS) == 1) {
					setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
					setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getCurrentDiscard(GameStat, CURRENTDISCARD_REDTILE)
					countyaku GameStat, yakuInfo, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
					chkfuriten FuritenFlag, MachihaiFlag, MachihaiCount, MachihaiTotal, MachiMen, GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)\NUM_OF_PLAYERS
					// 縛りを満たさないか、振聴のとき
					if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) <= getShibari(GameStat))||(FuritenFlag == 1)||(getDoujunFuriten(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)||((getRule(RULE_RIICHI_SHIBARI) != 0)&&(getRichiFlag(GameStat, RICHI_FLAG, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == RIICHI_NO))) {
						RoundEndType = ENDKYOKU_CHONBO // チョンボにする
					}
				} else {
					continue cnt
				}
			}
		}
		haifualicedoraupd
		/**************/
		/* 和了成立時 */
		/**************/
		if (RoundEndType == ENDKYOKU_AGARI) {
			tmpagariflag = 1
			if ((getAgariHouki(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)||(IsRemotePlayer(GameEnv, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == -1)) {
				RoundEndType = ENDKYOKU_CHONBO // 和了り放棄時の処理→誤ロン・誤ツモとして罰符とする
			}
		}
		if (RoundEndType == ENDKYOKU_AGARI) {
			chatrecv GameStat, GameEnv
			endround_agariproc GameStat, GameEnv, ResultDesc, AgariPlayerPriority, origDoraPointer, YakuInfo, tmpAliceFlag
		}
		/**************/
		/* 錯和発生時 */
		/**************/
		if (RoundEndType == ENDKYOKU_CHONBO) {
			endround_chonboproc GameStat, GameEnv, ResultDesc
		}

		if (getTsumoAgariFlag(GameStat) == 1) {break /* ツモ和了りの時は終了 */}
		setDeposit GameStat, 0
		redrscreen: redraw 1
	loop
	RoundEndType = ENDKYOKU_CHONBO-tmpagariflag
	switch getRule(RULE_SIMULTANEOUS_MAHJONG)
		case 0:
			if (OyaAgari == -1) {setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, FirstAgariPlayer}
			else {setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, OyaAgari}
			swbreak
		case 1: setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, FirstAgariPlayer: swbreak
		case 2:
			if (OyaAgari == FirstAgariPlayer) {setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, FirstAgariPlayer+1}
			else {setCurrentPlayer GameStat, CURRENTPLAYER_AGARI, FirstAgariPlayer}
			swbreak
	swend

	switch getRule(RULE_PENALTY_NEGATIVE)
		case 1: case 2:
#ifdef SANMAT
			if ((isDobon(GameStat,PLAYER_EAST))||(isDobon(GameStat,PLAYER_SOUTH))||(isDobon(GameStat,PLAYER_WEST))) {
#else
			if ((isDobon(GameStat,PLAYER_EAST))||(isDobon(GameStat,PLAYER_SOUTH))||(isDobon(GameStat,PLAYER_WEST))||(isDobon(GameStat,PLAYER_NORTH))) {
#endif
				dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
				repeat NUM_OF_ACTUAL_PLAYERS
					if (isDobon(GameStat,cnt)) {
						PointDelta(cnt) -= 100*getRule(RULE_PENALTY_NEGATIVE)
						PointDelta(AgariPlayerPriority) += 100*getRule(RULE_PENALTY_NEGATIVE)
					}
				loop
				setCenterTitle "飛び罰符"
				putdelta PointDelta
				redraw 1: await 3000
				pointcalc GameStat, PointDelta
			}
			swbreak
		case 3: case 4: case 5:
			if (getRule(RULE_CHIP) != 0) {
#ifdef SANMAT
				if ((isDobon(GameStat,PLAYER_EAST))||(isDobon(GameStat,PLAYER_SOUTH))||(isDobon(GameStat,PLAYER_WEST))) {
#else
				if ((isDobon(GameStat,PLAYER_EAST))||(isDobon(GameStat,PLAYER_SOUTH))||(isDobon(GameStat,PLAYER_WEST))||(isDobon(GameStat,PLAYER_NORTH))) {
#endif
					dim PointDelta, NUM_OF_PLAYERS,NUM_OF_DIGIT_GROUPS
					repeat NUM_OF_ACTUAL_PLAYERS
						if (isDobon(GameStat,cnt)) {
							PointDelta(cnt) -= (getRule(RULE_PENALTY_NEGATIVE)-2)
							PointDelta(AgariPlayerPriority) += (getRule(RULE_PENALTY_NEGATIVE)-2)
						}
					loop
					setCenterTitle "飛び罰符"
					putchipdelta PointDelta
					redraw 1: await 1500
					repeat NUM_OF_PLAYERS
						addChip GameStat, cnt, PointDelta(cnt)
					loop
				}
			}
			swbreak
	swend
	return
#global

/* 和了成立時の処理 */
#module
#include "const.hsp"
#include "mjcore.hsp"
#deffunc endround_agariproc var GameStat, var GameEnv, var ResultDesc, var AgariPlayerPriority, int origDoraPointer, array YakuInfo, var tmpAliceFlag
	exportYakuPoint yakuInfo, AgariPointRaw
	if (AgariPlayerPriority == -1) {AgariPlayerPriority = getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)}
	if (ResultDesc != "") {ResultDesc += "\n"}
	tmpResultDesc = ""
	switch playerWind(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getRound(GameStat))
		case PLAYER_EAST: tmpResultDesc += "東家": swbreak
		case PLAYER_SOUTH: tmpResultDesc += "南家": swbreak
		case PLAYER_WEST: tmpResultDesc += "西家": swbreak
#ifndef SANMAT
		case PLAYER_NORTH: tmpResultDesc += "北家": swbreak
#endif
	swend
	if (getTsumoAgariFlag(GameStat)) {
		tmpResultDesc += "のツモ和了り"
	} else {
		switch playerWind(getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI), getRound(GameStat))
			case PLAYER_EAST: tmpResultDesc += "が東家からロン和了り": swbreak
			case PLAYER_SOUTH: tmpResultDesc += "が南家からロン和了り": swbreak
			case PLAYER_WEST: tmpResultDesc += "が西家からロン和了り": swbreak
#ifndef SANMAT
			case PLAYER_NORTH: tmpResultDesc += "が北家からロン和了り": swbreak
#endif
		swend
	}
	ResultDesc += tmpResultDesc
	chatappend "*** "+tmpResultDesc+"\n"
	statmes tmpResultDesc
	await 1500
	tmpDoraPointer = origDoraPointer
	AlicePointer = tmpDoraPointer-getYakuInfo(YakuInfo, YAKUINF_ALICEDORA)*2-2
	if ((getMenzen(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)&&(getRule(RULE_ALICE) != 0)) {
		setCenterTitle "アリス判定"
		repeat
			if (getDoraPointer(GameStat) <= AlicePointer) {break}
			setDoraPointer GameStat, getDoraPointer(GameStat) - 2
			dsplay@ SND_MEKURI
			redrscreen: await 1200
		loop
		setDoraPointer GameStat, tmpDoraPointer
		tmpAliceFlag = 1
	}
	bgmstop
	dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
	if (playerwind(AgariPlayer, getRound(GameStat)) == PLAYER_EAST) {
		// 親の和了り
		OyaAgari = AgariPlayer
	}
	calcAgariPoints GameStat, agariPointArray, AgariPointRaw, PointDelta, -1
	if (getRule(RULE_WAREME) != 0) {
		// 割れ目ルール
		gosub *calculateWareme
	}
	if ((getRule(RULE_WAREME) == 2)&&(getDice(GameStat, 0, 0) == getDice(GameStat, 1, 0))) {
		// サイコロがゾロ目の時はさらに倍
		gosub *calculateWareme
	}
	if (getRule(RULE_DOUKASEN) != 0) {
		// 導火線ルール
		gosub *calculateDoukasen
	}
	agariscrproc GameStat, GameEnv, yakuInfo, agariPointArray, ChipAmount, ResultDesc, tmpUraFlag /* 和了画面 */
	if ((getMenzen(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)&&(getRule(RULE_ALICE) != 0)) {
		setDoraPointer GameStat, AlicePointer
	}
	
	setCenterTitle "和了点"
	putdelta PointDelta
	redraw 1: await 1500
	pointcalc GameStat, PointDelta
	
	if ((getHonba(GameStat))&&(getRule(RULE_TSUMIBOH_RATE) != 3)) {
		dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
#ifdef SANMAT
		if (playerwind(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getRound(GameStat)) == PLAYER_EAST) {
			if (getTsumoAgariFlag(GameStat)) {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*2)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					} else {
						PointDelta(cnt) -= getHonba(GameStat)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			} else {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*2)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) {
						PointDelta(cnt) -= (getHonba(GameStat)*2)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			}
		} else {
			if (getTsumoAgariFlag(GameStat)) {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*2)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					} else {
						PointDelta(cnt) -= getHonba(GameStat)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			} else {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*2)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) {
						PointDelta(cnt) -= (getHonba(GameStat)*2)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			}
		}
#else
		if (playerwind(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getRound(GameStat)) == PLAYER_EAST) {
			if (getTsumoAgariFlag(GameStat)) {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*3)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					} else {
						PointDelta(cnt) -= getHonba(GameStat)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			} else {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*3)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) {
						PointDelta(cnt) -= (getHonba(GameStat)*3)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			}
		} else {
			if (getTsumoAgariFlag(GameStat)) {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*3)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					} else: if (playerwind(cnt, getRound(GameStat)) == PLAYER_EAST) {
						PointDelta(cnt) -= getHonba(GameStat)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					} else {
						PointDelta(cnt) -= getHonba(GameStat)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			} else {
				repeat NUM_OF_ACTUAL_PLAYERS
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
						PointDelta(cnt) += (getHonba(GameStat)*3)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
					if (cnt == getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) {
						PointDelta(cnt) -= (getHonba(GameStat)*3)*(getRule(RULE_TSUMIBOH_RATE)*2+1)
					}
				loop
			}
		}
#endif
		// 割れ目で積み棒も２倍になる
		if (getRule(RULE_WAREME) != 0) {
			// 割れ目ルール
			gosub *calculateWareme
		}
		if ((getRule(RULE_WAREME) == 2)&&(getDice(GameStat, 0, 0) == getDice(GameStat, 1, 0))) {
			// サイコロがゾロ目の時はさらに倍
			gosub *calculateWareme
		}
		// 割れ目で積み棒も２倍になる
		if (getRule(RULE_DOUKASEN) != 0) {
			// 導火線ルール
			gosub *calculateDoukasen
		}
		/* 包の場合 */
		if (isPaoAgari(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI))) {
			PaoPlayer = getPaoPlayer(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI))
			if (getTsumoAgariFlag(GameStat)) {
				repeat NUM_OF_ACTUAL_PLAYERS
					if ((PaoPlayer != cnt)&&(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI) != cnt)) {
						PointDelta(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) += PointDelta(cnt)
						PointDelta(cnt) -= PointDelta(cnt)
					}
				loop
			} else {
				repeat NUM_OF_ACTUAL_PLAYERS
					if ((PaoPlayer != cnt)&&(getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI) != cnt)&&(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI) != cnt)) {
						PointDelta(PaoPlayer) += PointDelta(cnt)
						PointDelta(cnt) -= PointDelta(cnt)
					}
				loop
			}
		}

		setCenterTitle "積棒清算"
		putdelta PointDelta
		redraw 1: await 1500
		pointcalc GameStat, PointDelta
	}
	
	if (getDeposit(GameStat)) {
		dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
		PointDelta(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), 0) += getDeposit(GameStat)*10
		
		setCenterTitle "供託清算"
		putdelta PointDelta
		redraw 1: await 1500
		pointcalc GameStat, PointDelta
	}
	
	if ((ChipAmount > 0)&&(getRule(RULE_CHIP) != 0)) {
		setCenterTitle "祝儀清算"
		gosub *chipTransfer
	}
	
	ChipAmount = 0
	if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)) >= YAKUVAL_YAKUMAN) {
		// 役満祝儀
		switch getRule(RULE_LIMITHAND_BONUS)
			case 0: ChipAmount = 5: swbreak
			case 1: ChipAmount = 10: swbreak
			case 2: ChipAmount = 3-(1*getTsumoAgariFlag(GameStat)): swbreak
			case 3: ChipAmount = 6-(2*getTsumoAgariFlag(GameStat)): swbreak
			case 4: ChipAmount = 8-(4*getTsumoAgariFlag(GameStat)): swbreak
			case 5: ChipAmount = 10-(5*getTsumoAgariFlag(GameStat)): swbreak
			case 6: ChipAmount = 2: swbreak
			case 7: ChipAmount = 5: swbreak
		swend
	}
	if ((ChipAmount > 0)&&(getRule(RULE_CHIP) != 0)) {
		setCenterTitle "役満祝儀"
		gosub *chipTransfer
	}
	/* 四馬路が北家の放銃だった場合 */
#ifndef SANMAT
	if (playerWind(getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI), getRound(GameStat)) == PLAYER_NORTH) {
		yakuname = getYakuInfo(yakuInfo, YAKUINF_YAKULIST)
		if (notesearch(yakuname, "四馬路") >= 0) {
			dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
			PointDelta(PLAYER_EAST, 0) = 10
			PointDelta(PLAYER_SOUTH, 0) = 10
			PointDelta(PLAYER_WEST, 0) = 10
			PointDelta(PLAYER_NORTH, 0) = 10
			PointDelta(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), 0) = -30
			setCenterTitle "北枕罰符"
			putdelta PointDelta
			redraw 1: await 1500
			pointcalc GameStat, PointDelta
		}
	}
#endif
	return

*chipTransfer
	dim PointDelta, NUM_OF_PLAYERS, NUM_OF_DIGIT_GROUPS
	if ((getTsumoAgariFlag(GameStat) == 0)&&(getRule(RULE_LIMITHAND_BONUS) <= 5)) {
		PointDelta(getCurrentPlayer(GameStat, CURRENTPLAYER_FURIKOMI)) = -ChipAmount
		PointDelta(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) = ChipAmount
	} else {
		PointDelta(PLAYER_EAST) = -ChipAmount
		PointDelta(PLAYER_SOUTH) = -ChipAmount
		PointDelta(PLAYER_WEST) = -ChipAmount
#ifndef SANMAT
		PointDelta(PLAYER_NORTH) = -ChipAmount
#endif
		PointDelta(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) = ChipAmount*(NUM_OF_ACTUAL_PLAYERS-1)
	}
	putchipdelta PointDelta
	redraw 1: await 1500
	repeat NUM_OF_PLAYERS
		addChip GameStat, cnt, PointDelta(cnt)
	loop
	return

*doubleAllDelta
	deltadouble PointDelta, PLAYER_EAST
	deltadouble PointDelta, PLAYER_SOUTH
	deltadouble PointDelta, PLAYER_WEST
#ifndef SANMAT
	deltadouble PointDelta, PLAYER_NORTH
#endif
	return

*calculateWareme
	if (getWareme(GameStat) == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
		// 割れ目の人が和了ったとき
		gosub *doubleAllDelta
	} else {
		// 割れ目の人以外が和了ったとき
		deltawareme PointDelta, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getWareme(GameStat)
		deltadouble PointDelta, getWareme(GameStat)
	}
	return

*calculateDoukasen
	if (getDoukasen(GameStat) == getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) {
		// 導火線の人が和了ったとき
		gosub *doubleAllDelta
	} else {
		// 導火線の人以外が和了ったとき
		deltawareme PointDelta, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getDoukasen(GameStat)
		deltadouble PointDelta, getDoukasen(GameStat)
	}
	return
#global

/* 錯和発生時の処理 */
#module
#include "const.hsp"
#include "mjcore.hsp"
#deffunc endround_chonboproc var GameStat, var GameEnv, var ResultDesc
	if (ResultDesc != "") {ResultDesc += "\n"}
	tmpResultDesc = ""
	switch playerWind(getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI), getRound(GameStat))
		case PLAYER_EAST: tmpResultDesc += "東家のチョンボ": swbreak
		case PLAYER_SOUTH: tmpResultDesc += "南家のチョンボ": swbreak
		case PLAYER_WEST: tmpResultDesc += "西家のチョンボ": swbreak
#ifndef SANMAT
		case PLAYER_NORTH: tmpResultDesc += "北家のチョンボ": swbreak
#endif
	swend
	ResultDesc += tmpResultDesc+"です"
	chatappend "*** "+tmpResultDesc+"\n"
	statmes tmpResultDesc
	await 1500
	bgmplay_norep MUS_RYUUKYOKU
	setCenterTitle "錯和"
	// 誤ロンまたは誤ツモ
	if ((getTsumoAgariFlag(GameStat) == 0)||(getTsumoAgariFlag(GameStat) == 1)) {
		if ((getPao(GameStat, PAO_PLAYER_AGARI, PAO_YAKU_MINKAN) != 1)&&(getRule(RULE_MINKAN_PAO) == 6)) {
			// 大明槓の嶺上開花禁止ルールの場合
			setCenterTitle "明槓錯和": ResultDesc += "(大明槓の嶺上牌での和了り)"
		}
		else:if ((getRichiFlag(GameStat, RICHI_FLAG, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == RIICHI_NO)&&(getRule(RULE_RIICHI_SHIBARI) != 0)) {
			// 立直縛りで立直してないなら錯和
			setCenterTitle "黙聴錯和": ResultDesc += "(ダマ聴での和了り)"
		}
		else:if ((FuritenFlag == 1)||(getDoujunFuriten(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)) {
			// 振聴なのにロンした場合は錯和
			setCenterTitle "振聴錯和": ResultDesc += "(振聴でのロン和了り)"
		}
		else:if (isTenpai(GameStat, GameEnv, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 0) {
			// 和了りが成立していない場合錯和
			setCenterTitle "不聴錯和": ResultDesc += "(成立していない和了り)"
		}
		else {
			// 役がなかった場合は錯和
			countyaku GameStat, yakuInfo, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)
			if (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) == 0) {setCenterTitle "無飜錯和": ResultDesc += "(役のない和了り)"}
			else:if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) == 1)&&(getShibari(GameStat) == 1)) {
				// 二飜縛りで１飜しかないなら錯和
				setCenterTitle "飜不足錯和": ResultDesc += "(一飜しかない和了り)"
			} else:if ((getAgariHouki(GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == 1)||(IsRemotePlayer(GameEnv, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)) == -1)) {
				// 和了り放棄なのに和了ろうとした
				setCenterTitle "和了放棄錯和": ResultDesc += "(和了り放棄適用中)"
			} else {setCenterTitle "　錯和　": ResultDesc += ""}
		}
	}
	// 誤ロン、誤ツモ以外の錯和
	if (getTsumoAgariFlag(GameStat) == AGARI_KUIKAE) {setCenterTitle "喰替錯和": ResultDesc += "(喰い替え)"} // 喰い替えをしたとき
	if (getTsumoAgariFlag(GameStat) > 1) {dsplay@ SND_PAGE} else {dsplay@ SND_CUOHU}
	redrscreen: await 5000

	transferChonboPenalty GameStat, getCurrentPlayer(GameStat, CURRENTPLAYER_AGARI)
	return
#global
