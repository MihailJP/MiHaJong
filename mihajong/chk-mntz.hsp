/*=============================
 * HSP麻雀クライアントMiHaJong
 *     [面子解析ルーチン]
 *=============================
 */

/* 順子の処理 */
#module
#include "const.hsp"
#deffunc makementsu_shuntsu \
array CountForMentsu, \
array MianziDat, \
var ProcessedTiles, \
int count
	if ((CountForMentsu(count) >= 1)&&(CountForMentsu(count+1) >= 1)&&(CountForMentsu(count+2) >= 1)) {
		MianziDat(ProcessedTiles) = count
		ProcessedTiles++
		CountForMentsu(count) -= 1
		CountForMentsu(count+1) -= 1
		CountForMentsu(count+2) -= 1
		return 1 /* 一盃口の読み飛ばし防止の為 */
	}
	return 0
#global

#module
#include "const.hsp"
#deffunc makementsu_koutsu \
array CountForMentsu, \
array MianziDat, \
var ProcessedTiles, \
int count
	if (CountForMentsu(count) >= 3) {
		MianziDat(ProcessedTiles) = MELD_TRIPLET_CONCEALED*MELD_TYPE_STEP+count
		ProcessedTiles++
		CountForMentsu(count) -= 3
	}
	return
#global

/* 面子に分解する */
#module
#include "const.hsp"
#include "struct.hsp"
#deffunc makementsu var GameStat, var tmpYakuInfo, int targetPlayer, int Atamacode, var ProcessedTiles, array MianziDat
	dim MianziDat, SIZE_OF_MELD_BUFFER // 配列を初期化する
	countTilesInHand CountForMentsu, GameStat, targetPlayer
	ProcessedTiles = 0
	// 雀頭となりうる牌なら続行
	if (CountForMentsu(AtamaCode/4) >= 2) {
		// 雀頭
		MianziDat(0) = (AtamaCode/4)
		ProcessedTiles++
		CountForMentsu(AtamaCode/4) -= 2
		// 順子(順子優先正順モードの時)
		if ((AtamaCode \ 4) == 1) {
			repeat TILE_NUMERAL_MAX-1, 1
				makementsu_shuntsu CountForMentsu, MianziDat, ProcessedTiles, cnt
				if (stat) {continue cnt} /* 一盃口の読み飛ばし防止の為 */
			loop
		}
		// 順子(順子優先逆順モードの時)
		if ((AtamaCode \ 4) == 3) {
			repeat TILE_NUMERAL_MAX-1, 1
				makementsu_shuntsu CountForMentsu, MianziDat, ProcessedTiles, TILE_NUMERAL_MAX-cnt
				if (stat) {continue cnt} /* 一盃口の読み飛ばし防止の為 */
			loop
		}
		// 暗刻(正順モードの時)
		if ((AtamaCode \ 4) <= 1) {
			repeat TILE_NONFLOWER_MAX-1, 1
				makementsu_koutsu CountForMentsu, MianziDat, ProcessedTiles, cnt
			loop
		}
		// 暗刻(逆順モードの時)
		if ((AtamaCode \ 4) >= 2) {
			repeat TILE_NONFLOWER_MAX-1, 1
				makementsu_koutsu CountForMentsu, MianziDat, ProcessedTiles, TILE_NONFLOWER_MAX-cnt
			loop
		}
		// 順子(暗刻優先正順モードの時)
		if ((AtamaCode \ 4) == 0) {
			repeat TILE_NUMERAL_MAX-1, 1
				makementsu_shuntsu CountForMentsu, MianziDat, ProcessedTiles, cnt
				if (stat) {continue cnt} /* 一盃口の読み飛ばし防止の為 */
			loop
		}
		// 順子(暗刻優先逆順モードの時)
		if ((AtamaCode \ 4) == 2) {
			repeat TILE_NUMERAL_MAX-1, 1
				makementsu_shuntsu CountForMentsu, MianziDat, ProcessedTiles, TILE_NUMERAL_MAX-cnt
				if (stat) {continue cnt} /* 一盃口の読み飛ばし防止の為 */
			loop
		}
		// 鳴いた面子、暗槓
		if (MeldPointer(GameStat, targetPlayer) > 0) {
			repeat MeldPointer(GameStat, targetPlayer), 1
				MianziDat(ProcessedTiles) = getMeld(GameStat, MELD_TILECODE, cnt, targetPlayer)
				ProcessedTiles++
			loop
		}
	}
return
#global
