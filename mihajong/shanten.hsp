/*=============================
 * HSP麻雀クライアントMiHaJong
 *    [向聴数計算ルーチン]
 *=============================
 */

/* 向聴数の計算 */
#module
#include "const.as"
#include "struct.as"
#defcfunc countshanten var GameStat, int targetPlayer, int Mode
/*
		val=countshanten(p1, p2, p3)
		向聴数を計算する

		p1 : 卓の状況を格納した構造体
		p2 : 調べるプレイヤー
		p3 : モード

		向聴数を計算します。p3の値により、特定パターンのみの向聴数を求めることもできます。
		0 : 通常
		1 : 四面子一雀頭の通常手
		2 : 七対子
		3 : 国士無双
		4 : 七星不靠
		5 : 南北戦争
		6 : 惑星直列
		7 : 全不靠
*/
#ifdef LOGGING_SHANTEN
	debug strf("向聴数を計算します。プレイヤー [%d]", targetPlayer)
#endif
	countTilesInHand TileCount, GameStat, targetPlayer
	// エラー防止のため、４枚を超える分は無視する
	repeat TILE_CODE_MAXIMUM
		if (TileCount(cnt) > 4) {
			warn strf("牌コード [%d] の数が異常です [%d] 。4枚とみなします。", cnt, TileCount(cnt))
			TileCount(cnt) = 4
		}
	loop
	
	switch Mode
		case SHANTEN_REGULAR:
			gosub *calcshanten_regular: return MianziShanten: swbreak
		case SHANTEN_PAIRS:
			gosub *calcshanten_chiitoi: return QiduiShanten: swbreak
#ifndef SANMAS
		case SHANTEN_ORPHANS:
			gosub *calcshanten_kokushi: return ShisanYaoShanten: swbreak
		case SHANTEN_STELLAR:
			gosub *calcshanten_stellar: return QixingShanten: swbreak
		case SHANTEN_CIVILWAR:
			gosub *calcshanten_civilwar: return CivilWarShanten: swbreak
#endif
		case SHANTEN_SYZYGY:
			gosub *calcshanten_syzygy: return SyzygyShanten: swbreak
#ifndef SANMAS
		case SHANTEN_QUANBUKAO:
			gosub *calcshanten_quanbukao: return QuanbukaoShanten: swbreak
#endif
		default:
			gosub *calcshanten_regular
			gosub *calcshanten_chiitoi
#ifndef SANMAS
			gosub *calcshanten_kokushi
			gosub *calcshanten_stellar
			gosub *calcshanten_civilwar
#endif
			gosub *calcshanten_syzygy
#ifndef SANMAS
			gosub *calcshanten_quanbukao
#endif
			// この結果のうち、最も少ない値が全体の向聴数となる
			// ０ならば聴牌、‐１ならば和了っている
			Shanten = MianziShanten
			if (Shanten > QiduiShanten) {Shanten = QiduiShanten}
#ifndef SANMAS
			if (Shanten > ShisanYaoShanten) {Shanten = ShisanYaoShanten}
			if (getRule(RULE_STELLAR_UUSHII) != 0) {
				if (Shanten > QixingShanten) {Shanten = QixingShanten}
			}
			if (getRule(RULE_CIVIL_WAR) != 0) {
				if (Shanten > CivilWarShanten) {Shanten = CivilWarShanten}
			}
#endif
			if (getRule(RULE_SYZYGY) != 0) {
				if (Shanten > SyzygyShanten) {Shanten = SyzygyShanten}
			}
#ifndef SANMAS
			if (getRule(RULE_QUANBUKAO) != 0) {
				if (Shanten > QuanbukaoShanten) {Shanten = QuanbukaoShanten}
			}
#endif
			return Shanten
			swbreak
	swend
	return 999
	
*calcshanten_regular
	MianziShanten = 8 // 面子手に対する向聴数は最大８向聴
	tmpMianzi = 0: tmpTarzi = 0: AtamaFlag = 0
	// 数牌それぞれの面子の数
	repeat TILE_NUMERAL_COLORS
		tmpdat = peek(MianziNumberData, TileCount(cnt*TILE_SUIT_STEP+9)*390625+TileCount(cnt*TILE_SUIT_STEP+8)*78125+TileCount(cnt*TILE_SUIT_STEP+7)*15625+TileCount(cnt*TILE_SUIT_STEP+6)*3125+TileCount(cnt*TILE_SUIT_STEP+5)*625+TileCount(cnt*TILE_SUIT_STEP+4)*125+TileCount(cnt*TILE_SUIT_STEP+3)*25+TileCount(cnt*TILE_SUIT_STEP+2)*5+TileCount(cnt*TILE_SUIT_STEP+1))
		tmpMianzi += (tmpdat\128/16)
		tmpTarzi += (tmpdat\16)
		if (tmpdat/128 == 1) {AtamaFlag = 1}
	loop
	// 字牌の面子の数…刻子か対子だけ数えればいいから楽勝！
	repeat 7
		if (TileCount(cnt+TILE_SUIT_HONORS+1) == 2) {tmpTarzi++: AtamaFlag = 1}
		if (TileCount(cnt+TILE_SUIT_HONORS+1) >= 3) {tmpMianzi++}
	loop
	// 鳴き面子や暗槓がある場合
	tmpMianzi += MeldPointer(GameStat, targetPlayer)
	
	MianziCount = 0
	if (tmpMianzi+tmpTarzi > 4) {
		// 面子多多のとき
		MianziShanten = 8 - (tmpMianzi*2) - (4-tmpMianzi)
		// 面子多多でも、頭がある時は頭も数える
		if (AtamaFlag == 1) {MianziShanten -= 1}
	} else {
		// そうでないとき
		MianziShanten = 8 - (tmpMianzi*2) - tmpTarzi
	}
#ifdef LOGGING_SHANTEN
	trace strf("面子手に対する向聴数は [%d] です。", MianziShanten)
#endif
	return

*calcshanten_chiitoi
	// 七対子に対する向聴数を求める。
	countTilesInHand TileCount, GameStat, targetPlayer
	QiduiShanten = 6
	repeat TILE_NONFLOWER_MAX
		// 単純に対子の数を調べればよい
		// ただし、同じ牌４枚を対子２つとして使ってはならない
		if (TileCount(cnt) >= 2) {
			QiduiShanten--
		}
	loop
	// 暗刻がある場合に聴牌とみなさないようにする
	repeat TILE_NONFLOWER_MAX
		if (TileCount(cnt) >= 3) {
			if (QiduiShanten < 1) {QiduiShanten++}
		}
	loop
	// 鳴き面子や暗槓がある場合は七対子は不可能
	if (MeldPointer(GameStat, targetPlayer) > 0) {
		QiduiShanten = 999
	}
#ifdef LOGGING_SHANTEN
	trace strf("七対子に対する向聴数は [%d] です。", QiduiShanten)
#endif
	return

#ifndef SANMAS
*calcshanten_kokushi
	// 国士無双に対する向聴数を求める。
	countTilesInHand TileCount, GameStat, targetPlayer
	YaojiuPai = TILE_CHARACTER_ONE, TILE_CHARACTER_NINE, TILE_CIRCLE_ONE, TILE_CIRCLE_NINE, TILE_BAMBOO_ONE, TILE_BAMBOO_NINE
	YaojiuPai(6) = TILE_EAST_WIND, TILE_SOUTH_WIND, TILE_WEST_WIND, TILE_NORTH_WIND, TILE_WHITE_DRAGON, TILE_GREEN_DRAGON, TILE_RED_DRAGON
	ShisanYaoShanten = 13: AtamaFlag = 0
	repeat 13
		// ヤオ九牌１種類につき、１をカウントする。
		if (TileCount(YaojiuPai(cnt)) >= 2) {
			AtamaFlag = 1 // アタマ候補
		}
		if (TileCount(YaojiuPai(cnt)) >= 1) {
			ShisanYaoShanten--
		}
	loop
	/* 雀頭がある場合 */
	if (AtamaFlag) {ShisanYaoShanten--}
	// 鳴き面子や暗槓がある場合は国士無双も不可能
	if (MeldPointer(GameStat, targetPlayer) > 0) {
		ShisanYaoShanten = 999
	}
#ifdef LOGGING_SHANTEN
	trace strf("国士無双に対する向聴数は [%d] です。", ShisanYaoShanten)
#endif
	return

*calcshanten_stellar
	// 特殊：七星不靠の向聴数を求める
	if (getRule(RULE_STELLAR_UUSHII) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		QixingShanten = 999
		QixingZiPai = TILE_EAST_WIND, TILE_SOUTH_WIND, TILE_WEST_WIND, TILE_NORTH_WIND, TILE_WHITE_DRAGON, TILE_GREEN_DRAGON, TILE_RED_DRAGON
		TmpQixingZiPaiCount = 0
		repeat 7
			if (TileCount(QixingZiPai(cnt)) >= 1) {
				TmpQixingZiPaiCount++
			}
		loop
		repeat 6
			switch cnt
				case 0:
					QixingPai = TILE_CHARACTER_ONE, TILE_CHARACTER_FOUR, TILE_CHARACTER_SEVEN, TILE_CIRCLE_TWO, TILE_CIRCLE_FIVE, TILE_CIRCLE_EIGHT, TILE_BAMBOO_THREE, TILE_BAMBOO_SIX, TILE_BAMBOO_NINE
				swbreak
				case 1:
					QixingPai = TILE_CHARACTER_ONE, TILE_CHARACTER_FOUR, TILE_CHARACTER_SEVEN, TILE_CIRCLE_THREE, TILE_CIRCLE_SIX, TILE_CIRCLE_NINE, TILE_BAMBOO_TWO, TILE_BAMBOO_FIVE, TILE_BAMBOO_EIGHT
				swbreak
				case 2:
					QixingPai = TILE_CHARACTER_TWO, TILE_CHARACTER_FIVE, TILE_CHARACTER_EIGHT, TILE_CIRCLE_ONE, TILE_CIRCLE_FOUR, TILE_CIRCLE_SEVEN, TILE_BAMBOO_THREE, TILE_BAMBOO_SIX, TILE_BAMBOO_NINE
				swbreak
				case 3:
					QixingPai = TILE_CHARACTER_TWO, TILE_CHARACTER_FIVE, TILE_CHARACTER_EIGHT, TILE_CIRCLE_THREE, TILE_CIRCLE_SIX, TILE_CIRCLE_NINE, TILE_BAMBOO_ONE, TILE_BAMBOO_FOUR, TILE_BAMBOO_SEVEN
				swbreak
				case 4:
					QixingPai = TILE_CHARACTER_THREE, TILE_CHARACTER_SIX, TILE_CHARACTER_NINE, TILE_CIRCLE_ONE, TILE_CIRCLE_FOUR, TILE_CIRCLE_SEVEN, TILE_BAMBOO_TWO, TILE_BAMBOO_FIVE, TILE_BAMBOO_EIGHT
				swbreak
				case 5:
					QixingPai = TILE_CHARACTER_THREE, TILE_CHARACTER_SIX, TILE_CHARACTER_NINE, TILE_CIRCLE_TWO, TILE_CIRCLE_FIVE, TILE_CIRCLE_EIGHT, TILE_BAMBOO_ONE, TILE_BAMBOO_FOUR, TILE_BAMBOO_SEVEN
				swbreak
			swend
			TmpQixingShuPaiCount = 0
			repeat 9
				if (TileCount(QixingPai(cnt)) >= 1) {
					if (TmpQixingShuPaiCount < 7) {TmpQixingShuPaiCount++}
				}
			loop
			TmpQixingShanten = 13 - TmpQixingZiPaiCount - TmpQixingShuPaiCount
			// 鳴き面子や暗槓がある場合は不可能
			if (MeldPointer(GameStat, targetPlayer) > 0) {
				TmpQixingShanten = 999
			}
			if (TmpQixingShanten < QixingShanten) {QixingShanten = TmpQixingShanten}
		loop
#ifdef LOGGING_SHANTEN
		trace strf("七星不靠に対する向聴数は [%d] です。", QixingShanten)
#endif
	}
	return

*calcshanten_civilwar
	// 特殊：南北戦争の向聴数を求める
	if (getRule(RULE_CIVIL_WAR) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		CivilWarShanten = 13
		// 以下、一枚ずつ調べる
		repeat 6
			dim TileCountTmp, TILE_CODE_MAXIMUM: repeat TILE_CODE_MAXIMUM: TileCountTmp(cnt) = TileCount(cnt): loop
			switch cnt
				case 0: CivilWarPai = TILE_CHARACTER_ONE, TILE_CHARACTER_EIGHT, TILE_CHARACTER_EIGHT, TILE_CHARACTER_ONE, TILE_CIRCLE_ONE, TILE_CIRCLE_EIGHT, TILE_CIRCLE_EIGHT, TILE_CIRCLE_FIVE, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 1: CivilWarPai = TILE_CHARACTER_ONE, TILE_CHARACTER_EIGHT, TILE_CHARACTER_EIGHT, TILE_CHARACTER_ONE, TILE_BAMBOO_ONE, TILE_BAMBOO_EIGHT, TILE_BAMBOO_EIGHT, TILE_BAMBOO_FIVE, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 2: CivilWarPai = TILE_CIRCLE_ONE, TILE_CIRCLE_EIGHT, TILE_CIRCLE_EIGHT, TILE_CIRCLE_ONE, TILE_CHARACTER_ONE, TILE_CHARACTER_EIGHT, TILE_CHARACTER_EIGHT, TILE_CHARACTER_FIVE, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 3: CivilWarPai = TILE_CIRCLE_ONE, TILE_CIRCLE_EIGHT, TILE_CIRCLE_EIGHT, TILE_CIRCLE_ONE, TILE_BAMBOO_ONE, TILE_BAMBOO_EIGHT, TILE_BAMBOO_EIGHT, TILE_BAMBOO_FIVE, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 4: CivilWarPai = TILE_BAMBOO_ONE, TILE_BAMBOO_EIGHT, TILE_BAMBOO_EIGHT, TILE_BAMBOO_ONE, TILE_CHARACTER_ONE, TILE_CHARACTER_EIGHT, TILE_CHARACTER_EIGHT, TILE_CHARACTER_FIVE, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 5: CivilWarPai = TILE_BAMBOO_ONE, TILE_BAMBOO_EIGHT, TILE_BAMBOO_EIGHT, TILE_BAMBOO_ONE, TILE_CIRCLE_ONE, TILE_CIRCLE_EIGHT, TILE_CIRCLE_EIGHT, TILE_CIRCLE_FIVE, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
			swend
			TmpCivilWarPaiCount = 0
			repeat NUM_OF_TILES_IN_HAND
				if (TileCountTmp(CivilWarPai(cnt)) >= 1) {
					TmpCivilWarPaiCount++
					TileCountTmp(CivilWarPai(cnt))--
				}
			loop
			TmpCivilWarShanten = 13 - TmpCivilWarPaiCount
			if (TmpCivilWarShanten < CivilWarShanten) {CivilWarShanten = TmpCivilWarShanten}
			// 鳴き面子や暗槓がある場合は考えない
			if (MeldPointer(GameStat, targetPlayer) > 0) {
				CivilWarShanten = 999
			}
		loop
#ifdef LOGGING_SHANTEN
		trace strf("南北戦争に対する向聴数は [%d] です。", CivilWarShanten)
#endif
	}
	return
#endif

*calcshanten_syzygy
	// 特殊：惑星直列の向聴数を求める
	if (getRule(RULE_SYZYGY) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		SyzygyShanten = 13
		// 以下、一枚ずつ調べる
		dim TileCountTmp, TILE_CODE_MAXIMUM: repeat TILE_CODE_MAXIMUM: TileCountTmp(cnt) = TileCount(cnt): loop
		SyzygyPai = TILE_CIRCLE_ONE,TILE_CIRCLE_ONE,TILE_CIRCLE_TWO,TILE_CIRCLE_THREE,TILE_CIRCLE_THREE,TILE_CIRCLE_FOUR,TILE_CIRCLE_FIVE,TILE_CIRCLE_FIVE,TILE_CIRCLE_SIX,TILE_CIRCLE_SEVEN,TILE_CIRCLE_SEVEN,TILE_CIRCLE_EIGHT,TILE_CIRCLE_NINE,TILE_CIRCLE_NINE
		TmpSyzygyPaiCount = 0
		repeat NUM_OF_TILES_IN_HAND
			if (TileCountTmp(SyzygyPai(cnt)) >= 1) {
				TmpSyzygyPaiCount++
				TileCountTmp(SyzygyPai(cnt))--
			}
		loop
		TmpSyzygyShanten = 13 - TmpSyzygyPaiCount
		if (TmpSyzygyShanten < SyzygyShanten) {SyzygyShanten = TmpSyzygyShanten}
		// 鳴き面子や暗槓がある場合は考えない
		if (MeldPointer(GameStat, targetPlayer) > 0) {
			SyzygyShanten = 999
		}
#ifdef LOGGING_SHANTEN
		trace strf("惑星直列に対する向聴数は [%d] です。", SyzygyShanten)
#endif
	}
	return

#ifndef SANMAS
*calcshanten_quanbukao
	// 特殊：全不靠の向聴数を求める
	if (getRule(RULE_QUANBUKAO) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		QuanbukaoShanten = 999
		QixingZiPai = TILE_EAST_WIND, TILE_SOUTH_WIND, TILE_WEST_WIND, TILE_NORTH_WIND, TILE_WHITE_DRAGON, TILE_GREEN_DRAGON, TILE_RED_DRAGON
		TmpQixingZiPaiCount = 0
		repeat 7
			if (TileCount(QixingZiPai(cnt)) >= 1) {
				TmpQixingZiPaiCount++
			}
		loop
		repeat 6
			switch cnt
				case 0:
					QixingPai = TILE_CHARACTER_ONE, TILE_CHARACTER_FOUR, TILE_CHARACTER_SEVEN, TILE_CIRCLE_TWO, TILE_CIRCLE_FIVE, TILE_CIRCLE_EIGHT, TILE_BAMBOO_THREE, TILE_BAMBOO_SIX, TILE_BAMBOO_NINE
				swbreak
				case 1:
					QixingPai = TILE_CHARACTER_ONE, TILE_CHARACTER_FOUR, TILE_CHARACTER_SEVEN, TILE_CIRCLE_THREE, TILE_CIRCLE_SIX, TILE_CIRCLE_NINE, TILE_BAMBOO_TWO, TILE_BAMBOO_FIVE, TILE_BAMBOO_EIGHT
				swbreak
				case 2:
					QixingPai = TILE_CHARACTER_TWO, TILE_CHARACTER_FIVE, TILE_CHARACTER_EIGHT, TILE_CIRCLE_ONE, TILE_CIRCLE_FOUR, TILE_CIRCLE_SEVEN, TILE_BAMBOO_THREE, TILE_BAMBOO_SIX, TILE_BAMBOO_NINE
				swbreak
				case 3:
					QixingPai = TILE_CHARACTER_TWO, TILE_CHARACTER_FIVE, TILE_CHARACTER_EIGHT, TILE_CIRCLE_THREE, TILE_CIRCLE_SIX, TILE_CIRCLE_NINE, TILE_BAMBOO_ONE, TILE_BAMBOO_FOUR, TILE_BAMBOO_SEVEN
				swbreak
				case 4:
					QixingPai = TILE_CHARACTER_THREE, TILE_CHARACTER_SIX, TILE_CHARACTER_NINE, TILE_CIRCLE_ONE, TILE_CIRCLE_FOUR, TILE_CIRCLE_SEVEN, TILE_BAMBOO_TWO, TILE_BAMBOO_FIVE, TILE_BAMBOO_EIGHT
				swbreak
				case 5:
					QixingPai = TILE_CHARACTER_THREE, TILE_CHARACTER_SIX, TILE_CHARACTER_NINE, TILE_CIRCLE_TWO, TILE_CIRCLE_FIVE, TILE_CIRCLE_EIGHT, TILE_BAMBOO_ONE, TILE_BAMBOO_FOUR, TILE_BAMBOO_SEVEN
				swbreak
			swend
			TmpQixingShuPaiCount = 0
			repeat 9
				if (TileCount(QixingPai(cnt)) >= 1) {
					TmpQixingShuPaiCount++
				}
			loop
			TmpQuanbukaoShanten = 13 - TmpQixingZiPaiCount - TmpQixingShuPaiCount
			// 鳴き面子や暗槓がある場合は不可能
			if (MeldPointer(GameStat, targetPlayer) > 0) {
				TmpQuanbukaoShanten = 999
			}
			if (TmpQuanbukaoShanten < QuanbukaoShanten) {QuanbukaoShanten = TmpQuanbukaoShanten}
		loop
#ifdef LOGGING_SHANTEN
		trace strf("全不靠に対する向聴数は [%d] です。", QuanbukaoShanten)
#endif
	}
	return
#endif

// 行番号がおかしくなるので最後に移動
#deffunc shantenInit
/*
		shantenInit
		向聴計算用のデータを初期化する

		向聴計算用のデータを読み込みます。
*/

	exist "data\\mentz.dat.lzma"
	CompressedSize = strsize
	if (CompressedSize == -1) {
		errordlg "面子構成データベースが見つかりませんでした。", "404"
		fatal "面子構成データベース(data\\mentz.dat.lzma)が見つかりませんでした。"
		goto *cleanup@
	}
	sdim CompressedMianziBinary, CompressedSize+128
	bload "data\\mentz.dat.lzma", CompressedMianziBinary, CompressedSize
	info "面子構成データベースを読み込みました。"
	sdim MianziNumberData, 1953126
	lzmadecompress@ MianziNumberData, 1953125, CompressedMianziBinary, CompressedSize
	if (stat) {
		errordlg "面子構成データベースの圧縮を解除できませんでした。ファイルが壊れている虞があります。", "LZMA Error"
		fatal strf("面子構成データベースの圧縮を解除できませんでした。返り値は [%d] です。", stat)
		goto *cleanup@
	} else {
		info "面子構成データベースの圧縮を解除しました。"
	}
	hash = ""+sha256sum(MianziNumberData, 1953125)
	if (hash != "2d107e8885add7e01fec65fa6906337abae9f76cfb6fc2e898cafe17aa7b51c1") {
		errordlg "面子構成データベースのハッシュ値が一致しませんでした。ファイルが壊れている虞があります。\n返り値は [%d] です。", "Hash mismatch"
		fatal strf("面子構成データベースのハッシュ値が一致しませんでした。SHA-256 ハッシュ値は [%s] で、 [%s] と異なります。", hash, "2d107e8885add7e01fec65fa6906337abae9f76cfb6fc2e898cafe17aa7b51c1")
		goto *cleanup@
	} else {
		info "SHA-256 ハッシュ値の照合に成功しました。"
	}
	//bload "dat\\mentz.dat", MianziNumberData, 1953125
	return
#global

