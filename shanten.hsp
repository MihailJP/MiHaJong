/*=============================
 * HSP麻雀クライアントMiHaJong
 *    [向聴数計算ルーチン]
 *=============================
 */

/* 向聴数の計算 */
#module
#include "const.as"
#defcfunc countshanten var GameStat, int targetPlayer, int Mode
/*
		val=countshanten(p1, p2, p3)
		向聴数を計算する

		p1 : 卓の状況を格納した構造体
		p2 : 調べるプレイヤー
		p3 : モード

		向聴数を計算します。p3の値により、特定パターンのみの向聴数を求めることもできます。
		0 : 通常
		1 : 四面子一雀頭の通常手
		2 : 七対子
		3 : 国士無双
		4 : 七星不靠
		5 : 南北戦争
		6 : 惑星直列
*/
#ifdef LOGGING_SHANTEN
	debug strf("向聴数を計算します。プレイヤー [%d]", targetPlayer)
#endif
	countTilesInHand TileCount, GameStat, targetPlayer
	// エラー防止のため、４枚を超える分は無視する
	repeat TILE_CODE_MAXIMUM
		if (TileCount(cnt) > 4) {
			warn strf("牌コード [%d] の数が異常です [%d] 。4枚とみなします。", cnt, TileCount(cnt))
			TileCount(cnt) = 4
		}
	loop
	
	switch Mode
		case SHANTEN_REGULAR:
			gosub *calcshanten_regular: return MianziShanten: swbreak
		case SHANTEN_PAIRS:
			gosub *calcshanten_chiitoi: return QiduiShanten: swbreak
		case SHANTEN_ORPHANS:
			gosub *calcshanten_kokushi: return ShisanYaoShanten: swbreak
		case SHANTEN_STELLAR:
			gosub *calcshanten_stellar: return QixingShanten: swbreak
		case SHANTEN_CIVILWAR:
			gosub *calcshanten_civilwar: return CivilWarShanten: swbreak
		case SHANTEN_SYZYGY:
			gosub *calcshanten_syzygy: return SyzygyShanten: swbreak
		default:
			gosub *calcshanten_regular
			gosub *calcshanten_chiitoi
			gosub *calcshanten_kokushi
			gosub *calcshanten_stellar
			gosub *calcshanten_civilwar
			gosub *calcshanten_syzygy
			// この結果のうち、最も少ない値が全体の向聴数となる
			// ０ならば聴牌、−１ならば和了っている
			Shanten = MianziShanten
			if (Shanten > QiduiShanten) {Shanten = QiduiShanten}
			if (Shanten > ShisanYaoShanten) {Shanten = ShisanYaoShanten}
			if (getRule(RULE_STELLAR_UUSHII) != 0) {
				if (Shanten > QixingShanten) {Shanten = QixingShanten}
			}
			if (getRule(RULE_CIVIL_WAR) != 0) {
				if (Shanten > CivilWarShanten) {Shanten = CivilWarShanten}
			}
			if (getRule(RULE_SYZYGY) != 0) {
				if (Shanten > SyzygyShanten) {Shanten = SyzygyShanten}
			}
			return Shanten
			swbreak
	swend
	return 999
	
*calcshanten_regular
	MianziShanten = 8 // 面子手に対する向聴数は最大８向聴
	tmpMianzi = 0: tmpTarzi = 0: AtamaFlag = 0
	// 数牌それぞれの面子の数
	repeat TILE_NUMERAL_COLORS
		tmpdat = peek(MianziNumberData, TileCount(cnt*TILE_SUIT_STEP+9)*390625+TileCount(cnt*TILE_SUIT_STEP+8)*78125+TileCount(cnt*TILE_SUIT_STEP+7)*15625+TileCount(cnt*TILE_SUIT_STEP+6)*3125+TileCount(cnt*TILE_SUIT_STEP+5)*625+TileCount(cnt*TILE_SUIT_STEP+4)*125+TileCount(cnt*TILE_SUIT_STEP+3)*25+TileCount(cnt*TILE_SUIT_STEP+2)*5+TileCount(cnt*TILE_SUIT_STEP+1))
		tmpMianzi += (tmpdat\128/16)
		tmpTarzi += (tmpdat\16)
		if (tmpdat/128 == 1) {AtamaFlag = 1}
	loop
	// 字牌の面子の数…刻子か対子だけ数えればいいから楽勝！
	repeat 7
		if (TileCount(cnt+TILE_SUIT_HONORS+1) == 2) {tmpTarzi++: AtamaFlag = 1}
		if (TileCount(cnt+TILE_SUIT_HONORS+1) >= 3) {tmpMianzi++}
	loop
	// 鳴き面子や暗槓がある場合
	tmpMianzi += MeldPointer(GameStat, targetPlayer)
	
	MianziCount = 0
	if (tmpMianzi+tmpTarzi > 4) {
		// 面子多多のとき
		MianziShanten = 8 - (tmpMianzi*2) - (4-tmpMianzi)
		// 面子多多でも、頭がある時は頭も数える
		if (AtamaFlag == 1) {MianziShanten -= 1}
	} else {
		// そうでないとき
		MianziShanten = 8 - (tmpMianzi*2) - tmpTarzi
	}
#ifdef LOGGING_SHANTEN
	trace strf("面子手に対する向聴数は [%d] です。", MianziShanten)
#endif
	return

*calcshanten_chiitoi
	// 七対子に対する向聴数を求める。
	countTilesInHand TileCount, GameStat, targetPlayer
	QiduiShanten = 6
	repeat TILE_NONFLOWER_MAX
		// 単純に対子の数を調べればよい
		// ただし、同じ牌４枚を対子２つとして使ってはならない
		if (TileCount(cnt) >= 2) {
			QiduiShanten--
		}
	loop
	// 暗刻がある場合に聴牌とみなさないようにする
	repeat TILE_NONFLOWER_MAX
		if (TileCount(cnt) >= 3) {
			if (QiduiShanten < 1) {QiduiShanten++}
		}
	loop
	// 鳴き面子や暗槓がある場合は七対子は不可能
	if (MeldPointer(GameStat, targetPlayer) > 0) {
		QiduiShanten = 999
	}
#ifdef LOGGING_SHANTEN
	trace strf("七対子に対する向聴数は [%d] です。", QiduiShanten)
#endif
	return

*calcshanten_kokushi
	// 国士無双に対する向聴数を求める。
	countTilesInHand TileCount, GameStat, targetPlayer
	YaojiuPai = TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+9, TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+9, TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+9
	YaojiuPai(6) = TILE_EAST_WIND, TILE_SOUTH_WIND, TILE_WEST_WIND, TILE_NORTH_WIND, TILE_WHITE_DRAGON, TILE_GREEN_DRAGON, TILE_RED_DRAGON
	ShisanYaoShanten = 13: AtamaFlag = 0
	repeat 13
		// ヤオ九牌１種類につき、１をカウントする。
		if (TileCount(YaojiuPai(cnt)) >= 2) {
			AtamaFlag = 1 // アタマ候補
		}
		if (TileCount(YaojiuPai(cnt)) >= 1) {
			ShisanYaoShanten--
		}
	loop
	/* 雀頭がある場合 */
	if (AtamaFlag) {ShisanYaoShanten--}
	// 鳴き面子や暗槓がある場合は国士無双も不可能
	if (MeldPointer(GameStat, targetPlayer) > 0) {
		ShisanYaoShanten = 999
	}
#ifdef LOGGING_SHANTEN
	trace strf("国士無双に対する向聴数は [%d] です。", ShisanYaoShanten)
#endif
	return

*calcshanten_stellar
	// 特殊：七星不靠の向聴数を求める
	if (getRule(RULE_STELLAR_UUSHII) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		QixingShanten == 999
		QixingZiPai = TILE_EAST_WIND, TILE_SOUTH_WIND, TILE_WEST_WIND, TILE_NORTH_WIND, TILE_WHITE_DRAGON, TILE_GREEN_DRAGON, TILE_RED_DRAGON
		TmpQixingZiPaiCount = 0
		repeat 7
			if (TileCount(QixingZiPai(cnt)) >= 1) {
				TmpQixingZiPaiCount++
			}
		loop
		repeat 6
			switch cnt
				case 0:
					QixingPai = TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+4, TILE_SUIT_CHARACTERS+7, TILE_SUIT_CIRCLES+2, TILE_SUIT_CIRCLES+5, TILE_SUIT_CIRCLES+8, TILE_SUIT_BAMBOOS+3, TILE_SUIT_BAMBOOS+6, TILE_SUIT_BAMBOOS+9
				swbreak
				case 1:
					QixingPai = TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+4, TILE_SUIT_CHARACTERS+7, TILE_SUIT_CIRCLES+3, TILE_SUIT_CIRCLES+6, TILE_SUIT_CIRCLES+9, TILE_SUIT_BAMBOOS+2, TILE_SUIT_BAMBOOS+5, TILE_SUIT_BAMBOOS+8
				swbreak
				case 2:
					QixingPai = TILE_SUIT_CHARACTERS+2, TILE_SUIT_CHARACTERS+5, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+4, TILE_SUIT_CIRCLES+7, TILE_SUIT_BAMBOOS+3, TILE_SUIT_BAMBOOS+6, TILE_SUIT_BAMBOOS+9
				swbreak
				case 3:
					QixingPai = TILE_SUIT_CHARACTERS+2, TILE_SUIT_CHARACTERS+5, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CIRCLES+3, TILE_SUIT_CIRCLES+6, TILE_SUIT_CIRCLES+9, TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+4, TILE_SUIT_BAMBOOS+7
				swbreak
				case 4:
					QixingPai = TILE_SUIT_CHARACTERS+3, TILE_SUIT_CHARACTERS+6, TILE_SUIT_CHARACTERS+9, TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+4, TILE_SUIT_CIRCLES+7, TILE_SUIT_BAMBOOS+2, TILE_SUIT_BAMBOOS+5, TILE_SUIT_BAMBOOS+8
				swbreak
				case 5:
					QixingPai = TILE_SUIT_CHARACTERS+3, TILE_SUIT_CHARACTERS+6, TILE_SUIT_CHARACTERS+9, TILE_SUIT_CIRCLES+2, TILE_SUIT_CIRCLES+5, TILE_SUIT_CIRCLES+8, TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+4, TILE_SUIT_BAMBOOS+7
				swbreak
			swend
			TmpQixingShuPaiCount = 0
			repeat 9
				if (TileCount(QixingPai(cnt)) >= 1) {
					if (TmpQixingShuPaiCount < 7) {TmpQixingShuPaiCount++}
				}
			loop
			TmpQixingShanten = 13 - TmpQixingZiPaiCount - TmpQixingShuPaiCount
			// 鳴き面子や暗槓がある場合は不可能
			if (MeldPointer(GameStat, targetPlayer) > 0) {
				TmpQixingShanten = 999
			}
			if (TmpQixingShanten < QixingShanten) {QixingShanten = TmpQixingShanten}
		loop
#ifdef LOGGING_SHANTEN
		trace strf("七星不靠に対する向聴数は [%d] です。", QixingShanten)
#endif
	}
	return

*calcshanten_civilwar
	// 特殊：南北戦争の向聴数を求める
	if (getRule(RULE_CIVIL_WAR) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		CivilWarShanten = 13
		// 以下、一枚ずつ調べる
		repeat 6
			dim TileCountTmp, TILE_CODE_MAXIMUM: repeat TILE_CODE_MAXIMUM: TileCountTmp(cnt) = TileCount(cnt): loop
			switch cnt
				case 0: CivilWarPai = TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+1, TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+5, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 1: CivilWarPai = TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+1, TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+5, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 2: CivilWarPai = TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+1, TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+5, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 3: CivilWarPai = TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+1, TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+5, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 4: CivilWarPai = TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+1, TILE_SUIT_CHARACTERS+1, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+8, TILE_SUIT_CHARACTERS+5, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
				case 5: CivilWarPai = TILE_SUIT_BAMBOOS+1, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+8, TILE_SUIT_BAMBOOS+1, TILE_SUIT_CIRCLES+1, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+8, TILE_SUIT_CIRCLES+5, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_SOUTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND, TILE_NORTH_WIND: swbreak
			swend
			TmpCivilWarPaiCount = 0
			repeat NUM_OF_TILES_IN_HAND
				if (TileCountTmp(CivilWarPai(cnt)) >= 1) {
					TmpCivilWarPaiCount++
					TileCountTmp(CivilWarPai(cnt))--
				}
			loop
			TmpCivilWarShanten = 13 - TmpCivilWarPaiCount
			if (TmpCivilWarShanten < CivilWarShanten) {CivilWarShanten = TmpCivilWarShanten}
			// 鳴き面子や暗槓がある場合は考えない
			if (MeldPointer(GameStat, targetPlayer) > 0) {
				CivilWarShanten = 999
			}
		loop
#ifdef LOGGING_SHANTEN
		trace strf("南北戦争に対する向聴数は [%d] です。", CivilWarShanten)
#endif
	}
	return

*calcshanten_syzygy
	// 特殊：惑星直列の向聴数を求める
	if (getRule(RULE_SYZYGY) != 0) {
		countTilesInHand TileCount, GameStat, targetPlayer
		SyzygyShanten = 13
		// 以下、一枚ずつ調べる
		dim TileCountTmp, TILE_CODE_MAXIMUM: repeat TILE_CODE_MAXIMUM: TileCountTmp(cnt) = TileCount(cnt): loop
		SyzygyPai = TILE_SUIT_CIRCLES+1,TILE_SUIT_CIRCLES+1,TILE_SUIT_CIRCLES+2,TILE_SUIT_CIRCLES+3,TILE_SUIT_CIRCLES+3,TILE_SUIT_CIRCLES+4,TILE_SUIT_CIRCLES+5,TILE_SUIT_CIRCLES+5,TILE_SUIT_CIRCLES+6,TILE_SUIT_CIRCLES+7,TILE_SUIT_CIRCLES+7,TILE_SUIT_CIRCLES+8,TILE_SUIT_CIRCLES+9,TILE_SUIT_CIRCLES+9
		TmpSyzygyPaiCount = 0
		repeat NUM_OF_TILES_IN_HAND
			if (TileCountTmp(SyzygyPai(cnt)) >= 1) {
				TmpSyzygyPaiCount++
				TileCountTmp(SyzygyPai(cnt))--
			}
		loop
		TmpSyzygyShanten = 13 - TmpSyzygyPaiCount
		if (TmpSyzygyShanten < SyzygyShanten) {SyzygyShanten = TmpSyzygyShanten}
		// 鳴き面子や暗槓がある場合は考えない
		if (MeldPointer(GameStat, targetPlayer) > 0) {
			SyzygyShanten = 999
		}
#ifdef LOGGING_SHANTEN
		trace strf("惑星直列に対する向聴数は [%d] です。", SyzygyShanten)
#endif
	}
	return

// 行番号がおかしくなるので最後に移動
#deffunc shantenInit
/*
		shantenInit
		向聴計算用のデータを初期化する

		向聴計算用のデータを読み込みます。
*/
	CompressedMianziDat = {"
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
wA==
"}
	sdim CompressedMianziB64, 17100
	notesel CompressedMianziDat
	repeat notemax
		noteget tmpline, cnt
		CompressedMianziB64 += tmpline
	loop
	noteunsel
	/* デコードに失敗するとクラッシュするのでそれを避けるための処理 */
	b64allowedChar = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	sdim CompressedMianziBinary, 12485
	if strlen(CompressedMianziB64)\4 {fatal "BASE64の文字数が4の倍数ではありません。": stop}
	info "BASE64をデコードしています。"
	repeat strlen(CompressedMianziB64)/4
		tmppos = cnt
		tmpstr = strmid(CompressedMianziB64, cnt*4, 4)
		sdim tmpchr, 4, 4: repeat 4: tmpchr(cnt) = strmid(tmpstr, cnt, 1): loop
		dim tmpbt, 4: repeat 4:
			tmpbt(cnt) = instr(b64allowedChar, 0, tmpchr(cnt))
			if (tmppos == (strlen(CompressedMianziB64)/4-1)) {
				if (cnt==2)&&(tmpchr(2)=="=")&&(tmpchr(3)=="=") {break}
				if (cnt==3)&&(tmpchr(3)=="=") {break}
			}
			if (tmpbt(cnt) == -1) {fatal strf("BASE64として正しくない文字 [%s] が含まれています。", tmpchr(cnt)): stop}
		loop
		poke CompressedMianziBinary, cnt*3, tmpbt(0)*4+tmpbt(1)/16
		if (tmpchr(2)!="=") {poke CompressedMianziBinary, cnt*3+1, tmpbt(1)\16*16+tmpbt(2)/4}
		if (tmpchr(3)!="=") {poke CompressedMianziBinary, cnt*3+2, tmpbt(2)\4*64+tmpbt(3)}
		await 0
	loop
	info "面子構成データベースをBASE64デコードしました。"
	sdim MianziNumberData, 1953126
	lzmadecompress@ MianziNumberData, 1953125, CompressedMianziBinary, 12484
	if (stat) {
		fatal strf("面子構成データベースの圧縮を解除できませんでした。返り値は [%d] です。", stat)
		stop
	} else {
		info "面子構成データベースの圧縮を解除しました。"
	}
	//bload "dat\\mentz.dat", MianziNumberData, 1953125
	return
#global

