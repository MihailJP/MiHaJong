/*=============================
 * HSP麻雀クライアントMiHaJong
 *    [一色手判定ルーチン]
 *=============================
 */
/* 一色系などの役 */
#module
#include "const.as"
#deffunc suityaku var GameStat, var tmpYakuInfo, array haiMianziDat, int targetPlayer, int haiFuriten
	trace "一色系の処理に入ります。"
	WanzMian = 0: PinzMian = 0: SouzMian = 0: ZiMian = 0
#ifdef ALLSANMA
	WindMian = 0: DragonMian = 0
#endif
	Cifr = 0
	repeat SIZE_OF_MELD_BUFFER
		switch (haiMianziDat(cnt) \ TILE_CODE_MAXIMUM / TILE_SUIT_STEP) * TILE_SUIT_STEP
			case TILE_SUIT_CHARACTERS: WanzMian++: swbreak
			case TILE_SUIT_CIRCLES: PinzMian++: swbreak
			case TILE_SUIT_BAMBOOS: SouzMian++: swbreak
#ifndef SANMAS
			case TILE_SUIT_HONORS: ZiMian++: swbreak
#endif
		swend
#ifdef ALLSANMA
		if (((haiMianziDat(cnt) \ TILE_CODE_MAXIMUM) >= TILE_WIND_MIN)&&((haiMianziDat(cnt) \ TILE_CODE_MAXIMUM) <= TILE_WIND_MAX)) {
			WindMian++
		}
		if (((haiMianziDat(cnt) \ TILE_CODE_MAXIMUM) >= TILE_DRAGON_MIN)&&((haiMianziDat(cnt) \ TILE_CODE_MAXIMUM) <= TILE_DRAGON_MAX)) {
			DragonMian++
		}
#endif
		if (haiMianziDat(cnt) \ TILE_CODE_MAXIMUM < TILE_NUMERAL_MAX) {
			if (cnt == 0) {
				Cifr += (haiMianziDat(0) \ TILE_SUIT_STEP) * 2
			} else {
				switch (haiMianziDat(cnt) / MELD_TYPE_STEP)
					case MELD_SEQUENCE_CONCEALED: case MELD_SEQUENCE_EXPOSED_LOWER: case MELD_SEQUENCE_EXPOSED_MIDDLE: case MELD_SEQUENCE_EXPOSED_UPPER:
						Cifr += (((haiMianziDat(cnt) \ TILE_SUIT_STEP)+1) * 3)
					swbreak
					case MELD_TRIPLET_CONCEALED: case MELD_TRIPLET_EXPOSED_LEFT: case MELD_TRIPLET_EXPOSED_CENTER: case MELD_TRIPLET_EXPOSED_RIGHT:
						Cifr += ((haiMianziDat(cnt) \ TILE_SUIT_STEP) * 3)
					swbreak
					default:
						Cifr += ((haiMianziDat(cnt) \ TILE_SUIT_STEP) * 4)
					swbreak
				swend
			}
		}
	loop
	if (((WanzMian+Zimian) == SIZE_OF_MELD_BUFFER)||((PinzMian+Zimian) == SIZE_OF_MELD_BUFFER)||((SouzMian+Zimian) == SIZE_OF_MELD_BUFFER)) {
#ifndef SANMAS
		if (Zimian == 0) {
#endif
			if (getRuleInt(RULE_CHINIISOH) != 0) {
				addyaku tmpYakuInfo, "清一色", 3+getMenzen(GameStat, targetPlayer)
			} else {
				addyaku tmpYakuInfo, "清一色", 5+getMenzen(GameStat, targetPlayer)
			}
			if (getMenzen(GameStat, targetPlayer) == 1) {
				/* 門清前提の役を判定する */
				tmpRuleCodeList = -1, RULE_DAISHARIN, RULE_DAICHIKURIN, RULE_DAISUURIN, RULE_PI, RULE_SQUARE_ROOT_TWO, RULE_NATURAL_LOGARITHM, RULE_IMAGINARY_NUMBER, RULE_SQUARE_ROOT_TEN, RULE_QINGHAIHU, RULE_QINGHAIHU
				tmpHaishikiList = "311111113", "022222220", "022222220", "022222220", "211131113", "323211100", "130110141", "111022411", "222004310", "422000222", "222000224"
				sdim tmpYakuNameList, 16, length(tmpRuleCodeList)
				tmpYakuNameList = "九蓮宝燈", "大車輪", "大竹林", "大数隣", "円周率和", "√２和", "自然対数の底", "虚数和", "√１０和", "清海湖", "清海湖"
				
				repeat length(tmpRuleCodeList)
					ruleEnabled = 0
					if (tmpRuleCodeList(cnt) == -1) {ruleEnabled = 1}
					else: if (tmpRuleCodeList(cnt) != "0") {ruleEnabled = 1}
					if (ruleEnabled != "0") {
						countTilesInHand haiCount, GameStat, targetPlayer
						yakuFlag = 0
						repeat 3
							if ((tmpYakuNameList == "大車輪")&&(cnt != TILE_SUIT_CIRCLES/TILE_SUIT_STEP)) {continue}
							if ((tmpYakuNameList == "大竹林")&&(cnt != TILE_SUIT_BAMBOOS/TILE_SUIT_STEP)) {continue}
							if ((tmpYakuNameList == "大数隣")&&(cnt != TILE_SUIT_CHARACTERS/TILE_SUIT_STEP)) {continue}
							tmpcnt = cnt
							subFlag = 0
							repeat 9, 1
								if (haiCount(tmpcnt*TILE_SUIT_STEP+cnt) >= (int(strmid(tmpHaishikiList(tmpcnt), cnt-1, 1)))) {subFlag++}
							loop
							if (subFlag = 9) {yakuFlag = 1}
						loop
						if (yakuFlag) {
							tmpyakumanRate = 1
							if (tmpYakuNameList(cnt) == "九蓮宝燈") {
								countTilesInHand haiCount2, GameStat, targetPlayer
								haiCount2(getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, targetPlayer))--
								yakuFlag2 = 0
								repeat 3
									if ((haiCount(cnt*TILE_SUIT_STEP+1) >= 3)&&(haiCount(cnt*TILE_SUIT_STEP+2) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+3) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+4) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+5) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+6) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+7) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+8) >= 1)&&(haiCount(cnt*TILE_SUIT_STEP+9) >= 3)) {yakuFlag2 = 1}
								loop
								if ((getHeavenHandFlag(GameStat) == 1)&&(getRuleInt(RULE_DOUBLE_YAKUMAN) == 0)) {
									tmpActualYakuName = "純正九蓮宝燈": tmpyakumanRate = 2
								} else {
									// 振聴の時は純正扱いとしないように変更
									if ((yakuFlag2)&&(haiFuriten == 0)&&(getRuleInt(RULE_DOUBLE_YAKUMAN) == 0)) {
										tmpActualYakuName = "純正九蓮宝燈": tmpyakumanRate = 2
									} else {
										tmpActualYakuName = "九蓮宝燈": tmpyakumanRate = 1
									}
								} 
							}
							else: if (tmpYakuNameList(cnt) == "大車輪") {
								if (getRuleInt(RULE_DAISHARIN) == 2) {
									tmpActualYakuName = "大車輪": tmpyakumanRate = 2
								} else {
									tmpActualYakuName = "大車輪": tmpyakumanRate = 1
								}
								delyaku tmpYakuInfo, "平和"
							}
							else {tmpActualYakuName = tmpYakuNameList(cnt)}
							addyakuman tmpYakuInfo, tmpActualYakuName, tmpyakumanRate
							// 成立したら清一色の成立を解除する(青天井ルール用)
							delyaku tmpYakuInfo, "清一色"
						}
					}
				loop
			}
#ifndef SANMAX
			/* 百万石 */
			if (getRuleInt(RULE_KAGA_MILLION) != 0) {
				if (WanzMian == SIZE_OF_MELD_BUFFER) {
					if (Cifr == 100) {
						if (getRuleInt(RULE_KAGA_MILLION) == 2) {
							addyakuman tmpYakuInfo, "加賀百万石", 2
						} else {
							addyakuman tmpYakuInfo, "加賀百万石", 1
						}
						// 成立したら清一色と平和の成立を解除する(青天井ルール用)
						delyaku tmpYakuInfo, "清一色"
					}
					if (Cifr > 100) {
						addyakuman tmpYakuInfo, "百万石", 1
						// 成立したら清一色の成立を解除する(青天井ルール用)
						delyaku tmpYakuInfo, "清一色"
					}
				}
			}
#endif
			if (getRuleInt(RULE_PINZU_MILLION) != 0) {
				if (PinzMian == SIZE_OF_MELD_BUFFER) {
					if (Cifr >= 100) {
						addyakuman tmpYakuInfo, "筒子百万石", 1
						// 成立したら清一色の成立を解除する(青天井ルール用)
						delyaku tmpYakuInfo, "清一色"
					}
				}
			}
#ifndef SANMAX
			/* 紀州五十五万石 */
			if (getRuleInt(RULE_KISHU550K) != 0) {
				if (WanzMian == SIZE_OF_MELD_BUFFER) {
					if (Cifr == 55) {
						addyakuman tmpYakuInfo, "紀州五十五万石", 1
						// 成立したら清一色の成立を解除する(青天井ルール用)
						delyaku tmpYakuInfo, "清一色"
					}
				}
			}
			/* 水戸三十五万石 */
			if (getRuleInt(RULE_MITO350K) != 0) {
				if (WanzMian == SIZE_OF_MELD_BUFFER) {
					if (Cifr <= 35) {
						addyakuman tmpYakuInfo, "水戸三十五万石", 1
						// 成立したら清一色の成立を解除する(青天井ルール用)
						delyaku tmpYakuInfo, "清一色"
					}
				}
			}
#endif
			/* 星光燦爛 */
			if (getRuleInt(RULE_STARLIGHT) != 0) {
				if (PinzMian == SIZE_OF_MELD_BUFFER) {
					yakuFlag = 0
					repeat SIZE_OF_MELD_BUFFER-1, 1
						if ((haiMianziDat(cnt) >= MELD_TRIPLET*MELD_TYPE_STEP)&&((haiMianziDat(cnt) \ TILE_CODE_MAXIMUM) == TILE_SUIT_CIRCLES+7)) {yakuFlag = 1}
					loop
					if (yakuFlag) {
						addyaku tmpYakuInfo, "星光燦爛", 1
					}
				}
			}
#ifndef SANMAS
		} else {
			addyaku tmpYakuInfo, "混一色", 2+getMenzen(GameStat, targetPlayer)
		}
#endif
	} else {
		/* 絶一門 */
		if (getRuleInt(RULE_CHUEIIMEN) != 0) {
			if ((WanzMian == 0)||(PinzMian == 0)||(SouzMian == 0)) {
#ifndef SANMAS
				if ((Zimian == 0)||(getRuleInt(RULE_CHUEIIMEN) != 2)) {
#endif
					if (getMenzen(GameStat, targetPlayer) == 1) {
						addyaku tmpYakuInfo, "絶一門", 1
					}
#ifndef SANMAS
				}
#endif
			}
		}
	}
#ifndef SANMAS
	/* 五門斎 */
	if (getRuleInt(RULE_UUMENCHII) != 0) {
		if ((WanzMian == 1)&&(PinzMian == 1)&&(SouzMian == 1)&&(WindMian == 1)&&(DragonMian == 1)) {
			addyaku tmpYakuInfo, "五門斎", 2
		}
	}
#endif
return
#global
