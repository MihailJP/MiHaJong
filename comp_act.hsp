/*=============================
 * HSP麻雀クライアントMiHaJong
 *        [AIルーチン]
 *=============================
 */

/* 作るのが面倒なので共通のＡＩにしてます */
/* 先読みＡＩなのでたまに時間がかかる場合があります */

/* ＡＩの打牌 */
#module COMP
#include "const.as"
#define global COMTHINKTIME 600
#deffunc compdahai var GameStat, int ActivePlayer
	info strf("AIの打牌処理に入ります。プレイヤー [%d]", ActivePlayer)
	countTilesInHand TileCount, GameStat, ActivePlayer
	/*return TSUMOHAI_INDEX+DAHAI_TYPE_NORMAL*/ /* ツモ切りだけを行う(デバッグ用) */
	startTime = gettime(6)*1000+gettime(7)
	/* ここに思考ルーチンが入る */
	DiscardTileIndex = TSUMOHAI_INDEX+DAHAI_TYPE_NORMAL // ツモ切り
	if (getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer) == 0) {DiscardTileIndex = 0} // 鳴いた直後（多牌しないための処理）
	else {
		// 花牌を抜く
		repeat NUM_OF_TILES_IN_HAND
			if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) > TILE_SUIT_FLOWERS) {DiscardTileIndex = cnt+DAHAI_TYPE_KAN: break}
		loop
		if (DiscardTileIndex >= DAHAI_TYPE_KAN) {
#ifndef NOWAIT
			repeat // 時間いっぱいまで待つ
				await 0
				nowTime = gettime(6)*1000+gettime(7)
				if (nowTime < startTime) {nowTime += 60000}
				if ((nowTime-startTime) >= COMTHINKTIME) {break}
			loop
#endif
			return DiscardTileIndex
		}
	}
	if (getRichiFlag(GameStat, RICHI_FLAG, ActivePlayer)) {
		await 0 // 立直後の暗槓
		Ankanabilityflag = chkankanability(GameStat, ActivePlayer)
		if (Ankanabilityflag == 1) {
#ifndef NOWAIT
			repeat // 時間いっぱいまで待つ
				await 0
				nowTime = gettime(6)*1000+gettime(7)
				if (nowTime < startTime) {nowTime += 60000}
				if ((nowTime-startTime) >= COMTHINKTIME) {break}
			loop
#endif
			return DAHAI_TYPE_KAN+TSUMOHAI_INDEX
		}
	}
	await 0: countseentiles SeenTiles, GameStat
	Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
	if (Shanten == -1) {
		setTsumoAgariFlag GameStat, 1
		await 0: countyaku GameStat, yakuInfo, ActivePlayer
#ifndef NOWAIT
		repeat // 時間いっぱいまで待つ
			await 0
			nowTime = gettime(6)*1000+gettime(7)
			if (nowTime < startTime) {nowTime += 60000}
			if ((nowTime-startTime) >= COMTHINKTIME) {break}
		loop
#endif
		if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) <= getShibari(GameStat))||((getRule(RULE_RIICHI_SHIBARI) != 0)&&(getRichiFlag(GameStat, RICHI_FLAG, ActivePlayer) == RIICHI_NO))) {
			// 和了れないならツモ切り
			return DAHAI_TYPE_NORMAL+TSUMOHAI_INDEX
		} else {
			// 和了れるなら和了る
			return DAHAI_TYPE_AGARI
		}
	} // ツモ和了り
	// 十三不塔なら和了る
	ShisanBuDa = chkshisanbuda(GameStat, ActivePlayer): ShisiBuDa = chkshisibuda(GameStat, ActivePlayer): await 0
	if ((ShisanBuDa == 1)&&(getFirstDrawFlag(GameStat, ActivePlayer))&&(getRule(RULE_SHIISAN_PUUTAA) != 0)) {return DAHAI_TYPE_AGARI}
	if ((ShisiBuDa == 1)&&(getFirstDrawFlag(GameStat, ActivePlayer))&&(getRule(RULE_SHIISAN_UUSHII) != 0)) {return DAHAI_TYPE_AGARI}
	await 0: DaoPaiable = chkdaopaiability(GameStat, ActivePlayer)
	if (DaoPaiable) {
		// 九種九牌
		if (getFirstDrawFlag(GameStat, ActivePlayer)) {
#ifdef SANMAT
			if (((getScore(GameStat,ActivePlayer) > 400)&&(Shanten > 1))||(Shanten > 2)) {
#else
			if (((getScore(GameStat,ActivePlayer) > 300)&&(Shanten > 1))||(Shanten > 2)) {
#endif
				// 国士聴牌は流さない
				if (Shanten > 0) {
					return DAHAI_TYPE_KYUUSHU // 流局
				}
			}
		}
	}
	// リーチの場合は、和了れなければツモ切り
	if (getRichiFlag(GameStat, RICHI_FLAG, ActivePlayer)) {return DAHAI_TYPE_NORMAL+TSUMOHAI_INDEX}
	Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
	nowShanten = Shanten
	// リーチをかけるかどうか
	dim Discardability, NUM_OF_TILES_IN_HAND
	dim MinScore, NUM_OF_TILES_IN_HAND
	dim MaxScore, NUM_OF_TILES_IN_HAND
	dim MachihaiTotalTiles, NUM_OF_TILES_IN_HAND
	dim MachihaiFuritenFlag, NUM_OF_TILES_IN_HAND
	if ((nowShanten == 0)&&((getMenzen(GameStat, ActivePlayer) == 1)||(getRule(RULE_RIICHI_SHIBARI) != 0))) {
		Richiability = 0
		dim tmpHaiHand, NUM_OF_TILES_IN_HAND
		repeat NUM_OF_TILES_IN_HAND
			tmpHaiHand(cnt) = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
		loop
		repeat NUM_OF_TILES_IN_HAND
			await 0
			if (cnt > 0) {
				if (tmpHaiHand(cnt-1) == tmpHaiHand(cnt)) {
					Discardability(cnt) = Discardability(cnt-1) // 同じ牌を２度調べない
					continue
				}
			}
			TileInfo = getpaiinfo(GameStat, ActivePlayer, cnt, 0): await 0
			tmpHandTileCode = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
			// 存在しない牌の場合
			if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == 0) {Discardability(cnt) = -9999999: continue}
			// 向聴数から、大まかな評価値を算出
			setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
			setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, 0
			await 0
			chkfuriten FuritenFlag, MachihaiFlag, MachihaiCount, MachihaiTotal, MachiMen, GameStat, ActivePlayer
			Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
			setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
			setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHandTileCode
			MachihaiTotalTiles(cnt) = MachihaiTotal
			// ダブル立直になる時は一部の判定を省略する
			if (getFirstDrawFlag(GameStat, ActivePlayer) == 0) {
				// 他家のプンリーの当たり牌になっている場合は捨てない(捨ててはならない！)
				if (getOpenWait(GameStat, tmpHandTileCode) == 1) {Discardability(cnt) = -999999999: continue}
				// 空聴リーチを避ける(錯和ではないが、和了れなくなるため)
				if (MachihaiTotal == 0) {Discardability(cnt) = -999999: continue}
				// 振聴リーチを避ける(錯和ではないが、手変わりの可能性を残す)
				if (FuritenFlag == 1) {MachihaiFuritenFlag(cnt) = 1: Discardability(cnt) = -99999: continue}
				// 待ち牌が残り２枚以下の場合
				if (MachihaiTotal <= 2) {
					Discardability(cnt) = -9999: continue
				}
			}
			// 不聴立直防止用
			if (Shanten > 0) {Discardability(cnt) = -999999: continue}
			Richiability++
			
			tmpTileNum = cnt
			MinScore(cnt) = 999999999
			MaxScore(cnt) = -999999999
			repeat TILE_NONFLOWER_STRICT_MAX+1
				if (cnt\TILE_SUIT_STEP == 0) {continue}
				setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
				setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, cnt
				nowTime = gettime(6)*1000+gettime(7)
				if (nowTime < startTime) {nowTime += 60000}
				if ((nowTime-startTime) >= COMTHINKTIME) {
					repeat NUM_OF_TILES_IN_HAND
						if (Discardability(cnt) > 0) {Discardability(cnt) = 0}
					loop
					setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer)
					setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, tmpHandTileCode
					break
				}
				await 0
				Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
				if (Shanten == -1) {
					// ここで計算されるのはダマ聴で自摸和のときの点数
					setTsumoAgariFlag GameStat, 1: await 0: countyaku GameStat, yakuInfo, ActivePlayer
					if (Discardability(tmpTileNum) >= 10000) {Discardability(tmpTileNum) -= 10000}
					Discardability(tmpTileNum) += getYakuInfo(yakuInfo, YAKUINF_POINTS+0)*(4-TileCount(cnt)-SeenTiles(cnt))+100000
					if (MinScore(tmpTileNum) > (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))) {MinScore(tmpTileNum) = (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))}
					if (MaxScore(tmpTileNum) < (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))) {MaxScore(tmpTileNum) = (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))}
				}
				setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer)
				setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, tmpHandTileCode
				if (MinScore(tmpTileNum) == 999999999) {MinScore(tmpTileNum) = 0}
				if (MaxScore(tmpTileNum) ==-999999999) {MaxScore(tmpTileNum) = 0}
			loop
		loop
		repeat NUM_OF_TILES_IN_HAND
			setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHaiHand(cnt)
		loop
		if ((nowTime-startTime) >= COMTHINKTIME) {
			// 時間がかかる時用の簡略版
			repeat NUM_OF_TILES_IN_HAND
				if (Discardability(cnt) >= 0) {
					tmpTileNum = cnt
					MinScore(tmpTileNum) = 0: MaxScore(tmpTileNum) = 0
					repeat TILE_NONFLOWER_STRICT_MAX+1
						if (cnt\TILE_SUIT_STEP == 0) {continue}
						setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
						setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, cnt
						await 0
						Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
						if (Shanten == -1) {
							Discardability(tmpTileNum) += 2000*(4-TileCount(cnt)-SeenTiles(cnt))+100000
						}
						setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer)
						setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, tmpHandTileCode
					loop
				}
			loop
		}
		repeat NUM_OF_TILES_IN_HAND
			setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHaiHand(cnt)
		loop
		if (Richiability > 0) {
			DiscardTileIndex = DAHAI_TYPE_NORMAL+TSUMOHAI_INDEX
			repeat NUM_OF_TILES_IN_HAND
				if (Discardability(DiscardTileIndex) < Discardability(NUM_OF_TILES_IN_HAND-1-cnt)) {
					DiscardTileIndex = DAHAI_TYPE_NORMAL+NUM_OF_TILES_IN_HAND-1-cnt
				}
			loop
			// 長考してるふり
#ifndef NOWAIT
			repeat
				await 0
				nowTime = gettime(6)*1000+gettime(7)
				if (nowTime < startTime) {nowTime += 60000}
				if ((nowTime-startTime) >= COMTHINKTIME) {break}
			loop
#endif
			// 役満聴牌の場合、ダマ聴でも数え役満の場合、
			// 跳満以上が確定の場合は立直しない
			// 但しダブル立直になる時はリーチする
			// 待ちが８枚以上あるならプンリー
			// 振聴立直になるような場合は開き直ってプンリー
			// 誰かが裸単騎しているならプンリー
			// 但しリーチ縛りならリーチする
			if (((MaxScore(DiscardTileIndex) < 14)&&(MinScore(DiscardTileIndex) < 7))||(getFirstDrawFlag(GameStat, ActivePlayer) == 1)) {
				if ((MachihaiTotalTiles(DiscardTileIndex) >= 8)||(MachihaiFuritenFlag(DiscardTileIndex) == 1)) {
					if (getMenzen(GameStat, ActivePlayer) == 1) {DiscardTileIndex += DAHAI_TYPE_OPENRIICHI}
					else {DiscardTileIndex += DAHAI_TYPE_RIICHI}
				} else {
					if ((MeldPointer(GameStat, 0) == 4)||(MeldPointer(GameStat, 1) == 4)||(MeldPointer(GameStat, 2) == 4)||(MeldPointer(GameStat, 3) == 4)) {
						if (MachihaiTotalTiles(DiscardTileIndex) >= 2) {
							if (getMenzen(GameStat, ActivePlayer) == 1) {DiscardTileIndex += DAHAI_TYPE_OPENRIICHI}
							else {DiscardTileIndex += DAHAI_TYPE_RIICHI}
						}
					} else {
						DiscardTileIndex += DAHAI_TYPE_RIICHI
					}
				}
			} else {
				if (getRule(RULE_RIICHI_SHIBARI) != 0) {
					DiscardTileIndex += DAHAI_TYPE_RIICHI
				}
			}
			return DiscardTileIndex
		}
	}
	// チー、ポンした直後に暗槓/加槓できないようにするためのif処理
	// チー、ポンした直後はツモ牌がない状態なので、それを利用する
	// カンをした直後はツモ牌が嶺上牌になっている
	// カンをしたあと、続けて暗槓をすることはかまわない
	if (getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer) != 0) {
		await 0
		/* 暗槓するかどうか */
		dim tmpHaiHand, NUM_OF_TILES_IN_HAND
		repeat NUM_OF_TILES_IN_HAND
			tmpHaiHand(cnt) = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
		loop
		repeat NUM_OF_TILES_IN_HAND
			if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == 0) {continue}
			TileInfo = getpaiinfo(GameStat, ActivePlayer, cnt, 0): await 0
			tmpnum = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
			repeat NUM_OF_TILES_IN_HAND
				if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == tmpnum) {
					setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, 0
				}
			loop
			Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
			repeat NUM_OF_TILES_IN_HAND
				setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHaiHand(cnt)
			loop
			if ((TileInfo\128 / 64) == 1) {
				if (Shanten == (nowShanten+2)) {
					// 長考してるふり
#ifndef NOWAIT
					repeat
						await 0
						nowTime = gettime(6)*1000+gettime(7)
						if (nowTime < startTime) {nowTime += 60000}
						if ((nowTime-startTime) >= COMTHINKTIME) {break}
					loop
#endif
					DiscardTileIndex = cnt+DAHAI_TYPE_KAN
					break
				}
			}
		loop
		/* 加槓するかどうか */
		repeat NUM_OF_TILES_IN_HAND
			Kakanability = 0
			if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == 0) {continue}
			TileInfo = getpaiinfo(GameStat, ActivePlayer, cnt, 0): await 0
			tmpnum = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
			setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, 0
			Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
			repeat NUM_OF_TILES_IN_HAND
				setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHaiHand(cnt)
			loop
			repeat MeldPointer(GameStat, ActivePlayer), 1
				if (getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)\TILE_CODE_MAXIMUM == tmpnum) {
					if ((getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)/MELD_TYPE_STEP >= MELD_TRIPLET_EXPOSED_MIN)&&(getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)/MELD_TYPE_STEP <= MELD_TRIPLET_EXPOSED_MAX)) {Kakanability = 1}
				}
			loop
			if (Kakanability == 1) {
				if (Shanten == nowShanten) {
					// 長考してるふり
#ifndef NOWAIT
					repeat
						await 0
						nowTime = gettime(6)*1000+gettime(7)
						if (nowTime < startTime) {nowTime += 60000}
						if ((nowTime-startTime) >= COMTHINKTIME) {break}
					loop
#endif
					DiscardTileIndex = cnt+DAHAI_TYPE_KAKAN
					break
				}
			}
		loop
		if (DiscardTileIndex >= DAHAI_TYPE_KAN) {return DiscardTileIndex}
	}
	/* それぞれを捨てたときの手の評価を計算する */
	dim Discardability, NUM_OF_TILES_IN_HAND
	startTime = gettime(6)*1000+gettime(7)
	Yishanten = 0
	dim tmpDiscardability, NUM_OF_TILES_IN_HAND

	WanzCount = 0: PinzCount = 0: SouzCount = 0
	YaojiuCount = 0: KeziCount = 0
	repeat NUM_OF_TILES_IN_HAND
		if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)/TILE_SUIT_STEP == TILE_SUIT_CHARACTERS/TILE_SUIT_STEP) {WanzCount++}
		if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)/TILE_SUIT_STEP == TILE_SUIT_CIRCLES/TILE_SUIT_STEP) {PinzCount++}
		if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)/TILE_SUIT_STEP == TILE_SUIT_BAMBOOS/TILE_SUIT_STEP) {SouzCount++}
		if ((getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)/TILE_SUIT_STEP == TILE_SUIT_HONORS/TILE_SUIT_STEP)||(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)\TILE_SUIT_STEP == 1)||(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)\TILE_SUIT_STEP == 9)) {YaojiuCount++}
		TileInfo = getpaiinfo(GameStat, ActivePlayer, cnt, 0): await 0
		if (((TileInfo \ 2) == 1)||((TileInfo \ 8 / 4) == 1)) {KeziCount++}
	loop
	repeat MeldPointer(GameStat, ActivePlayer), 1
		if (getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)\TILE_CODE_MAXIMUM/TILE_SUIT_STEP == TILE_SUIT_CHARACTERS/TILE_SUIT_STEP) {WanzCount += 3}
		if (getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)\TILE_CODE_MAXIMUM/TILE_SUIT_STEP == TILE_SUIT_CIRCLES/TILE_SUIT_STEP) {PinzCount += 3}
		if (getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)\TILE_CODE_MAXIMUM/TILE_SUIT_STEP == TILE_SUIT_BAMBOOS/TILE_SUIT_STEP) {SouzCount += 3}
		if (getMeld(GameStat, MELD_TILECODE, cnt, ActivePlayer)/MELD_TYPE_STEP >= MELD_TRIPLET) {KeziCount += 3}
	loop

	repeat NUM_OF_TILES_IN_HAND
		TileInfo = getpaiinfo(GameStat, ActivePlayer, cnt, 0): await 0
		tmpHand = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
		// 存在しない牌の場合
		if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == 0) {Discardability(cnt) = -9999999: continue}
		// 向聴数から、大まかな評価値を算出
		setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, 0
		Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL): await 0
		Discardability(cnt) = (6-Shanten)*1000
		setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHand
		if (TileInfo == 0) {
			if (tmpHand >= TILE_NUMERAL_MAX) {
				Discardability(cnt) += 900 // 字牌の浮き牌
				if (tmpHand >= TILE_DRAGON_MIN) {
					Discardability(cnt) -= 100 // 三元牌のとき
				}
				if (tmpHand == TILE_EAST_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_EAST)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_EAST)) {
						Discardability(cnt) -= 100 // 東が役牌のとき
					}
				}
				if (tmpHand == TILE_SOUTH_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_SOUTH)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_SOUTH)) {
						Discardability(cnt) -= 100 // 南が役牌のとき
					}
				}
				if (tmpHand == TILE_WEST_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_WEST)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_WEST)) {
						Discardability(cnt) -= 100 // 西が役牌のとき
					}
				}
				if (tmpHand == TILE_NORTH_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_NORTH)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_NORTH)) {
						Discardability(cnt) -= 100 // 北が役牌のとき
					}
				}
			} else {
				Discardability(cnt) += 700 // 数牌の浮き牌
			}
		}
		else {
			if ((TileInfo \ 16 / 8) == 1) {Discardability(cnt) += 500} // 辺張
			else {
				if ((TileInfo \ 64 / 32) == 1) {Discardability(cnt) += 300} // 嵌張
				else {
					if ((TileInfo \ 8 / 4) == 1) {Discardability(cnt) += 100} // そうでなければ対子
				}
			}
		}
		if (getHand(GameStat, HAND_REDTILE, cnt, ActivePlayer) >= 0) {
			Discardability(cnt) -= 50
		}
		if ((TileInfo \ 2) == 1) {
			// 役牌の暗刻を切らないようにする
			if (tmpHand >= TILE_NUMERAL_MAX) {
				if (tmpHand >= TILE_DRAGON_MIN) {
					Discardability(cnt) -= 99999 // 三元牌のとき
				}
				if (tmpHand == TILE_EAST_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_EAST)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_EAST)) {
						Discardability(cnt) -= 99999 // 東が役牌のとき
					}
				}
				if (tmpHand == TILE_SOUTH_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_SOUTH)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_SOUTH)) {
						Discardability(cnt) -= 99999 // 南が役牌のとき
					}
				}
				if (tmpHand == TILE_WEST_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_WEST)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_WEST)) {
						Discardability(cnt) -= 99999 // 西が役牌のとき
					}
				}
				if (tmpHand == TILE_NORTH_WIND) {
					if ((getRound(GameStat)/4 == PLAYER_NORTH)||(playerwind(ActivePlayer, getRound(GameStat)) == PLAYER_NORTH)) {
						Discardability(cnt) -= 99999 // 北が役牌のとき
					}
				}
			}
		}
		Discardability(cnt) += (SeenTiles(tmpHand)*10) // 場に見えてる個数
		if (tmpHand >= TILE_NUMERAL_MAX) {Discardability(cnt) += 50}
		else {
			if ((tmpHand\TILE_SUIT_STEP == 1)||(tmpHand\TILE_SUIT_STEP == 9)) {Discardability(cnt) += 40}
			if ((tmpHand\TILE_SUIT_STEP == 2)||(tmpHand\TILE_SUIT_STEP == 8)) {Discardability(cnt) += 30}
			if ((tmpHand\TILE_SUIT_STEP == 3)||(tmpHand\TILE_SUIT_STEP == 7)) {Discardability(cnt) += 20}
			if ((tmpHand\TILE_SUIT_STEP == 4)||(tmpHand\TILE_SUIT_STEP == 6)) {Discardability(cnt) += 10}
		}
		setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpHand
		if (nowShanten == 2) { // 二向聴でも先読みさせてみる
			Yishanten = 1
			tmpXTileNum = cnt
			if (tmpXTileNum > 0) {
				if (getHand(GameStat, HAND_TILECODE, tmpXTileNum, ActivePlayer) == getHand(GameStat, HAND_TILECODE, tmpXTileNum-1, ActivePlayer)) {
					continue // 同じ牌を２度調べない
				}
			}
			repeat TILE_NONFLOWER_STRICT_MAX+1
				await 0
				if (cnt\TILE_SUIT_STEP == 0) {continue}
				if (TileCount(cnt)+SeenTiles(cnt) == 4) {continue} // ４枚見えてる
				if ((cnt >= TILE_NUMERAL_MAX)&&(TileCount(cnt)+SeenTiles(cnt) == 3)) {continue} // 字牌のラス牌はとりあえず無視
				setHand GameStat, HAND_TILECODE, tmpXTileNum, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
				setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, cnt
				await 0
				Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
				tmpXde = 4-TileCount(cnt)-SeenTiles(cnt)
				if (Shanten == 1) { // 次のツモ牌で一向聴の場合
					nowTime = gettime(6)*1000+gettime(7)
					if (nowTime < startTime) {nowTime += 60000}
					if ((nowTime-startTime) < COMTHINKTIME) {
						repeat NUM_OF_TILES_IN_HAND
							nowTime = gettime(6)*1000+gettime(7)
							tmpTileNum = cnt
							tmpTile2a = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
							if (tmpTileNum > 0) {
								if (getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer) == getHand(GameStat, HAND_TILECODE, tmpTileNum-1, ActivePlayer)) {
									continue // 同じ牌を２度調べない
								}
							}
							gosub *comp_calculate1
							nowTime = gettime(6)*1000+gettime(7)
							if (nowTime < startTime) {nowTime += 60000}
							if ((nowTime-startTime) < COMTHINKTIME) {break}
						loop
					} else { // 処理が遅い時
						repeat NUM_OF_TILES_IN_HAND
							tmpDiscardability(tmpXTileNum) = (4-TileCount(cnt)-SeenTiles(cnt))*tmpXde
						loop
					}
				}
				setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpXTileNum, ActivePlayer)
				setHand GameStat, HAND_TILECODE, tmpXTileNum, ActivePlayer, tmpHand
				nowTime = gettime(6)*1000+gettime(7)
				if (nowTime < startTime) {nowTime += 60000}
				if ((nowTime-startTime) < COMTHINKTIME) {break}
			loop
		}
		if (nowShanten == 1) { // 一向聴のとき
			Yishanten = 1
			tmpTileNum = cnt
			if (tmpTileNum > 0) {
				if (getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer) == getHand(GameStat, HAND_TILECODE, tmpTileNum-1, ActivePlayer)) {
					continue // 同じ牌を２度調べない
				}
			}
			gosub *comp_calculate1
		}
		if (nowShanten == 0) { // 聴牌したとき
			tmpTileNum = cnt
			tmpTile2 = tmpHand
			tmpTileNum2 = cnt
			gosub *comp_calculate
		}
	loop
	nowTime = gettime(6)*1000+gettime(7)
	if (nowTime < startTime) {nowTime += 60000}
	if ((Yishanten)&&((nowTime-startTime) < COMTHINKTIME)) {
		// 一向聴のとき
		repeat NUM_OF_TILES_IN_HAND
			Discardability(cnt) += tmpDiscardability(cnt)+100000
		loop
	}
	// オープン立直の待ち牌を捨てない(捨ててはならない！)ようにする
	repeat NUM_OF_TILES_IN_HAND
		if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) < TILE_NONFLOWER_MAX) {
			if (getOpenWait(GameStat, getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)) == 1) {
				Discardability(cnt) = -999999999
			}
		}
	loop
	// 大三元の包になるような牌を捨てないようにする
	await 0: countseentiles SeenTiles, GameStat
	if (nowShanten > 1) {
		// ノーチャンスか・振聴となるか・白を鳴いてるか・発を鳴いてるか・中を鳴いてるか
		tmpDiscardabilityChkFlag = 0
		repeat 4: tmpchkcnt = 0
			if (tmpchkcnt == ActivePlayer) {continue}
			if (MeldPointer(GameStat, tmpchkcnt) == 0) {continue}
			repeat MeldPointer(GameStat, tmpchkcnt)
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_WHITE_DRAGON) {
					tmpDiscardabilityChkFlag += 4
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_GREEN_DRAGON) {
					tmpDiscardabilityChkFlag += 2
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_RED_DRAGON) {
					tmpDiscardabilityChkFlag += 1
				}
			loop
			if (DiscardPointer(GameStat, tmpchkcnt) == 0) {continue}
			repeat DiscardPointer(GameStat, tmpchkcnt), 1
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_WHITE_DRAGON)&&(tmpDiscardabilityChkFlag == 3) {tmpDiscardabilityChkFlag += 8}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_GREEN_DRAGON)&&(tmpDiscardabilityChkFlag == 5) {tmpDiscardabilityChkFlag += 8}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_RED_DRAGON)&&(tmpDiscardabilityChkFlag == 6) {tmpDiscardabilityChkFlag += 8}
			loop
			if ((SeenTiles(TILE_WHITE_DRAGON) >= 2)&&(tmpDiscardabilityChkFlag == 3)) {tmpDiscardabilityChkFlag += 16}
			if ((SeenTiles(TILE_GREEN_DRAGON) >= 2)&&(tmpDiscardabilityChkFlag == 5)) {tmpDiscardabilityChkFlag += 16}
			if ((SeenTiles(TILE_RED_DRAGON) >= 2)&&(tmpDiscardabilityChkFlag == 6)) {tmpDiscardabilityChkFlag += 16}
		loop
		repeat NUM_OF_TILES_IN_HAND
			if ((tmpDiscardabilityChkFlag == 3)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_WHITE_DRAGON)) {
				Discardability(cnt) = -799999999
			}
			if ((tmpDiscardabilityChkFlag == 5)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_GREEN_DRAGON)) {
				Discardability(cnt) = -799999999
			}
			if ((tmpDiscardabilityChkFlag == 6)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_RED_DRAGON)) {
				Discardability(cnt) = -799999999
			}
		loop
	}
	// 大四喜の包になるような牌を捨てないようにする
	if (nowShanten > 1) {
		// ノーチャンスか・振聴となるか・東を鳴いてるか
		// ・南を鳴いてるか・西を鳴いてるか・北を鳴いてるか
		tmpDiscardabilityChkFlag = 0
		repeat 4: tmpchkcnt = 0
			if (tmpchkcnt == ActivePlayer) {continue}
			if (MeldPointer(GameStat, tmpchkcnt) == 0) {continue}
			repeat MeldPointer(GameStat, tmpchkcnt)
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_EAST_WIND) {
					tmpDiscardabilityChkFlag += 8
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_SOUTH_WIND) {
					tmpDiscardabilityChkFlag += 4
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_WEST_WIND) {
					tmpDiscardabilityChkFlag += 2
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_NORTH_WIND) {
					tmpDiscardabilityChkFlag += 1
				}
			loop
			if (DiscardPointer(GameStat, tmpchkcnt) == 0) {continue}
			repeat DiscardPointer(GameStat, tmpchkcnt), 1
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_EAST_WIND)&&(tmpDiscardabilityChkFlag == 7) {tmpDiscardabilityChkFlag += 16}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_SOUTH_WIND)&&(tmpDiscardabilityChkFlag == 11) {tmpDiscardabilityChkFlag += 16}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_WEST_WIND)&&(tmpDiscardabilityChkFlag == 13) {tmpDiscardabilityChkFlag += 16}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) == TILE_NORTH_WIND)&&(tmpDiscardabilityChkFlag == 14) {tmpDiscardabilityChkFlag += 16}
			loop
			if ((SeenTiles(TILE_EAST_WIND) >= 3)&&(tmpDiscardabilityChkFlag == 7)) {tmpDiscardabilityChkFlag += 32}
			if ((SeenTiles(TILE_SOUTH_WIND) >= 3)&&(tmpDiscardabilityChkFlag == 11)) {tmpDiscardabilityChkFlag += 32}
			if ((SeenTiles(TILE_WEST_WIND) >= 3)&&(tmpDiscardabilityChkFlag == 13)) {tmpDiscardabilityChkFlag += 32}
			if ((SeenTiles(TILE_NORTH_WIND) >= 3)&&(tmpDiscardabilityChkFlag == 14)) {tmpDiscardabilityChkFlag += 32}
		loop
		repeat NUM_OF_TILES_IN_HAND
			if ((tmpDiscardabilityChkFlag == 7)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_EAST_WIND)) {
				Discardability(cnt) = -799999999
			}
			if ((tmpDiscardabilityChkFlag == 11)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_SOUTH_WIND)) {
				Discardability(cnt) = -799999999
			}
			if ((tmpDiscardabilityChkFlag == 13)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_WEST_WIND)) {
				Discardability(cnt) = -799999999
			}
			if ((tmpDiscardabilityChkFlag == 14)&&(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == TILE_NORTH_WIND)) {
				Discardability(cnt) = -799999999
			}
		loop
	}
	// 一色手を警戒する
	if (nowShanten > 1) {
		repeat 4: tmpchkcnt = 0
			if (tmpchkcnt == ActivePlayer) {continue}
			tmpDiscardabilityChkCount1 = 0
			tmpDiscardabilityChkCount2 = 0
			tmpDiscardabilityChkCount3 = 0
			if (DiscardPointer(GameStat, tmpchkcnt) == 0) {continue}
			repeat DiscardPointer(GameStat, tmpchkcnt), 1
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM / 10) == 0) {tmpDiscardabilityChkCount1++}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM / 10) == 1) {tmpDiscardabilityChkCount2++}
				if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM / 10) == 2) {tmpDiscardabilityChkCount3++}
			loop
			repeat NUM_OF_TILES_IN_HAND
				if ((tmpDiscardabilityChkCount2 > 0)&&(tmpDiscardabilityChkCount3 > 0)) {
					if (((tmpDiscardabilityChkCount1*1000)/(tmpDiscardabilityChkCount2+tmpDiscardabilityChkCount3)) < 200) {
						if ((getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) /10) == 0) {
							Discardability(cnt) = 0
						}
					}
				}
				if ((tmpDiscardabilityChkCount1 > 0)&&(tmpDiscardabilityChkCount3 > 0)) {
					if (((tmpDiscardabilityChkCount2*1000)/(tmpDiscardabilityChkCount1+tmpDiscardabilityChkCount3)) < 200) {
						if ((getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) /10) == 1) {
							Discardability(cnt) = 0
						}
					}
				}
				if ((tmpDiscardabilityChkCount1 > 0)&&(tmpDiscardabilityChkCount2 > 0)) {
					if (((tmpDiscardabilityChkCount3*1000)/(tmpDiscardabilityChkCount1+tmpDiscardabilityChkCount2)) < 200) {
						if ((getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) /10) == 2) {
							Discardability(cnt) = 0
						}
					}
				}
			loop
		loop
	}
	// 国士無双を警戒する
	if (nowShanten > 1) {
		repeat 4: tmpchkcnt = 0
			tmpDiscardabilityChkCount1 = 0
			tmpDiscardabilityChkCount2 = 0
			if (tmpchkcnt == ActivePlayer) {continue}
			if (DiscardPointer(GameStat, tmpchkcnt) == 0) {continue}
			repeat DiscardPointer(GameStat, tmpchkcnt), 1
				if (((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM / 10) < 3)&&((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ 10) > 1)&&((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ 10) < 9)) {tmpDiscardabilityChkCount1++}
				tmpDiscardabilityChkCount2++
			loop
			repeat NUM_OF_TILES_IN_HAND
				if (tmpDiscardabilityChkCount2 > 0) {
					if (((tmpDiscardabilityChkCount1*1000)/(tmpDiscardabilityChkCount2)) > 840) {
						if (((getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) \TILE_SUIT_STEP) == 1)||((getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) \TILE_SUIT_STEP) == 9)||(getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) > 30)) {
							Discardability(cnt) = 0
						}
					}
				}
			loop
		loop
	}
	// 警戒するプレーヤーを決定する
	dim MarkingPlayer, 4
	repeat 4
		if (cnt == ActivePlayer) {continue /* 自分自身の場合は飛ばす */}
		if (MeldPointer(GameStat, cnt) >= 2) {
			MarkingPlayer(cnt) = 1 /* 二面子以上鳴いていたら降りる */
		}
		if (getRichiFlag(GameStat, RICHI_FLAG, cnt) > RIICHI_NO) {
			MarkingPlayer(cnt) = 1 /* 誰かが立直していたら降りる！ */
		}
		if (MeldPointer(GameStat, cnt) == 1) {
			if (tilesLeft(GameStat) < 30) {
				/* 残り３０枚未満で１副露の者がいた場合は降りる */
				MarkingPlayer(cnt) = 1
			}
		}
	loop
	// オリるかどうかの判定…和了り手の得点を調べる
	TmpMinScore = 999999999
	TmpMaxScore = -999999999
	repeat NUM_OF_TILES_IN_HAND
		if (getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer) == 0) {continue}
		tmpTileCodeNum = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
		tmpTileNum = cnt
		MinScore(cnt) = 999999999
		MaxScore(cnt) = -999999999
		repeat TILE_NONFLOWER_STRICT_MAX+1
			if (cnt\TILE_SUIT_STEP == 0) {continue}
			setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
			setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, cnt
			await 0
			Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
			if (Shanten == -1) {
				// ここで計算されるのはダマ聴で自摸和のときの点数
				setTsumoAgariFlag GameStat, 1: await 0: countyaku GameStat, yakuInfo, ActivePlayer
				if (Discardability(tmpTileNum) >= 10000) {Discardability(tmpTileNum) -= 10000}
				Discardability(tmpTileNum) += getYakuInfo(yakuInfo, YAKUINF_POINTS+0)*(4-TileCount(cnt)-SeenTiles(cnt))+100000
				if (MinScore(tmpTileNum) > (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))) {MinScore(tmpTileNum) = (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))}
				if (MaxScore(tmpTileNum) < (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))) {MaxScore(tmpTileNum) = (getYakuInfo(yakuInfo, YAKUINF_HAN_BASE)+getYakuInfo(yakuInfo, YAKUINF_HAN_BONUS)+getYakuInfo(yakuInfo, YAKUINF_DORA))}
			}
			setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer)
			setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, tmpHandTileCode
			if (MinScore(tmpTileNum) == 999999999) {MinScore(tmpTileNum) = 0}
			if (MaxScore(tmpTileNum) ==-999999999) {MaxScore(tmpTileNum) = 0}
		loop
		setHand GameStat, HAND_TILECODE, cnt, ActivePlayer, tmpTileCodeNum
		if (MinScore(tmpTileNum) < TmpMinScore) {TmpMinScore = MinScore(tmpTileNum)}
		if (MaxScore(tmpTileNum) > TmpMinScore) {TmpMaxScore = MaxScore(tmpTileNum)}
	loop
	if (TmpMaxScore >= 3000) {
		// とりあえず、跳満以上聴牌なら全ツッパする
		repeat 4: MarkingPlayer(cnt) = 0: loop
	}
	// 降り打ちモードのための処理
	repeat NUM_OF_TILES_IN_HAND: tmphaiindex = cnt
		repeat 4: tmpchkcnt = cnt
			if (MarkingPlayer(tmpchkcnt) == 0) {break}
			tmpflag = 0
			if (tmpflag == 0) {
				// 合わせ打ちができるなら合わせ打ち
				if ((getDiscard(GameStat, DISCARD_TILECODE, DiscardPointer(GameStat, KamichaOf(ActivePlayer)), KamichaOf(ActivePlayer)) \ TILE_CODE_MAXIMUM) == getHand(GameStat, HAND_TILECODE, tmphaiindex, ActivePlayer)) {
					Discardability(tmphaiindex) += 7000000
					tmpflag = 1
				}
			}
			repeat DiscardPointer(GameStat, tmpchkcnt), 1
				if (getHand(GameStat, HAND_TILECODE, tmphaiindex, ActivePlayer) == (getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM)) {
					// 警戒しているプレーヤーの現物があれば優先的にそれを捨てる
					if (getHand(GameStat, HAND_TILECODE, tmphaiindex, ActivePlayer) < TILE_NUMERAL_MAX) {
						Discardability(tmphaiindex) += 10000000
					} else {
						Discardability(tmphaiindex) += 5000000
					}
					tmpflag = 1
					break
				}
			loop
			if (tmpflag == 0) {
				repeat DiscardPointer(GameStat, tmpchkcnt), 1
					if ((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_CODE_MAXIMUM) < TILE_NUMERAL_MAX) {
						// 合わせ打ちも無理なら筋牌
						if (((getDiscard(GameStat, DISCARD_TILECODE, cnt, tmpchkcnt) \ TILE_SUIT_STEP)\3) == ((getHand(GameStat, HAND_TILECODE, tmphaiindex, ActivePlayer) \ TILE_SUIT_STEP)\3)) {
							Discardability(tmphaiindex) += 1200000
							break
						}
					}
				loop
			}
		loop
	loop
	// 捨牌を決定する
	repeat NUM_OF_TILES_IN_HAND
		if (Discardability(DiscardTileIndex) < Discardability(NUM_OF_TILES_IN_HAND-1-cnt)) {
			DiscardTileIndex = SUTEHAI_NORMAL+NUM_OF_TILES_IN_HAND-1-cnt
		}
	loop
#ifdef SANMAX
	// 決定された捨牌が北だった場合、捨てる代わりに抜く
	if ((getRule(RULE_FLOWER_TILES) != 0)&&(getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer) != 0)) {
		if (getHand(GameStat, HAND_TILECODE, (DiscardTileIndex\DAHAI_TYPE_STEP), ActivePlayer) == TILE_NORTH_WIND) {
			DiscardTileIndex += DAHAI_TYPE_FLOWER
		}
	}
#endif
	// 長考してるふり
#ifndef NOWAIT
	repeat
		await 0
		nowTime = gettime(6)*1000+gettime(7)
		if (nowTime < startTime) {nowTime += 60000}
		if ((nowTime-startTime) >= COMTHINKTIME) {break}
	loop
#endif
return DiscardTileIndex

*comp_calculate1
	repeat TILE_NONFLOWER_STRICT_MAX+1
		nowTime = gettime(6)*1000+gettime(7)
		if (nowTime < startTime) {nowTime += 60000}
		await 0
		if (cnt\TILE_SUIT_STEP == 0) {continue}
		if (TileCount(cnt)+SeenTiles(cnt) == 4) {continue} // ４枚見えてる
		if ((cnt >= TILE_NUMERAL_MAX)&&(TileCount(cnt)+SeenTiles(cnt) == 3)) {continue} // 字牌のラス牌はとりあえず無視
		setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
		setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, cnt
		await 0
		Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
		tmpde = 4-TileCount(cnt)-SeenTiles(cnt)
		if (Shanten == 0) { // 次のツモ牌で聴牌の場合
			nowTime = gettime(6)*1000+gettime(7)
			if (nowTime < startTime) {nowTime += 60000}
			if ((nowTime-startTime) < COMTHINKTIME) {
				repeat NUM_OF_TILES_IN_HAND
					nowTime = gettime(6)*1000+gettime(7)
					if (nowTime < startTime) {nowTime += 60000}
					if ((nowTime-startTime) >= COMTHINKTIME) {break}
					tmpTile2 = getHand(GameStat, HAND_TILECODE, cnt, ActivePlayer)
					tmpTileNum2 = cnt
					gosub *comp_calculate
				loop
			} else { // 処理が遅い時
				repeat NUM_OF_TILES_IN_HAND
					tmpDiscardability(tmpTileNum) = (4-TileCount(cnt)-SeenTiles(cnt))*tmpde
				loop
			}
		}
		setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer)
		if (nowShanten == 1) {
			setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, tmpHand
		} else {
			setHand GameStat, HAND_TILECODE, tmpTileNum, ActivePlayer, tmpTile2a
		}
		nowTime = gettime(6)*1000+gettime(7)
		if (nowTime < startTime) {nowTime += 60000}
		if ((nowTime-startTime) < COMTHINKTIME) {break}
	loop
	return

*comp_calculate
	repeat TILE_NONFLOWER_STRICT_MAX+1
		nowTime = gettime(6)*1000+gettime(7)
		if (nowTime < startTime) {nowTime += 60000}
		if ((nowTime-startTime) >= COMTHINKTIME) {gosub *comp_restore: break}
		await 0
		if (cnt\TILE_SUIT_STEP == 0) {continue} // 存在しない牌
		if (TileCount(cnt)+SeenTiles(cnt) == 4) {continue} // ４枚切れた牌
		if (nowShanten > 0) {
			tmpHe = 0: tmpHai = cnt
			repeat DiscardPointer(GameStat, ActivePlayer), 1
				if (getDiscard(GameStat, DISCARD_TILECODE, cnt, ActivePlayer) == tmpHai) {
					tmpHe = 1: break
				}
			loop
			if (tmpHe == 1) {tmpDiscardability == 0: break} // 振聴になる牌を避ける
		}
		setHand GameStat, HAND_TILECODE, tmpTileNum2, ActivePlayer, getHand(GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer)
		setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, cnt
		await 0
		Shanten = countshanten(GameStat, ActivePlayer, SHANTEN_ALL)
		if (Shanten == -1) {
			setTsumoAgariFlag GameStat, 1: await 0: countyaku GameStat, yakuInfo, ActivePlayer
			if (nowShanten > 0) {
				tmpDiscardability(tmpTileNum) += getYakuInfo(yakuInfo, YAKUINF_POINTS+0)*(4-TileCount(cnt)-SeenTiles(cnt))*tmpde
			} else {
				if (Discardability(tmpTileNum) >= 10000) {Discardability(tmpTileNum) -= 10000}
				Discardability(tmpTileNum) += getYakuInfo(yakuInfo, YAKUINF_POINTS+0)*(4-TileCount(cnt)-SeenTiles(cnt))+100000
			}
		}
		gosub *comp_restore
	loop
	return

*comp_restore
	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, ActivePlayer, getHand(GameStat, HAND_TILECODE, tmpTileNum2, ActivePlayer)
	setHand GameStat, HAND_TILECODE, tmpTileNum2, ActivePlayer, tmpTile2
	return

/* ＡＩの鳴き・栄和 */
#deffunc compfuuro var GameStat, int PassivePlayer
	info strf("AIの副露判定に入ります。プレイヤー [%d]", PassivePlayer)
	if (getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) > TILE_SUIT_FLOWERS) {
		/* 花牌の場合は戻る */
		setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, 0
		setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, PassivePlayer, 0
		return
	}

	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, 0
	Shanten = countshanten(GameStat, PassivePlayer, SHANTEN_ALL): await 0
	currentShanten = Shanten
	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)

	Shanten = countshanten(GameStat, PassivePlayer, SHANTEN_ALL): await 0
	setTsumoAgariFlag GameStat, 0: await 0: countyaku GameStat, yakuInfo, PassivePlayer
	await 0
	chkfuriten FuritenFlag, MachihaiFlag, MachihaiCount, MachihaiTotal, MachiMen, GameStat, PassivePlayer
	// 暗槓に対する搶槓の判定で、国士聴牌でない場合は戻る
	if ((countshanten(GameStat, PassivePlayer, SHANTEN_ORPHANS) != 0)&&(getKangFlag(GameStat, KANG_CHANKAN) == 2)) {
		setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, 0
		setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, PassivePlayer, 0
		return
	}
	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
	Shanten = countshanten(GameStat, PassivePlayer, SHANTEN_ALL): await 0
	if (Shanten == -1) {
		setDeclarationFlag GameStat, DECLARATIONFLAG_RON, PassivePlayer, 1 // 出和了り
		setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
		setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, PassivePlayer, getCurrentDiscard(GameStat, CURRENTDISCARD_REDTILE)
		if ((getYakuInfo(yakuInfo, YAKUINF_HAN_BASE) <= getShibari(GameStat))||(FuritenFlag == 1)||(getDoujunFuriten(GameStat, PassivePlayer) > 0)||((getRule(RULE_RIICHI_SHIBARI) != 0)&&(getRichiFlag(GameStat, RICHI_FLAG, PassivePlayer) == RIICHI_NO))) {
			setDeclarationFlag GameStat, DECLARATIONFLAG_RON, PassivePlayer, 0
			setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, 0
			setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, PassivePlayer, 0
		}
		return
	}
	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, 0
	setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, PassivePlayer, 0
	if (getKangFlag(GameStat, KANG_CHANKAN) == 1) {return} // 搶槓の判定中なら判定打ち切り
	if (getDrawPointer(GameStat) >= (getRinshanPointer(GameStat) - (getDeadWallLength(GameStat)-1))) {return} // 河底牌なら判定打ち切り
	if (getRichiFlag(GameStat, RICHI_FLAG, PassivePlayer) > RIICHI_NO) {return} // リーチしているなら判定打ち切り
	await 0: countseentiles SeenTiles, GameStat
	countTilesInHand TileCount, GameStat, PassivePlayer
	// 捨てられた牌が役牌だった場合
	YakuhaiPon = 0
	if (getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_WHITE_DRAGON) {YakuhaiPon = 1}
	if (getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_GREEN_DRAGON) {YakuhaiPon = 1}
	if (getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_RED_DRAGON) {YakuhaiPon = 1}
	if ((getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_EAST_WIND)&&((getRound(GameStat)/4 == 0)||(playerwind(PassivePlayer, getRound(GameStat)) == PLAYER_EAST))) {YakuhaiPon = 1}
	if ((getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_SOUTH_WIND)&&((getRound(GameStat)/4 == 1)||(playerwind(PassivePlayer, getRound(GameStat)) == PLAYER_SOUTH))) {YakuhaiPon = 1}
	if ((getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_WEST_WIND)&&((getRound(GameStat)/4 == 2)||(playerwind(PassivePlayer, getRound(GameStat)) == PLAYER_WEST))) {YakuhaiPon = 1}
	if ((getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) == TILE_NORTH_WIND)&&((getRound(GameStat)/4 == 3)||(playerwind(PassivePlayer, getRound(GameStat)) == PLAYER_NORTH))) {YakuhaiPon = 1}
	// 役牌を鳴いたらフラグを立てる
	// ポンが失敗する場合は他家のロンがあるか河底牌の場合
	// なのでこの時点でフラグを立てても特に問題はない
	await 0: countseentiles SeenTiles, GameStat
	if (TileCount(getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)) >= 3) {
		// すでに槓子を２つ持っているなら大明槓させる
		if (getNumberOfQuads(GameStat, PassivePlayer) >= 2) {
			setDeclarationFlag GameStat, DECLARATIONFLAG_MINKAN, PassivePlayer, 1
			return
		}
	}
	if (currentShanten > 0) { // すでにテンパってたら鳴かない
		if (currentShanten > Shanten) { // 有効牌でなければ鳴かない
			if (TileCount(getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)) >= 2) { // ポンできるかどうかの判定
				if ((getMenzen(GameStat, PassivePlayer) == 0)||(YakuhaiPon == 1)) {
					// すでに鳴いているか、役牌の場合はポン 対々狙いか一色狙いなら二鳴き
					setDeclarationFlag GameStat, DECLARATIONFLAG_PON, PassivePlayer, 1
					return
				} else {
					tmpYaojiuTilesCount = 0
					repeat NUM_OF_TILES_IN_HAND-1
						switch getHand(GameStat, HAND_TILECODE, cnt, PassivePlayer)
							case TILE_SUIT_CHARACTERS+1: case TILE_SUIT_CHARACTERS+9:
							case TILE_SUIT_CIRCLES+1: case TILE_SUIT_CIRCLES+9:
							case TILE_SUIT_BAMBOOS+1: case TILE_SUIT_BAMBOOS+9:
							case TILE_EAST_WIND: case TILE_SOUTH_WIND: case TILE_WEST_WIND: case TILE_NORTH_WIND:
							case TILE_WHITE_DRAGON: case TILE_GREEN_DRAGON: case TILE_RED_DRAGON
								tmpYaojiuTilesCount++
						swend
					loop
					switch getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
						case TILE_SUIT_CHARACTERS+1: case TILE_SUIT_CHARACTERS+9:
						case TILE_SUIT_CIRCLES+1: case TILE_SUIT_CIRCLES+9:
						case TILE_SUIT_BAMBOOS+1: case TILE_SUIT_BAMBOOS+9:
						case TILE_EAST_WIND: case TILE_SOUTH_WIND: case TILE_WEST_WIND: case TILE_NORTH_WIND:
						case TILE_WHITE_DRAGON: case TILE_GREEN_DRAGON: case TILE_RED_DRAGON
							tmpYaojiuTilesCount++
					swend
					repeat MeldPointer(GameStat, PassivePlayer)
						if (MeldPointer(GameStat, PassivePlayer) == 0) {break}
						if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_CODE_MAXIMUM) > TILE_NUMERAL_MAX) {
							tmpYaojiuTilesCount++: continue
						}
						if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_SUIT_STEP) == 1) {
							tmpYaojiuTilesCount++: continue
						}
						if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_SUIT_STEP) == 9) {
							tmpYaojiuTilesCount++: continue
						}
						if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_SUIT_STEP) == 7) {
							if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) / MELD_TYPE_STEP) < MELD_TRIPLET) {
								tmpYaojiuTilesCount++: continue
							}
						}
					loop
					if (tmpYaojiuTilesCount == 0) {
						if ((currentShanten == 1)&&(getRule(RULE_KUITAN) == 0)) {
							// 喰い断をポン聴する
							setDeclarationFlag GameStat, DECLARATIONFLAG_PON, PassivePlayer, 1
							return
						}
					}
				}
			}
		}
	}
#ifndef ALLSANMA
	// チーするかどうかを判定する
	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
	dim tmpHaiHand, NUM_OF_TILES_IN_HAND
	repeat NUM_OF_TILES_IN_HAND
		tmpHaiHand(cnt) = getHand(GameStat, HAND_TILECODE, cnt, PassivePlayer)
	loop
	tmp2Shanten = Shanten
	chosenNaki = 0
	repeat 3, 1: chiType = cnt
		TileInfo = getpaiinfo(GameStat, PassivePlayer, cnt, 0): await 0
		nakiCount1 = 0: nakiCount2 = 0: nakiCount3 = 0
		if ((getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)-chiType) < 0) {
			continue // バグ防止用
		}
		repeat NUM_OF_TILES_IN_HAND
			await 0
			if ((getHand(GameStat, HAND_TILECODE, cnt, PassivePlayer) == getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)+1-chiType)&&(nakiCount1 < 1)) {
				setHand GameStat, HAND_TILECODE, cnt, PassivePlayer, 0
				nakiCount1++
			}
			if ((getHand(GameStat, HAND_TILECODE, cnt, PassivePlayer) == getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)+2-chiType)&&(nakiCount2 < 1)) {
				setHand GameStat, HAND_TILECODE, cnt, PassivePlayer, 0
				nakiCount2++
			}
			if ((getHand(GameStat, HAND_TILECODE, cnt, PassivePlayer) == getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)+3-chiType)&&(nakiCount3 < 1)) {
				setHand GameStat, HAND_TILECODE, cnt, PassivePlayer, 0
				nakiCount3++
			}
		loop
		Shanten = countshanten(GameStat, PassivePlayer, SHANTEN_ALL): await 0
		repeat NUM_OF_TILES_IN_HAND
			setHand GameStat, HAND_TILECODE, cnt, PassivePlayer, tmpHaiHand(cnt)
		loop
		if (getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE) >= TILE_NUMERAL_MAX) {
			continue // 字牌に順子なし
		}
		if ((nakiCount1 == 0)||(nakiCount2 == 0)||(nakiCount3 == 0)) {
			continue // 不可能な鳴きの場合
		}
		if (currentShanten > (Shanten - 2)) {chosenNaki == cnt}
	loop
	Shanten = tmp2Shanten
	setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, PassivePlayer, 0
	if (currentShanten > 0) { // すでにテンパってたら鳴かない
		if (YakuhaiPon == 1) {
			// すでに役牌を鳴いているならチー
			setDeclarationFlag GameStat, DECLARATIONFLAG_CHI, PassivePlayer, chosenNaki
		} else {
			tmpYaojiuTilesCount = 0
			repeat NUM_OF_TILES_IN_HAND-1
				await 0
				switch getHand(GameStat, HAND_TILECODE, cnt, PassivePlayer)
					case TILE_SUIT_CHARACTERS+1: case TILE_SUIT_CHARACTERS+9:
					case TILE_SUIT_CIRCLES+1: case TILE_SUIT_CIRCLES+9:
					case TILE_SUIT_BAMBOOS+1: case TILE_SUIT_BAMBOOS+9:
					case TILE_EAST_WIND: case TILE_SOUTH_WIND: case TILE_WEST_WIND: case TILE_NORTH_WIND:
					case TILE_WHITE_DRAGON: case TILE_GREEN_DRAGON: case TILE_RED_DRAGON
						tmpYaojiuTilesCount++
				swend
			loop
			switch getCurrentDiscard(GameStat, CURRENTDISCARD_TILECODE)
				case TILE_SUIT_CHARACTERS+1: case TILE_SUIT_CHARACTERS+9:
				case TILE_SUIT_CIRCLES+1: case TILE_SUIT_CIRCLES+9:
				case TILE_SUIT_BAMBOOS+1: case TILE_SUIT_BAMBOOS+9:
				case TILE_EAST_WIND: case TILE_SOUTH_WIND: case TILE_WEST_WIND: case TILE_NORTH_WIND:
				case TILE_WHITE_DRAGON: case TILE_GREEN_DRAGON: case TILE_RED_DRAGON
					tmpYaojiuTilesCount++
			swend
			repeat MeldPointer(GameStat, PassivePlayer), 1
				await 0
				if (MeldPointer(GameStat, PassivePlayer) == 0) {break}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_CODE_MAXIMUM) > TILE_NUMERAL_MAX) {
					tmpYaojiuTilesCount++: continue
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_SUIT_STEP) == 1) {
					tmpYaojiuTilesCount++: continue
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_SUIT_STEP) == 9) {
					tmpYaojiuTilesCount++: continue
				}
				if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) \ TILE_SUIT_STEP) == 7) {
					if ((getMeld(GameStat, MELD_TILECODE, cnt, PassivePlayer) / MELD_TYPE_STEP) < MELD_TRIPLET) {
						tmpYaojiuTilesCount++: continue
					}
				}
			loop
			if (tmpYaojiuTilesCount == 0) {
				if ((currentShanten == 1)&&(getRule(RULE_KUITAN) == 0)) {
					// 喰い断を吃聴する
					setDeclarationFlag GameStat, DECLARATIONFLAG_CHI, PassivePlayer, chosenNaki
				}
			}
		}
	}
#endif

return
#global
