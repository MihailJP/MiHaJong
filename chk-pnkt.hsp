/*=============================
 * HSP麻雀クライアントMiHaJong
 *    [加符点判定ルーチン]
 *=============================
 */

/* 符を算出する */
#module
#include "const.as"
#deffunc calcbasepoints var GameStat, var tmpYakuInfo, array MianziDat, int targetPlayer, var MachiType
	trace "符計算の処理に入ります。"
	/* 副底…２０符 */
	setYakuInfo tmpYakuInfo, YAKUINF_FU, 20
	/* 雀頭加符…役牌のみ２符 */
#ifndef SANMAS
	/* 風牌は条件によって役牌 */
	repeat WindMax()
		if (MianziDat(0) == Wind2Tile(cnt)) {
			if ((getRound(GameStat)/4) == cnt) {
				// 場風牌
				addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
				if (getRule(RULE_DOUBLE_YAKU_WIND_PAIR) == 1) {break}
			}
			if (playerWind(targetPlayer, getRound(GameStat)) == cnt) {
				// 自風牌
				addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
				if (getRule(RULE_DOUBLE_YAKU_WIND_PAIR) == 1) {break}
			}
			if (getRule(RULE_KAIMENKAZE) != 0) {
				// 開門風牌
				if (playerWind(getWareme(GameStat), getRound(GameStat)) == cnt) {
					addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
					if (getRule(RULE_DOUBLE_YAKU_WIND_PAIR) == 1) {break}
				}
			}
#ifndef SANMAT
			if (getRule(RULE_URAKAZE) != 0) {
				if (playerWind(targetPlayer+2, getRound(GameStat)) == cnt) {
					// 裏風牌
					addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
					if (getRule(RULE_DOUBLE_YAKU_WIND_PAIR) == 1) {break}
				}
			}
#endif
		}
	loop
	if ((MianziDat(0) >= TILE_DRAGON_MIN)&&(MianziDat(0) <= TILE_DRAGON_MAX)) {
		/* 三元牌は常に役牌 */
		addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
	}
#endif
	/* 面子加符 */
	repeat SIZE_OF_MELD_BUFFER-1, 1
		switch (MianziDat(cnt) \ TILE_CODE_MAXIMUM)
			case TILE_SUIT_CHARACTERS+1: case TILE_SUIT_CHARACTERS+9:
			case TILE_SUIT_CIRCLES+1: case TILE_SUIT_CIRCLES+9:
			case TILE_SUIT_BAMBOOS+1: case TILE_SUIT_BAMBOOS+9
#ifndef SANMAS
			case TILE_EAST_WIND: case TILE_SOUTH_WIND: case TILE_WEST_WIND: case TILE_NORTH_WIND:
			case TILE_WHITE_DRAGON: case TILE_GREEN_DRAGON: case TILE_RED_DRAGON:
#endif
				/* 一九字牌の場合 */
				/* 明刻子 */ if (((MianziDat(cnt) / MELD_TYPE_STEP) >= MELD_TRIPLET_EXPOSED_MIN)&&((MianziDat(cnt) / MELD_TYPE_STEP) <= MELD_TRIPLET_EXPOSED_MAX)) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 4}
				/* 暗刻子 */ if ((MianziDat(cnt) / MELD_TYPE_STEP) == MELD_TRIPLET_CONCEALED) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 8}
				/* 明槓子 */ if (((MianziDat(cnt) / MELD_TYPE_STEP) >= MELD_QUAD_EXPOSED_MIN)&&((MianziDat(cnt) / MELD_TYPE_STEP) <= MELD_QUAD_EXPOSED_MAX)) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 16}
				/* 暗槓子 */ if ((MianziDat(cnt) / MELD_TYPE_STEP) == MELD_QUAD_CONCEALED) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 32}
			swbreak
			default:
				/* 断幺牌の場合 */
				/* 明刻子 */ if (((MianziDat(cnt) / MELD_TYPE_STEP) >= MELD_TRIPLET_EXPOSED_MIN)&&((MianziDat(cnt) / MELD_TYPE_STEP) <= MELD_TRIPLET_EXPOSED_MAX)) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 2}
				/* 暗刻子 */ if ((MianziDat(cnt) / MELD_TYPE_STEP) == MELD_TRIPLET_CONCEALED) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 4}
				/* 明槓子 */ if (((MianziDat(cnt) / MELD_TYPE_STEP) >= MELD_QUAD_EXPOSED_MIN)&&((MianziDat(cnt) / MELD_TYPE_STEP) <= MELD_QUAD_EXPOSED_MAX)) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 8}
				/* 暗槓子 */ if ((MianziDat(cnt) / MELD_TYPE_STEP) == MELD_QUAD_CONCEALED) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 16}
			swbreak
		swend
	loop
	/* 役牌が雀頭ではなく、刻子や槓子がない場合、フラグを立てる */
	if (getYakuInfo(tmpYakuInfo, YAKUINF_FU) == 20) {NoTriplets = 1} else {NoTriplets = 0}
	LiangMianFlag = 0
	/* 聴牌形加符 */
	if (MianziDat(0) == TsumoTile(GameStat, targetPlayer)) {MachiType = MACHI_TANKI /* 単騎待ち */}
	repeat SIZE_OF_MELD_BUFFER-1, 1
		if (MianziDat(cnt) >= MELD_TRIPLET*MELD_TYPE_STEP) {
			if ((MianziDat(cnt) \ TILE_CODE_MAXIMUM) == TsumoTile(GameStat, targetPlayer)) {
				MachiType = MACHI_SHANPON /* 双ポン待ち */
			}
		} else {
			if ((MianziDat(cnt) \ TILE_CODE_MAXIMUM) == (TsumoTile(GameStat, targetPlayer)-1)) {
				MachiType = MACHI_KANCHAN /* 嵌張待ち */
			}
			if ((MianziDat(cnt) \ TILE_CODE_MAXIMUM) == (TsumoTile(GameStat, targetPlayer))) {
				if ((MianziDat(cnt) \ TILE_SUIT_STEP) == 7) {
					MachiType = MACHI_PENCHAN /* 辺張待ち */
				} else {
					MachiType = MACHI_RYANMEN /* 両面待ち */
					LiangMianFlag = 1
				}
			}
			if ((MianziDat(cnt) \ TILE_CODE_MAXIMUM) == (TsumoTile(GameStat, targetPlayer)-2)) {
				if ((MianziDat(cnt) \ TILE_SUIT_STEP) == 1) {
					MachiType = MACHI_PENCHAN /* 辺張待ち */
				} else {
					MachiType = MACHI_RYANMEN /* 両面待ち */
					LiangMianFlag = 1
				}
			}
		}
	loop
	/* 嵌張、辺張、単騎は＋２符「不利な待ちには２点付く」 */
	if ((MachiType == MACHI_KANCHAN)||(MachiType == MACHI_PENCHAN)||(MachiType == MACHI_TANKI)) {addYakuInfo tmpYakuInfo, YAKUINF_FU, 2}
	/* 双ポン待ちでロンした場合の例外 */
	/* 明刻として扱うための減点 */
	if ((MachiType == MACHI_SHANPON)&&(getTsumoAgariFlag(GameStat) == 0)) {
		switch (TsumoTile(GameStat, targetPlayer))
			case TILE_SUIT_CHARACTERS+1: case TILE_SUIT_CHARACTERS+9:
			case TILE_SUIT_CIRCLES+1: case TILE_SUIT_CIRCLES+9:
			case TILE_SUIT_BAMBOOS+1: case TILE_SUIT_BAMBOOS+9
#ifndef SANMAS
			case TILE_EAST_WIND: case TILE_SOUTH_WIND: case TILE_WEST_WIND: case TILE_NORTH_WIND:
			case TILE_WHITE_DRAGON: case TILE_GREEN_DRAGON: case TILE_RED_DRAGON:
#endif
				/* 一九字牌の場合 */
				addYakuInfo tmpYakuInfo, YAKUINF_FU, -4
			swbreak
			default:
				/* 断幺牌の場合 */
				addYakuInfo tmpYakuInfo, YAKUINF_FU, -2
			swbreak
		swend
	}
	/* 平和が成立しうる場合 */
	if ((NoTriplets == 1)&&(LiangMianFlag == 1)) {
		if (getMenzen(GameStat, targetPlayer) == 1) {
			/* 門前であれば、役として平和が成立する */
			MachiType = MACHI_RYANMEN
			if ((getTsumoAgariFlag(GameStat) == 0)||(getRule(RULE_TSUMO_PINFU) == 0)) {
				addyaku tmpYakuInfo, "平和", 1
				setYakuInfo tmpYakuInfo, YAKUINF_FU, 20
			} else {
				addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
			}
		} else {
			/* 門前でなければ、３０符とする */
			MachiType = MACHI_RYANMEN
			if ((getRule(RULE_EXPOSED_PINFU) == 0)||(getRule(RULE_EXPOSED_PINFU) == 2)||(getRule(RULE_EXPOSED_PINFU) == 4)) {
				setYakuInfo tmpYakuInfo, YAKUINF_FU, 30
			}
			/* 喰い平を役にする場合 */
			if ((getRule(RULE_EXPOSED_PINFU) == 2)||(getRule(RULE_EXPOSED_PINFU) == 3)||(getRule(RULE_EXPOSED_PINFU) == 4)||(getRule(RULE_EXPOSED_PINFU) == 5)) {
				if ((getRule(RULE_EXPOSED_PINFU) == 2)||(getRule(RULE_EXPOSED_PINFU) == 3)) {addYakuInfo tmpYakuInfo, YAKUINF_HAN_BASE, -1: addYakuInfo tmpYakuInfo, YAKUINF_HAN_BONUS, 1}
				addyaku tmpYakuInfo, "平和", 1
				/* 鼓腹撃壌 */
				if (getRule(RULE_KOFUKU_GEKIJOH) != 0) {
					if (TsumoTile(GameStat, targetPlayer) == straightColor*TILE_SUIT_STEP+5) {
						addyaku tmpYakuInfo, "鼓腹撃壌", 2
						delyaku tmpYakuInfo, "平和"
					}
				}
			}
		}
	} else {
		/* 平和でないツモ和了りは２符 */
		if (getTsumoAgariFlag(GameStat) == 1) {
			addYakuInfo tmpYakuInfo, YAKUINF_FU, 2
		}
	}
	/* 門前加符…１０符 */
	if ((getMenzen(GameStat, targetPlayer) == 1)&&(getTsumoAgariFlag(GameStat) == 0)) {
		addYakuInfo tmpYakuInfo, YAKUINF_FU, 10
	}
	trace strf("この手牌は [%d] 符です。", getYakuInfo(tmpYakuInfo, YAKUINF_FU))
return
#global
