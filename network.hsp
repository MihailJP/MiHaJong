/*=============================
 * HSP麻雀クライアントMiHaJong
 * [ネットワーク処理ルーチン]
 *=============================
 */

/* サーバーからメッセージを送信する */
#module
#include "const.as"
#deffunc serversend int SendingMsg, var GameEnv
	repeat NUM_OF_ACTUAL_PLAYERS-1
#ifdef SANMAT
		if ((IsRemotePlayer(GameEnv, 0) == cnt+2)||(IsRemotePlayer(GameEnv, 1) == cnt+2)||(IsRemotePlayer(GameEnv, 2) == cnt+2)) {
#else
		if ((IsRemotePlayer(GameEnv, 0) == cnt+2)||(IsRemotePlayer(GameEnv, 1) == cnt+2)||(IsRemotePlayer(GameEnv, 2) == cnt+2)||(IsRemotePlayer(GameEnv, 3) == cnt+2)) {
#endif
			sockputc@ SendingMsg, cnt+1+SOCK_GAME
			if (stat) {error strf("データの送信に失敗しました。クライアント [%d] ステータスコード [%d]", cnt+1, stat)}
			else {trace strf("クライアント [%d] にデータを送信 [0x%02X]", cnt+1, SendingMsg)}
		}
	loop
	return
#global

/* サーバーがメッセージを受信 */
#module
#include "const.as"
#deffunc serverreceive_init
	ServerCheckRotation = 1, 2, 3
	return

#deffunc serverreceive var ServerReceived, var ReceivedMsg
	ServerReceived = 0
	ReceivedMsg = 1023
	repeat NUM_OF_ACTUAL_PLAYERS-1
		sockcheck@ ServerCheckRotation(cnt)+SOCK_GAME
		if (stat == 0) {
			ServerReceived = ServerCheckRotation(cnt)
			sockgetc@ ReceivedMsg, ServerCheckRotation(cnt)+SOCK_GAME
			if (ReceivedMsg < 0) {ReceivedMsg += 256 /* signedになっていた場合対策 */}
			if (stat) {error strf("データの受信に失敗しました。クライアント [%d] ステータスコード [%d]", ServerCheckRotation(cnt), stat)}
			else {trace strf("クライアント [%d] からデータを受信 [0x%02X]", ServerCheckRotation(cnt), ReceivedMsg)}
			break
		}
	loop
	ServerCheckRotationTmp = ServerCheckRotation(0)
	ServerCheckRotation(0) = ServerCheckRotation(1)
#ifdef SANMAT
	ServerCheckRotation(1) = ServerCheckRotationTmp
#else
	ServerCheckRotation(1) = ServerCheckRotation(2)
	ServerCheckRotation(2) = ServerCheckRotationTmp
#endif
	return
#global

/* サーバーにメッセージを送る */
#module
#include "const.as"
#deffunc clientsend int SendingMsg
	sockputc@ SendingMsg, 0+SOCK_GAME
	if (stat) {error strf("データの送信に失敗しました。ステータスコード [%d]", stat)}
	else {trace strf("サーバーにデータを送信 [0x%02X]", SendingMsg)}
	return
#global

/* サーバーのメッセージを受信する */
#module
#include "const.as"
#deffunc clientreceive var ClientReceived, var ReceivedMsg
	ClientReceived = 0
	ReceivedMsg = 1023
	sockcheck@ 0+SOCK_GAME
	if (stat == 0) {
		ClientReceived = 1
		sockgetc@ ReceivedMsg, 0+SOCK_GAME
		if (ReceivedMsg < 0) {ReceivedMsg += 256}
		if (stat) {error strf("データの受信に失敗しました。ステータスコード [%d]", stat)}
		else {trace strf("サーバーからデータを受信 [0x%02X]", ReceivedMsg)}
	}
	return
#global

/* 接続先の打牌 */
#module
#include "const.as"
#deffunc remotedahai var GameStat, var GameEnv, int ActivePlayer
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat
			chatrecv GameStat, GameEnv
			clientreceive ClientReceived, ReceivedMsg
			if (ClientReceived) {
				if (ReceivedMsg == 0x9f) {
					if (getDisconnectFlag(GameStat, ActivePlayer) == 0) {
						setDisconnectFlag GameStat, ActivePlayer, 1
						warn strf("プレイヤー [%d] の回線切断を検知しました。", ActivePlayer)
					}
				}
				break
			}
			await 0
		loop
	}
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		repeat
			chatrecv GameStat, GameEnv
			serverreceive ServerReceived, ReceivedMsg
			if (ServerReceived == (IsRemotePlayer(GameEnv, ActivePlayer)-1)) {
				// 受信失敗の時
				if (ReceivedMsg == 1023) {
					repeat NUM_OF_PLAYERS
						if (IsRemotePlayer(GameEnv, cnt) == ServerReceived+1) {
							if (getDisconnectFlag(GameStat, cnt) == 0) {
								setDisconnectFlag GameStat, cnt, 1
								warn strf("プレイヤー [%d] の回線切断を検知しました。", cnt)
							}
						}
					loop
					ReceivedMsg = 0x9f
				}
				repeat NUM_OF_ACTUAL_PLAYERS-1
#ifdef SANMAT
					if (ServerReceived != cnt+1)&&((IsRemotePlayer(GameEnv, 0) == cnt+2)||(IsRemotePlayer(GameEnv, 1) == cnt+2)||(IsRemotePlayer(GameEnv, 2) == cnt+2)) {
#else
					if (ServerReceived != cnt+1)&&((IsRemotePlayer(GameEnv, 0) == cnt+2)||(IsRemotePlayer(GameEnv, 1) == cnt+2)||(IsRemotePlayer(GameEnv, 2) == cnt+2)||(IsRemotePlayer(GameEnv, 3) == cnt+2)) {
#endif
						sockputc@ SendingMsg, cnt+1+SOCK_GAME
						if (stat) {error strf("データの送信に失敗しました。クライアント [%d] ステータスコード [%d]", cnt+1, stat)}
						else {trace strf("クライアント [%d] にデータを送信 [0x%02X]", cnt+1, ReceivedMsg)}
					}
				loop
				break
			}
			await 0
		loop
	}
	if ((ReceivedMsg >= 0x60)&&(ReceivedMsg <= 0x6d)) {DiscardTileIndex = ReceivedMsg - 0x60 + DAHAI_TYPE_NORMAL}
	if ((ReceivedMsg >= 0x70)&&(ReceivedMsg <= 0x7d)) {DiscardTileIndex = ReceivedMsg - 0x70 + DAHAI_TYPE_KAN}
	if ((ReceivedMsg >= 0x80)&&(ReceivedMsg <= 0x8d)) {DiscardTileIndex = ReceivedMsg - 0x80 + DAHAI_TYPE_KAKAN}
	if ((ReceivedMsg >= 0x90)&&(ReceivedMsg <= 0x9d)) {DiscardTileIndex = ReceivedMsg - 0x90 + DAHAI_TYPE_RIICHI}
	if ((ReceivedMsg >= 0xc0)&&(ReceivedMsg <= 0xcd)) {DiscardTileIndex = ReceivedMsg - 0xc0 + DAHAI_TYPE_OPENRIICHI}
#ifdef SANMAX
	if ((ReceivedMsg >= 0xd0)&&(ReceivedMsg <= 0xdd)) {DiscardTileIndex = ReceivedMsg - 0xd0 + DAHAI_TYPE_FLOWER}
#endif
	if (ReceivedMsg == 0x6e) {DiscardTileIndex = DAHAI_TYPE_KYUUSHU}
	if (ReceivedMsg == 0x6f) {DiscardTileIndex = DAHAI_TYPE_AGARI}
	if (ReceivedMsg == 0x9f) {DiscardTileIndex = TSUMOHAI_INDEX + DAHAI_TYPE_NORMAL}
	return DiscardTileIndex
#global

/* 接続先の鳴き */
#module
#include "const.as"
#deffunc remotenaki var GameStat, var GameEnv, array RonFlag, array PonFlag, array MinkanFlag, array ChiFlag, int CurrentSutehai, int CurrentSutehaiAkaDora

	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		repeat NUM_OF_ACTUAL_PLAYERS
			tmp = cnt
			repeat
				chatrecv GameStat, GameEnv
				clientreceive ClientReceived, ReceivedMsg
				if (ClientReceived) {
					if (tmp != getPlayer(GameStat)) {
						if (ReceivedMsg == 0xa1) {RonFlag(tmp) = 1}
						if (ReceivedMsg == 0xa2) {PonFlag(tmp) = 1}
						if (ReceivedMsg == 0xa3) {MinkanFlag(tmp) = 1}
#ifndef ALLSANMA
						if (ReceivedMsg == 0xa4) {ChiFlag(tmp) = 1}
						if (ReceivedMsg == 0xa5) {ChiFlag(tmp) = 2}
						if (ReceivedMsg == 0xa6) {ChiFlag(tmp) = 3}
#endif
						if (ReceivedMsg == 0xa7) {setDisconnectFlag GameStat, tmp, 1}
					}
					break
				}
				await 0
			loop
		loop
	}
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		Received1 = 0: Received2 = 0: Received3 = 0
#ifdef SANMAT
		if ((IsRemotePlayer(GameEnv, 0) != 2)&&(IsRemotePlayer(GameEnv, 1) != 2)&&(IsRemotePlayer(GameEnv, 2) != 2)) {
#else
		if ((IsRemotePlayer(GameEnv, 0) != 2)&&(IsRemotePlayer(GameEnv, 1) != 2)&&(IsRemotePlayer(GameEnv, 2) != 2)&&(IsRemotePlayer(GameEnv, 3) != 2)) {
#endif
			Received1 = 1
		}
#ifdef SANMAT
		if ((IsRemotePlayer(GameEnv, 0) != 3)&&(IsRemotePlayer(GameEnv, 1) != 3)&&(IsRemotePlayer(GameEnv, 2) != 3)) {
#else
		if ((IsRemotePlayer(GameEnv, 0) != 3)&&(IsRemotePlayer(GameEnv, 1) != 3)&&(IsRemotePlayer(GameEnv, 2) != 3)&&(IsRemotePlayer(GameEnv, 3) != 3)) {
#endif
			Received2 = 1
		}
#ifndef SANMAT
		if ((IsRemotePlayer(GameEnv, 0) != 4)&&(IsRemotePlayer(GameEnv, 1) != 4)&&(IsRemotePlayer(GameEnv, 2) != 4)&&(IsRemotePlayer(GameEnv, 3) != 4)) {
			Received3 = 1
		}
#endif
		repeat
			chatrecv GameStat, GameEnv
			serverreceive ServerReceived, ReceivedMsg
			if (ServerReceived) {
				repeat NUM_OF_PLAYERS
					if ((ServerReceived == 1)&&(IsRemotePlayer(GameEnv, cnt) == 2)) {
						gosub *checkremotenaki
						Received1 = 1
					}
					if ((ServerReceived == 2)&&(IsRemotePlayer(GameEnv, cnt) == 3)) {
						gosub *checkremotenaki
						Received2 = 1
					}
#ifndef SANMAT
					if ((ServerReceived == 3)&&(IsRemotePlayer(GameEnv, cnt) == 4)) {
						gosub *checkremotenaki
						Received3 = 1
					}
#endif
				loop
			}
#ifdef SANMAT
			if ((Received1 == 1)&&(Received2 == 1)) {
#else
			if ((Received1 == 1)&&(Received2 == 1)&&(Received3 == 1)) {
#endif
				repeat NUM_OF_ACTUAL_PLAYERS
					SendingMsg = 0xa0
					if (RonFlag(cnt) == 1) {SendingMsg = 0xa1}
					if (PonFlag(cnt) == 1) {SendingMsg = 0xa2}
					if (MinkanFlag(cnt) == 1) {SendingMsg = 0xa3}
#ifndef ALLSANMA
					if (ChiFlag(cnt) == 1) {SendingMsg = 0xa4}
					if (ChiFlag(cnt) == 2) {SendingMsg = 0xa5}
					if (ChiFlag(cnt) == 3) {SendingMsg = 0xa6}
#endif
					if (getDisconnectFlag(GameStat, cnt) == 1) {SendingMsg = 0xa7}
					serversend SendingMsg, GameEnv
				loop
				break
			}
			await 0
		loop
	}
	repeat NUM_OF_PLAYERS
		if (RonFlag(cnt) == 1) {
			setHand GameStat, HAND_TILECODE, TSUMOHAI_INDEX, cnt, CurrentSutehai
			setHand GameStat, HAND_REDTILE, TSUMOHAI_INDEX, cnt, CurrentSutehaiAkaDora
		}
	loop
	return

*checkremotenaki
	if (ReceivedMsg == 1023) {
		if (getDisconnectFlag(GameStat, cnt) == 0) {
			setDisconnectFlag GameStat, cnt, 1
			warn strf("プレイヤー [%d] の回線切断を検知しました。", cnt)
		}
		ReceivedMsg = 0xa7
	}
	if (ReceivedMsg == 0xa1) {RonFlag(cnt) = 1}
	if (ReceivedMsg == 0xa2) {PonFlag(cnt) = 1}
	if (ReceivedMsg == 0xa3) {MinkanFlag(cnt) = 1}
#ifndef ALLSANMA
	if (ReceivedMsg == 0xa4) {ChiFlag(cnt) = 1}
	if (ReceivedMsg == 0xa5) {ChiFlag(cnt) = 2}
	if (ReceivedMsg == 0xa6) {ChiFlag(cnt) = 3}
#endif
	return
#global

/* 落ち戻り用の処理 */
*reconnection
	if (ReconnectionSuccess == 0) {
		dialog "サーバーとの接続が切れました\n再接続を試みます", 1, "回線切断"
	}
	sockclose 0+SOCK_GAME: await 1000
	ReconnectionSuccess = 0
	repeat 10
		sockopen 0+SOCK_GAME, ServerAddress, PORT_GAME+ClientNumber
		if (stat == 0) {ReconnectionSuccess = 1: break}
		await 1000
	loop
	if (ReconnectionSuccess == 0) {
		dialog "再接続に失敗しました\nゲームは続行できません", 1, "回線切断"
		if (getGameMode(GameEnv) != GAMEMODE_STANDALONE) {sockclose SOCK_GAME+0}
		if (getGameMode(GameEnv) == GAMEMODE_SERVER) {sockclose SOCK_GAME+1: sockclose SOCK_GAME+2: sockclose SOCK_GAME+3}
		font fontname, 48, 0: objsize 200, 60
		pos 620, 560: button goto "確認", *startgame
		stop
	}
return

/* チャットバッファ受信 */
#module
#include "const.as"
#deffunc initializechat var GameEnv, var ServerAddress, int ClientNumber
	chatinit
	if (getGameMode(GameEnv) == GAMEMODE_STANDALONE) {gsel SCR_CHAT: objgray 1, 0: objgray 2, 0: gsel 0}
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		ChatBuf1 = "": ChatBuf2 = "": ChatBuf3 = ""
		repeat NUM_OF_PLAYERS
			if (IsRemotePlayer(GameEnv, cnt) > 1) {tmpClientWaiting(cnt) = 1}
			else {tmpClientWaiting(cnt) = 0}
		loop
		repeat
			repeat NUM_OF_PLAYERS
				if (IsRemotePlayer(GameEnv, cnt) > 1) {
					if (tmpClientWaiting(cnt) == 1) {
						sockwait@ SOCK_CHAT-1+IsRemotePlayer(GameEnv, cnt)
						if (stat == 0) {tmpClientWaiting(cnt) = 0}
					;	title ""+tmpClientWaiting(0)+" "+tmpClientWaiting(1)+" "+tmpClientWaiting(2)+" "+tmpClientWaiting(3)
					}
				}
			loop
			await 0
			if ((tmpClientWaiting(0)+tmpClientWaiting(1)+tmpClientWaiting(2)+tmpClientWaiting(3)) == 0) {
				break
			}
		loop
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		sockopen@ SOCK_CHAT+0, ServerAddress, PORT_CHAT+ClientNumber
		ChatBuf = ""
	}
	gsel 0, 1
	return

#deffunc chatrecv var GameStat, var GameEnv
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
		repeat NUM_OF_PLAYERS
			if (IsRemotePlayer(GameEnv, cnt) >= 2) {
				sockcheck@ SOCK_CHAT-1+IsRemotePlayer(GameEnv, cnt)
				if (stat == 0) {
					sdim chattmp, 65536: sockget@ chattmp, 65536, SOCK_CHAT-1+IsRemotePlayer(GameEnv, cnt)
					switch IsRemotePlayer(GameEnv, cnt)
						case 2: ChatBuf1 += chattmp: notesel ChatBuf1: swbreak
						case 3: ChatBuf2 += chattmp: notesel ChatBuf2: swbreak
						case 4: ChatBuf3 += chattmp: notesel ChatBuf3: swbreak
					swend
					repeat notemax
						if (notemax == 0) {break}
						tmpcht = "": noteget tmpcht, 0: notedel 0
						#ifdef SANMAT
							if ((IsRemotePlayer(GameEnv, 0) == 2)||(IsRemotePlayer(GameEnv, 1) == 2)||(IsRemotePlayer(GameEnv, 2) == 2)) {sockput@ tmpcht+"\n", SOCK_CHAT+1}
							if ((IsRemotePlayer(GameEnv, 0) == 3)||(IsRemotePlayer(GameEnv, 1) == 3)||(IsRemotePlayer(GameEnv, 2) == 3)) {sockput@ tmpcht+"\n", SOCK_CHAT+2}
						#else
							if ((IsRemotePlayer(GameEnv, 0) == 2)||(IsRemotePlayer(GameEnv, 1) == 2)||(IsRemotePlayer(GameEnv, 2) == 2)||(IsRemotePlayer(GameEnv, 3) == 2)) {sockput@ tmpcht+"\n", SOCK_CHAT+1}
							if ((IsRemotePlayer(GameEnv, 0) == 3)||(IsRemotePlayer(GameEnv, 1) == 3)||(IsRemotePlayer(GameEnv, 2) == 3)||(IsRemotePlayer(GameEnv, 3) == 3)) {sockput@ tmpcht+"\n", SOCK_CHAT+2}
							if ((IsRemotePlayer(GameEnv, 0) == 4)||(IsRemotePlayer(GameEnv, 1) == 4)||(IsRemotePlayer(GameEnv, 2) == 4)||(IsRemotePlayer(GameEnv, 3) == 4)) {sockput@ tmpcht+"\n", SOCK_CHAT+3}
						#endif
							if (strmid(tmpcht, 0, 1) == "0") {chatappend getPlayerName(GameEnv, 0)+"("+windName(playerWind(0, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
							if (strmid(tmpcht, 0, 1) == "1") {chatappend getPlayerName(GameEnv, 1)+"("+windName(playerWind(1, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
							if (strmid(tmpcht, 0, 1) == "2") {chatappend getPlayerName(GameEnv, 2)+"("+windName(playerWind(2, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
						#ifndef SANMAT
							if (strmid(tmpcht, 0, 1) == "3") {chatappend getPlayerName(GameEnv, 3)+"("+windName(playerWind(3, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
						#endif
					loop
					noteunsel
				}
			}
		loop
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		sockcheck@ SOCK_CHAT+0
		if (stat == 0) {
			sdim chattmp, 65536: sockget@ chattmp, 65536, SOCK_CHAT+0
			ChatBuf += chattmp: notesel ChatBuf
			repeat notemax
				if (notemax == 0) {break}
				tmpcht = "": noteget tmpcht, 0: notedel 0
					if (strmid(tmpcht, 0, 1) == "0") {chatappend getPlayerName(GameEnv, 0)+"("+windName(playerWind(0, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
					if (strmid(tmpcht, 0, 1) == "1") {chatappend getPlayerName(GameEnv, 1)+"("+windName(playerWind(1, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
					if (strmid(tmpcht, 0, 1) == "2") {chatappend getPlayerName(GameEnv, 2)+"("+windName(playerWind(2, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
				#ifndef SANMAT
					if (strmid(tmpcht, 0, 1) == "3") {chatappend getPlayerName(GameEnv, 3)+"("+windName(playerWind(3, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
				#endif
			loop
			noteunsel
		}
	}
return

#deffunc chatpost var GameStat, var GameEnv
	CurrentChatTxt = CurrentChatTxt()
	if (getGameMode(GameEnv) == GAMEMODE_SERVER) {
	#ifdef SANMAT
		if ((IsRemotePlayer(GameEnv, 0) == 2)||(IsRemotePlayer(GameEnv, 1) == 2)||(IsRemotePlayer(GameEnv, 2) == 2)) {sockput@ ""+getPlayer(GameStat)+CurrentChatTxt+"\n", SOCK_CHAT+1}
		if ((IsRemotePlayer(GameEnv, 0) == 3)||(IsRemotePlayer(GameEnv, 1) == 3)||(IsRemotePlayer(GameEnv, 2) == 3)) {sockput@ ""+getPlayer(GameStat)+CurrentChatTxt+"\n", SOCK_CHAT+2}
	#else
		if ((IsRemotePlayer(GameEnv, 0) == 2)||(IsRemotePlayer(GameEnv, 1) == 2)||(IsRemotePlayer(GameEnv, 2) == 2)||(IsRemotePlayer(GameEnv, 3) == 2)) {sockput@ ""+getPlayer(GameStat)+CurrentChatTxt+"\n", SOCK_CHAT+1}
		if ((IsRemotePlayer(GameEnv, 0) == 3)||(IsRemotePlayer(GameEnv, 1) == 3)||(IsRemotePlayer(GameEnv, 2) == 3)||(IsRemotePlayer(GameEnv, 3) == 3)) {sockput@ ""+getPlayer(GameStat)+CurrentChatTxt+"\n", SOCK_CHAT+2}
		if ((IsRemotePlayer(GameEnv, 0) == 4)||(IsRemotePlayer(GameEnv, 1) == 4)||(IsRemotePlayer(GameEnv, 2) == 4)||(IsRemotePlayer(GameEnv, 3) == 4)) {sockput@ ""+getPlayer(GameStat)+CurrentChatTxt+"\n", SOCK_CHAT+3}
	#endif
		tmpcht = ""+getPlayer(GameStat)+CurrentChatTxt
			if (strmid(tmpcht, 0, 1) == "0") {chatappend getPlayerName(GameEnv, 0)+"("+windName(playerWind(0, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
			if (strmid(tmpcht, 0, 1) == "1") {chatappend getPlayerName(GameEnv, 1)+"("+windName(playerWind(1, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
			if (strmid(tmpcht, 0, 1) == "2") {chatappend getPlayerName(GameEnv, 2)+"("+windName(playerWind(2, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
		#ifndef SANMAT
			if (strmid(tmpcht, 0, 1) == "3") {chatappend getPlayerName(GameEnv, 3)+"("+windName(playerWind(3, getRound(GameStat)))+") : "+strmid(tmpcht, 1, strlen(tmpcht))+"\n"}
		#endif
	}
	if (getGameMode(GameEnv) == GAMEMODE_CLIENT) {
		sockput@ ""+getPlayer(GameStat)+CurrentChatTxt+"\n", SOCK_CHAT+0
	}
	clearChatTxt
return
#global

/* チャット送信 */
*chatpost_
	chatpost GameStat, GameEnv
return
